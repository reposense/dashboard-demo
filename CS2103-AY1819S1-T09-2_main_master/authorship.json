[
  {
    "path": "1a.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003cdeck\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003cname\u003e1a\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cquestion\u003eI AM IN A REVIEW\u003c/question\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003canswer\u003ewat\u003c/answer\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cquestion\u003eSecond Card\u003c/question\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003canswer\u003e2\u003c/answer\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cquestion\u003ed Card\u003c/question\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003canswer\u003e2\u003c/answer\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003c/deck\u003e"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 16
    }
  },
  {
    "path": "Geography.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003cdeck\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003cname\u003eGeography\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cquestion\u003eRivers\u003c/question\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003canswer\u003ea\u003c/answer\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cperformance\u003eNORMAL\u003c/performance\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003ctimesReviewed\u003e0\u003c/timesReviewed\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cquestion\u003eWhat are Coasts?\u003c/question\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003canswer\u003ea\u003c/answer\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cperformance\u003eNORMAL\u003c/performance\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003ctimesReviewed\u003e0\u003c/timesReviewed\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cquestion\u003eWhat is Foiliage?\u003c/question\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003canswer\u003ea\u003c/answer\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cperformance\u003eNORMAL\u003c/performance\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003ctimesReviewed\u003e0\u003c/timesReviewed\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cquestion\u003eHow many continents are there?\u003c/question\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003canswer\u003ea\u003c/answer\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cperformance\u003eNORMAL\u003c/performance\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003ctimesReviewed\u003e0\u003c/timesReviewed\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003c/deck\u003e"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 28
    }
  },
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "image:docs/images/Anakin.png[width\u003d\"250\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "image:images/Anakin.png[width\u003d\"200\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d Anakin"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-T09-2/main?branch\u003dmaster[image:https://travis-ci.org/CS2103-AY1819S1-T09-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "https://ci.appveyor.com/project/leeyjjoel/main/branch/master[image:https://ci.appveyor.com/api/projects/status/qjfbm4fqjffl8ujk/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-T09-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-T09-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "https://www.codacy.com/app/leeyjjoel/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dCS2103-AY1819S1-T09-2/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/1bb58958c22c473dbf75c560d5b71612[Codacy Badge]]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Anakin is a spaced repetition flashcard program which makes remembering things easy."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Here\u0027s what some of our users have to say:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[quote, Tan Xiao Ming, Computer Science Graduate]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Amazing work. Simply amazing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[quote, Donnie T., Political Science Student]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "The greatest CLI app, maybe, ever!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[quote, Tony Stark, Billionare; Inventor; Entrepreneur]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Better than Pepper Potts!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[quote, A.Aron Tan, Lecturer]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "They did it."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "image:docs/images/Ui.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "image:images/Ui.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* This project is based off the exceptional https://github.com/se-edu/[AddressBook-Level4] developed by SE-EDU."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* Darth Vadar icon by https://thenounproject.com/Alone_Forever/uploads/?i\u003d1799999[Alone_Forever]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence: link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 5,
      "yujiatay": 10,
      "lessthanfree": 18,
      "-": 23
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"githubId\": \"leeyjjoel\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"authorNames\": [\"leeyjjoel\", \"Lee Yi Jie Joel\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"githubId\": \"lessthanfree\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "      \"authorNames\": [\"lessthanfree\", \"David Goh\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      \"githubId\": \"tomforge\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \"authorNames\": [\"tomforge\", \"Foo Guo Wei\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \"githubId\": \"yujiatay\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "      \"authorNames\": [\"yujiatay\", \"Yu Jia Tay\", \"Yu Jia\"]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \"githubId\": \"truongthanh2606\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \"authorNames\": [\"truongthanh2606\", \"Truong Thanh\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    archiveName \u003d \u0027Anakin.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        \u0027site-name\u0027: \u0027Anakin\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-T09-2/main\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "truongthanh2606": 1,
      "lessthanfree": 1,
      "-": 243
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Anakin was the brainchild of the T09-02 team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d\u003d Joel Lee"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "image::leeyjjoel.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "{empty}[http://github.com/leeyjjoel[github]] [\u003c\u003cleeyjjoel#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Role: Team Lead"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": ".Responsibilities:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "- Project Management"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003d\u003d\u003d Foo Guo Wei"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "image::tomforge.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": "{empty} [https://github.com/tomforge[github]] [\u003c\u003ctomforge#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": ".Responsibilities:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "- Git expert"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "- In charge of Storage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d Tay Yu Jia"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "image::yujiatay.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "{empty}[http://github.com/yujiatay[github]] [\u003c\u003cyujiatay#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ".Responsibilities:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "- IntelliJ expert"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "- In charge of UI"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d David Goh"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "image::lessthanfree.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "{empty}[http://github.com/lessthanfree[github]] [\u003c\u003clessthanfree#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ".Responsibilities:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "- Documentation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "- Project Management"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "\u003d\u003d\u003d Nguyen Trong Truong Thanh"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "image::truongthanh2606.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "{empty}[https://github.com/truongthanh2606[github]] [\u003c\u003ctruongthanh2606#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ".Responsibilities:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "- In charge of Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "- Quality Assurance"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 2,
      "yujiatay": 18,
      "tomforge": 5,
      "truongthanh2606": 3,
      "lessthanfree": 9,
      "-": 33
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/addressbook-level4/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "* *Email us* : You can also reach us at `joel_lee [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 1,
      "-": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d Anakin - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T09-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "By: `Team T09-2`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "// tag::uicomponent[]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "image::AnakinUIClassDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `DeckEditScreen`,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "`DeckReviewScreen`, `StatusBarFooter` etc. The `DeckEditScreen` is in turn made up of `DeckListPanel` and"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "`CardListPanel` and the `DeckReviewScreen` is made up of `DeckReviewCard`. All these, including the `MainWindow`,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "The `UI` component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` changes."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "// end::uicomponent[]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "// tag::logic[]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "image::AnakinLogicClassDiagram.png[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "_Structure of the Logic component_"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "The \u0027Logic\u0027 component:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "****"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* exposes functionality through LogicManager"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* parses user input"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* create commands"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* modifies Model"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "****"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "The `LogicManager` contains an `AnakinModel`, an `AnakinParser`, and a `CommandHistory`."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "When a string input by the user is parsed by `AnakinParser`, it creates a new `AnakinCommand` of the appropriate type with the relevant arguments (based on parser tokens). Each `AnakinCommand` has its own Class. `LogicManager` will call `execute` on the command object. If successful, `LogicManager` will modify `Model` accordingly. Regardless of success, `LogicManager` will update `CommandHistory` with the `CommandResult`."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "// end::logic[]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "// tag::modelcomponent[]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "image::AnakinModelClassDiagram.png[width\u003d\"900\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Structure of the Model Component"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* stores Anakin\u0027s data and manipulates the state of the application."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* provides a Model interface for Logic component to execute its set of commands."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* manages the interaction and relationship between different objects (Anakin, Card, Deck, ...)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* exposes an unmodifiable ObservableList\u003cDeck\u003e and ObservableList\u003cCard\u003e that can be \u0027observed\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "e.g. the UI is bound to these lists so that the UI automatically updates when the data in the lists change."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "// end::modelcomponent[]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tomforge"
        },
        "content": "This section details the Storage component, which is the bridge between internal application state and external files."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tomforge"
        },
        "content": "* can store `UserPref` objects in json format and read it back"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tomforge"
        },
        "content": "* can save Anakin\u0027s data in XML format and read it back"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "// tag::cardleveloperation[]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Card-level operations"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Card-level operations are supported in Anakin class:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "* Anakin#addCard(Card card) - Add a card to the current deck."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "* Anakin#deleteCard(Card card) - Delete a card from the current deck."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "* Anakin#updateCard( Card target, Card editedCard) - Update the information of a card inside the current deck."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the Model interface as: Model#addCard(Card card), Model#deleteCard(Card card), Model#updateCard(Card target, Card editedCard) respectively."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how these operations are executed in Model."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "The user executes `newcard q/Hello? a/World` to add a new card with question \"Hello?\" and answer \"World\" to the current deck."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ". The `newcard` command calls Model#addCard(Card card), or ModelManager#addCard."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ". ModelManager, which implements Model interface, will call Anakin#addCard method."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ". Anakin#addCard will throw DeckNotFoundException if the user is not inside a deck. Otherwise, it will call method UniqueCardList#add(Card toAdd)."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ". UniqueCardList#add will throw DuplicateCardException if the card already exist in the list. Otherwise, it will add the card to its internal ObservableList\u003cCard\u003e."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the `newcard` operation works:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "image::NewCardSequenceDiagram.png[width\u003d\"790\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design consideration"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alternative 1 (current choice):* Implement the logic of card-level operations in Anakin class."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement and debug as all logic related with executing commands are implemented in Anakin."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Deck class is not informed, or notified when its UniqueCardList is modified. This might result in unexpected behaviors if a card-level command is executed and the person in charge of Deck class assumes that the UniqueCardList is unmodified."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alternative 2:* Implement the logic of card-level operations in Deck class."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: The responsibility of each class is clear, only a Deck can modify its list of cards."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: The logic for executing deck-level and card-level commands are implemented at different places. We must ensure that the implementation of each command is correct."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "// end::cardleveloperation[]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::handleinvalidcommands[]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Handle invalid commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* Deck-level operations (`newdeck`, `editdeck`, `deldeck`, `exportdeck`, `importdeck`)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": " are disabled when user is inside a deck."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* These commands will be blocked in Logic component"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "by checking the state of the application through Model interface."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design consideration"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alternative 1 (current choice):* Implement the logic of command-checking in"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Logic component"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reduce possible bugs caused by having each methods check the state of the application before"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "execution."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "*** Model component does not have to handle invalid commands."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "*** Exceptions are thrown and handled inside Logic components instead of being passed"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "from Model to Logic."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Increase coupling between Logic and Model component."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alternative 2:* Handle all commands logic in Model component"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Lower degree of dependency between Logic and Model (aka low coupling), thus"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "make the process of maintenance, integration and testing easier."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Model component has to check for invalid commands according to its state for all commands."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "// end::handleinvalidcommands[]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "// tag::deckreview[]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d Deck Review Implementation"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "The deck review mechanism is facilitated by `Anakin` from Model, the `MainWindow` and `DeckReviewScreen` from UI and"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "the EventsCenter."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* `Anakin#isReviewingDeck()` - Checks if user is in review mode."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* `Anakin#startReview()` - Starts a review."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* `Anakin#endReview()` - Ends a review."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* `Anakin#getIndexOfCurrentCard()` - Retrieves the index of the last known reviewed card."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* `Anakin#setIndexOfCurrentCard()` - Updates the index of the last known reviewed card."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "These operations are exposed in the Model interface as `Model#isReviewingDeck()`, `Model#startReview()`,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "`Model#endReview()`, `Model#getIndexOfCurrentCard()` and `Model#setIndexOfCurrentCard` respectively."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Also, it is supported by the following commands from Logic:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* `review` - Starts the review of a selected deck"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* `endreview` - End the review"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* `nextcard` - Moves to the subsequent card in the deck"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* `prevcard` - Moves to the previous card in the deck"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* `flipcard` - Flips the current card to display either the question or the answer"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Furthermore, it posts the following events to trigger changes in UI:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* `StartReviewRequestEvent(Card card)`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* `FlipCardRequestEvent()`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* `ReviewNextCardEvent(Card nextCard)`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* `ReviewPreviousCardEvent(Card prevCard)`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* `EndReviewRequestEvent()`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Given below is an example usage scenario and how the deck review mechanism behaves at each step."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Step 1. The user launches the application and he already has a deck of cards that he wants to review. He executes"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "`review 1` command to review the first deck on the list."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "****"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ". The `review` command calls `Model#getIntoDeck(Deck deck)`."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ". It then calls `Model#startReview()` which updates the `isReviewingDeck` boolean in `Anakin` to true."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ". It also calls `Model#getFilteredCardList()` and `Model#getIndexOfCurrentCard()` to retrieve the `Card`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "object of the last reviewed card."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ". Thereafter, it posts a `StartReviewRequestEvent(Card card)` with the EventsCenter."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ". `MainWindow`, on the UI side, subscribes to this event and switches `DeckEditScreen` with `DeckReviewScreen` by"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "reordering the nodes in `mainAreaPlaceholder`, which is a JavaFX StackPane."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "****"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "The following sequence diagram shows how the review operation works:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "image::ReviewSequenceDiagram.png[]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Step 2. The user sees the question displayed on the first card and comes up with his own answer. To verify his"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "answer, he executes the `flipcard` command."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "****"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ". The `flipcard` command posts a `FlipCardRequestEvent` with EventsCenter."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ". `DeckReviewScreen` is notified of the event and switches the card with the question with the other card displaying"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "the answer. This is also achieved by reordering the nodes in a StackPane but this time in `reviewAreaPlaceholder`. As"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " a result, the user is presented with the answer to the question."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "****"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Step 3. The user wants to go to the next card and executes `nextcard` command."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "****"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ". The `nextcard` command calls `Model#getFilteredCardList()` and `Model#getIndexOfCurrentCard()` and increments the index by one."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ". If the incremented index is equal to the size of the card list, it reassigns the index a value of 0. This is to"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "ensure that calling `nextcard` on the last card of the deck will loop back to the first card."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ". Using the `Card` object found at the new index, the command posts a `ReviewNextCardEvent` using EventsCenter."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ". `DeckReviewScreen` is subscribed to the event and uses the `Card` object to create question and answer"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "`DeckReviewCard`s and replaces the currently displayed cards with these two new ones."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "****"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Step 4. If the user wants to go back to review a previous card, he executes `prevcard` command. The explanation"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "of the process is similar to Step 3."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Step 5. When the user is done, he executes `endreview` to quit review mode."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "****"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ". The `endreview` command posts a `EndReviewRequestEvent` using EventsCenter."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ". `MainWindow` is subscribed to the event and switches the `DeckEditScreen` back to the front by reordering the nodes"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " in `mainAreaPlaceholder` and the user is able to edit his decks again."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "****"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "The following activity diagram summarizes what happens when a user enters deck review mode."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "image::ReviewActivityDiagram.png[]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Tracking index of current card"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* **Alternative 1 (current choice):** Store a `currentIndex` field in `UniqueCardList`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Pros: Easy to implement and complies with separation of concerns. Can also easily saved in Storage."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Cons: Introducing state to `UniqueCardList` may not be the best solution."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* **Alternative 2:** Store `currentCardIndex` in `Anakin`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Pros: Convenient access to field by exposing method in `Model`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Cons: Field is not required by many operations in `Anakin` and its use case is specific to deck reviews."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Iterating through cards during review"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* **Alternative 1 (current choice):** Post events for UI to change the currently reviewed card."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Pros: Logic of iterating cards is decoupled from UI."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Cons: Limited scalability as adding new functionality require adding more events and event handlers."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* **Alternative 2:** Implement a ListElementPointer for the list of cards similar to command history."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Pros: Able to easily implement more functionality such as keyboard shortcuts for iterating cards."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Cons: Still requires events to trigger changes in UI."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "// end::deckreview[]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003d\u003d\u003d Performance Tracking Implementation"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tomforge"
        },
        "content": "This section details the implementation details and considerations of the performance tracking feature."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Cards contain the `Performance` parameter, implemented as an `enum`, as well as a `timesReviewed` counter. The fields"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tomforge"
        },
        "content": " are set to `normal` difficulty and `0` counts respectively on initialization. Since these are metadata fields, they"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tomforge"
        },
        "content": " will be considered optional and a `Card` can still be created without specifying them, which will result in the"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tomforge"
        },
        "content": " fields being reset to the default initializations."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tomforge"
        },
        "content": "The user can change the difficulty of a card during \"review\" mode. Users can only do this on the card they are"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tomforge"
        },
        "content": "currently reviewing, as it is the only time it makes sense to do so. Cards assigned a difficulty will have their"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tomforge"
        },
        "content": "`timesReviewed` counter incremented by one."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tomforge"
        },
        "content": "The command available to the user will be `classify DIFFICULTY`, where `DIFFICULTY` is any of the strings"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tomforge"
        },
        "content": " `easy`, `normal`, `hard`, corresponding to the level of perceived difficulty for that"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tomforge"
        },
        "content": " flashcard."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Given below is an example usage scenario for the performance tracking feature."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Step 1. The user requests to \"review\" a deck. He sees the question of card A from the deck."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Step 2. The user requests to see the answer. He sees the displayed answer."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Step 3. The user executes `classify hard`. Card A is now assigned the difficulty of `hard`."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Step 4. The user continues reviewing the rest of the cards in the deck."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Step 5. Card A is shown to the user more regularly when he reviews the same deck in the future."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "// tag::uichanges[]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d UI Implementation"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d\u003d Previous implementation (v1.2)"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "The UI for Anakin at v1.2 split the main area into three sections:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * (Left) List of decks"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * (Right) List of cards in selected deck"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "This was implemented by morphing `PersonListPanel` and `PersonListCard` into our use cases for decks and cards and"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "editing `MainWindow` to render changes in both decks and cards."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Given below is an example usage scenario and how the lists are displayed at each step."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Step 1. The user launches Anakin application and sees a list of sample decks. At this step, the CardListPanel is"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "empty."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Step 2. The user executes `cd 1` command to navigate into the first deck. Anakin renders the deck\u0027s cards (at index"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "1) on the CardListPanel."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Step 3. The user executes `cd 2` command to navigate into the second deck. Anakin switches the displayed cards with"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "that of the second deck."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Step 4. The user executes `cd ..` command to navigate out of the second deck. The CardListPanel is empty again."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation (v1.3)"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "The UI for Anakin was revamped in v1.3. Previously in v1.2, the application had a list of decks and list of cards on"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "its main view `MainWindow`. In v1.3, the panels displaying these lists have been refactored into `DeckEditScreen`."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "This is because of the addition of `DeckReviewScreen` which acts as the user interface when users are reviewing a"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "deck. When the user starts reviewing a deck, `MainWindow` will swap `DeckEditScreen` with `DeckReviewScreen` to show"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "the correct UI. The `DeckReviewScreen` displays a `DeckReviewCard` at a time, as the user is going through his"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "flashcards. It also boasts of the ability to flip the card to display questions and answers separately, and iterate"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "to subsequent and previous cards in the deck. See Deck Review Implementation for an example use case."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* *Alternative 1 (current choice):* Display deck and card lists side by side"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Pros: Easy to implement"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Cons: Somewhat lacking in aesthetics"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* *Alternative 2:* Display deck and card list in the same panel and switch out accordingly"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Pros: Looks more impressive in UI-wise"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Cons: Have to implement a switch event to toggle items inside StackPane"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "// end::uichanges[]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "// tag::keepcardspanelupdatedbyui[]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Keep cards panel updated by UI"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Problem with the old design"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "The UI (MainWindow) constructs the displayed cards panel by obtaining an `ObservableList` of cards from Model,"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "this list is assigned when UI starts, and will never be re-assigned."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "The UI \"observes\" the list and updates when it is modified."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "This approach works well for the deck list because Anakin contains only 1 list of decks."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "However, the card list can not be updated in the same manner because Model component will"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "change its card list\u0027s reference when user enters another deck."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, the card list in UI will not be updated because the card list of which UI has"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "reference to is actually not changed, but it is the wrong card list."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alternative 1 (current choice):* Have a `displayedCards` list in Model and keep it updated with the current list of cards"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "** Explanation: The UI needs only 1 reference to this `displayedCards` list, each time user enters another deck,"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "`displayedCards` list is cleared and the new deck\u0027s list of cards is copy to the `displayedCards` list"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: The structure of Model and UI component needs not be changed"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Need to keep a copy of the current card list, copying the whole list of cards"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": " for each `cd` operation might affect performance"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alternative 2:* Model component raises an event when its current card list\u0027s reference is changed"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "** Explanation: When user `cd` (enters) a new deck, Model will raise"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "an event (CardListChangedEvent), which is subscribed by UI, then UI can re-assign its list of cards"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "and update the cards panel accordingly"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Better performance"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Need to re-design Model and UI components"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "// end::keepcardspanelupdatedbyui[]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "// tag::importexportimplementation[]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Import/Export Implementation"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation (v1.3)"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Imports and exports in Anakin are managed by a PortManager."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Exporting a `Deck` will create an `XmlExportableDeck`, which is exported as a .xml file in the same folder as the Anakin.jar file. +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Upon creation, Model will initialize a PortManager. When an ExportCommand or ImportCommand is executed, it will call the Model\u0027s importDeck or exportDeck method. +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "PortManager uses the `java.nio Path` package to navigate directories."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* *Alternative 1 (current choice):* Have Model contain a PortManager class to manage imports and export."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** Explanation: Commands pass their arguments to Model, which passes arguments to the PortManager."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "In the case of ExportCommand, the `Deck` to be exported is passed from Command to Model to PortManager."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "PortManager returns a `String` of the export location, which is passed to Model, then passed to the Command for printing. +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** Pros: Better modularity and Separation of Concerns"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** Cons: Have to pass messages through many layers and methods."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* *Alternative 2:* Have Model itself manage imports and exports"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** Explanation: Create methods in Model that directly handle conversion, imports, and exports."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** Pros: Less message passing between layers"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** Cons: Worse modularity and Separation of Concerns."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* *Alternative 3:* Use a 3rd party library to assist in managing imports/exports"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** Pros: Potentially more powerful functionality."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** Pros: Good Separation of Concerns as the library is entirely modular."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** Cons: Need to create methods to adapt data to be compatible with the library API."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** Cons: Functionality is obscured. May be difficult to fix any unforseen errors."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "// end::importexportimplementation[]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "// tag::autocompleteimplementation[]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d\u003d Autocomplete Implementation"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation (v1.4)"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "The logic behind autocompletion is handled by an `Autocompleter` class."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "On pressing `\u003cTAB\u003e`, Command Box will raise an event and check if the current text in the command box is autocompletable, that is to say, it is a prefix of one of the existing commands supported by Anakin."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "If it is Autocompletable, Autocompleter will search through the list of existing commands in lexicographic order and find the first match for the current text in the command box."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "* *Alternative 1 (current choice):* Use a set of pre-decided completion text for each command and have a list of all supported command words"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Explanation: Each command has a pre-decided `AUTOCOMPLETE_TEXT` field and we do prefix-matching between the text in the command box and our existing set of command words."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "If there is a potential match, we replace the current text in the command box with the `AUTOCOMPLETE_TEXT` of the supported command which it is matched to."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Pros: Provides better modularity by decreasing the depndency of autocomplete on external components  (Current Implementation)"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Cons: Less personalisation to each user. This design doesn\u0027t take into account the past commands that the user has issued."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "* *Alternative 2:* Match current command against the history of previously executed commands"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Pros: Better personalisation of each command"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Cons: Worse modularity and separation of concerns as the autocompleter would need to interact with the history. As such, it might increase coupling between the autocomplete and history components."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d\u003d\u003d How to add autocompletion for new commands"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "* Should there be a need to include new commands, you can follow the following steps to ensure your command can be autocompleted."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Example Scenario: Suppose we just introduced the `undo` command and we wish to integrate it with the autocompleter."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Step 1 : Add the `AUTOCOMPLETE_TEXT` field to the class. This will decide what the command autocompletes to when the user presses tab. +"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "image::AddAutocompleteTextExample.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Step 2 : Add the class to Autocompleter java"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "image::AddCommandToAutocompleterExample.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "With that, you\u0027re good to go!"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "// end::autocompleteimplementation[]"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "// tag::scheduling[]"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d\u003d Card Scheduling implementation"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation (v1.4)"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "The logic behind scheduling is handled in `Card.java`. Each card contains `reviewScore` and `nextReviewDate` fields which determine how well the user remembers the card and when the user should review the card again respectively."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "When each card is classified using `classify`, it\u0027s score is adjusted according to a modified version of the Super Memo 2 algorithm which we have detailed below. The review score is then updated, and using this review score"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "we calculate the number of days to add to the current review date."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "* *Alternative 1 (current choice):*  Implement the scheduling update by attaching the scheduling process to the card class"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Pros: As only cards are meant to be scheduled, this will increase cohesion by strengthening the relationship between cards and the scheduling process."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Cons: Should there be a need to implement scheduling of decks, then we will need to refactor our code for scheduling."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "* *Alternative 2:* Create a separate scheduler class to handle performance operations."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Pros: This will allow us to schedule multiple type of objects."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Cons: This will decrease cohesion of the components as we only intend for cards to be scheduled in this application."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d\u003d\u003d Scheduling Algorithm details"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "* The variant of the Super Memo 2 algorithm which we have implemented in this application works as follows:"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "image::SuperMemoTwo.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Image : A description of the Super Memo 2 variant we implemented. Formula taken from http://www.blueraja.com/blog/477/a-better-spaced-repetition-learning-algorithm-sm2[Blue Raja\u0027s blog] +"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "*Performance Rating*: +"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "How the user assesses his/her performance during classify. +"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "`easy` corresponds to a 0 before scaling +"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "`normal` corresponds to a 1 before scaling +"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "`hard` corresponds to a 2 before scaling +"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "*Easiness Score* :  This corresponds to `reviewScore` in our implementation"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "As we only have three levels of difficulty, we have added a `BIAS` term to scale the `reviewScore`."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "// end::scheduling[]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "User: Student who uses flashcards heavily in their studies but finds trouble managing too many physical cards."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* has a need to manage a significant number of \u003c\u003cflashcard, flashcards\u003e\u003e"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* prefers desktop over other media (i.e. mobile)"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* can type quickly"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*Value proposition*: Manage flashcards faster than a typical mouse/GUI driven app. +"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Without any UI elements, the UI is extremely clean. Users will never accidentally click on something wrongly as there is never any functional response to mouse input."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|`* * *` |user |add a new deck |"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|`* * *` |user |add cards to a deck |"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|`* * *` |user |delete a card |remove flashcards that I no longer need"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|`* * *` |user |find a deck by name |locate a deck without having to go through the entire list"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|`* * *` |user |iterate through decks |iterate viewing a deck of flashcards"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|`* *` |user with many flashcards |filter flashcards by tag |locate a flashcard easily"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|`* *` |user |rate my flashcards |identify weak areas for later revision"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|`* *` |user with multiple devices |import/ export decks to/ from external files | manage Anakin decks and cards across devices"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|`*` |user that types quickly |custom keyboard shortcuts | bind commands to my own aliases"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//tag::usecases[]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//tag::partialusecases[]"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "(For all use cases below, the *System* is `Anakin` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d List decks"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "1.  User requests to list decks"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "2.  Anakin shows a list of decks"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "+"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Create a deck"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "1. User requests to create deck"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "2. Anakin prompts for deck details"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "3. User enters deck details"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "4. Anakin creates the deck"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "+"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* 3a. User enters name of existing deck"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** 3a1. Anakin displays an error message."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** 3a2. Anakin prompts for deck details."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "+"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Delete a deck"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "1. User requests to list decks"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "2. Anakin shows a list of decks"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "3. User requests to delete a specific deck in the list"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "4. Anakin deletes the deck"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "+"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "+"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "+"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** 3a1. Anakin displays an error message."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "+"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//end::partialusecases[]"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Add a card to a deck"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "1.  User selects a deck"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "2. Anakin displays deck details"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "3.  User requests to add flashcard to the current deck"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "4.  Anakin prompts for flashcard details"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "5. User enters requested details"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "6. Anakin adds flashcard to the current deck"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "+"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "+"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* 4a. User enters details in the wrong format"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "+"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** 4a1. Anakin displays error message"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** 4a2. Anakin prompts for flashcard details"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** 4a3. If details are in the wrong format, repeat steps 1-2"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "+"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Delete a card from a deck"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "1.  User selects a deck"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "2.  Anakin displays deck details"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "3.  User requests to delete a card."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "4.  Anakin deletes the specified from the current deck"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "+"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* 3a. The deck is empty."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* 3a1. Anakin displays error message."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* 3a. The index specified for the card does not exist."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** 3a1. Anakin displays error message"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Locate a deck"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests to display any decks that match their search query."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "2. Anakin returns the list of decks that match the search query."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* 1a. The deck does not exist"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** 1a1. Anakin returns an empty list of decks"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locate a card"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests to display any cards that match their search query."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "2. Anakin returns the list of cards that match the search query."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. The card does not exist"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "** 1a1. Anakin returns an empty list of cards"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Export a deck"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "1. User requests to export a deck"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "2. Anakin exports the deck to the same directory as the Anakin.jar file."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "+"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* 1a. The deck does not exist at the index specified"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "+"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** 1a1. Anakin displays error message"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "+"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Import a deck"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "1. User requests to import a deck at a specified file location"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "2. Anakin imports the deck"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* 1a. The file does not exist at the location specified"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "+"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** 1a1. Anakin displays error message"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* 1a. The file exists but has the wrong format"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** 1a1. Anakin displays error message"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "+"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//end:: usecases[]"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Given below are instructions to test Anakin manually. These instructions only provide a starting framework for testers; testers are expected to do additional, exploratory testing."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Launch"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Initial launch"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Double-click the jar file to launch Anakin"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Expected: Shows the GUI with a set of sample decks."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Navigating into a deck"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: There must be at least 1 deck in the application."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". `cd INDEX_OF_DECK` where `INDEX_OF_DECK` is the currently displayed index of the target deck."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ". The card panel on the right of the deck panel should be populated with a list of the cards in the target deck. If the deck is empty, no cards will be shown."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Exporting a deck"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Exporting a deck from Anakin to a `.xml` file."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: There must be at least 1 deck in the application."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Enter the command `export INDEX_OF_DECK` where `INDEX_OF_DECK` is the currently displayed index of the target deck."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Check the directory that contains Anakin.jar. There should be a `.xml` file with the same name as the target deck."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Importing a deck"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Importing a deck from a `.xml` file at a known file location"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Prerequisites: Target deck must not already exist in Anakin. Renaming an existing deck is acceptable."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Enter the command `import DECK_FILEPATH` where `DECK_FILEPATH` is the relative filepath of the deck from the folder that Anakin.jar is in."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Anakin should display an import success message and the deck should appear in the deck panel."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Navigating into the deck should display all the cards of that deck. (Assuming the deck was not empty)"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Performing the same operation again should display an error that states \"This deck already exist in Anakin\""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*Importing a file that is in the same folder as Anakin.jar*"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Prerequisites: Target must be in the same folder as Anakin.jar. Target deck must not already exist in Anakin. Renaming an existing deck is acceptable."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Enter the command `import DECK_NAME` where `DECK_NAME` is the name of the `.xml` file."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Anakin should display an import success message and the deck should appear in the deck panel."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Navigating into the deck should display all the cards of that deck. (Assuming the deck was not empty)"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Performing the same operation again should display an error that states \"This deck already exist in Anakin\""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*Importing from an invalid location*"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Enter `import BAD_FILEPATH` where `BAD_FILEPATH` is a non-existent location."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Anakin should display an error stating \"File at `BAD_FILEPATH` could not be found\"."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*Importing an invalid file*"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Enter the command `import DECK_FILEPATH` where `DECK_FILEPATH` is the relative filepath of a corrupted or invalid from the folder that Anakin.jar is in."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Anakin should display an error stating \"Target deck contains invalid data\"."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Should be usable on a laptop with average hardware"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". \u003c\u003cinternalState,Internal state\u003e\u003e should be persistent"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Internal state should be recoverable from system crashes"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ".  Should be able to hold up to 1000 flashcards without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Interactions should be smooth (\u003c2 seconds response time)"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Should be usable by a command-line novice"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Navigation should be fast for expert user"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Internal state should be modifiable by expert user"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Internal state should be exportable and importable"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ". Should support formatting languages (e.g. \u003c\u003cmarkdown,Markdown\u003e\u003e, LaTEX)"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[[deck]] Deck::"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "A collection of flashcards."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[[flashcard]] Flashcard::"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "A card containing a prompt on one side, and a small amount of information (the answer) on the other"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[[internalState]] Internal State::"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "The data of the application which includes decks, cards, and the order they are in but excludes session based information like Command History. +"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Maintained by Model and stored in Storage."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[[markdown]] Markdown::"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "A markup language with plain text formatting syntax."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Windows, Linux, Unix, OS-X"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 86,
      "tomforge": 30,
      "yujiatay": 167,
      "truongthanh2606": 10,
      "lessthanfree": 254,
      "-": 621
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnumlevels: 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use High-Level Designs `[LO-HighLevelDesign]`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e describes the high-level design using an _Architecture Diagrams_ and high-level sequence diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/[se-edu/se-book: Design: Architecture]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/design/introduction/multilevelDesign/[se-edu/se-book: Design: Introduction: Multi-Level Design]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Event-Driven Programming `[LO-EventDriven]`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e uses events to communicate with components without needing a direct coupling. Also note how the link:{repoURL}/src/main/java/seedu/address/commons/core/index/EventsCenter.java[`EventsCenter.java`] acts as an event dispatcher to facilitate communication between event creators and event consumers."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/architecturalStyles/eventDriven/[se-edu/se-book: Design: Architecture: Architecture Styles: Event-Driven Architectural Style]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use API Design `[LO-ApiDesign]`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Note how components of AddressBook have well-defined APIs. For example, the API of the `Logic` component is given in the link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image:LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/reuse/apis/[se-edu/se-book: Implementation: Reuse: APIs]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Assertions `[LO-Assertions]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the AddressBook app uses Java ``assert``s to verify assumptions."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/assertions/[se-edu/se-book: Implementation: Error Handling: Assertions]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more assertions"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Make sure assertions are enabled in your IDE by forcing an assertion failure (e.g. add `assert false;` somewhere in the code and run the code to ensure the runtime reports an assertion failure)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add more assertions to AddressBook as you see fit."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Logging `[LO-Logging]`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cDeveloperGuide#logging, how the AddressBook app uses Java\u0027s `java.util.log` package to do logging\u003e\u003e."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/logging/[se-edu/se-book: Implementation: Error Handling: Logging]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more logging"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Add more logging to AddressBook as you see fit."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Defensive Coding `[LO-DefensiveCoding]`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Note how AddressBook uses the `ReadOnly*` interfaces to prevent objects being modified by clients who are not supposed to modify them."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/defensiveProgramming/[se-edu/se-book: Implementation: Error Handling: Defensive Programming]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: identify more places for defensive coding"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Analyze the AddressBook code/design to identify,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* where defensive coding is used"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* where the code can be more defensive"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Build Automation `[LO-BuildAutomation]`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingGradle#, how the AddressBook app uses Gradle to automate build tasks\u003e\u003e."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/what/[se-edu/se-book: Implementation: Integration: Build Automation: What]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to run tasks"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* Use gradle to do these tasks: Run all tests in headless mode, build the jar file."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to manage dependencies"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the build script `build.gradle` file manages third party dependencies such as ControlsFx. Update that file to manage a third-party library dependency."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Continuous Integration `[LO-ContinuousIntegration]`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingTravis#, how the AddressBook app uses Travis to perform Continuous Integration\u003e\u003e. (https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]])"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/continuousIntegrationDeployment/[se-edu/se-book: Implementation: Integration: Build Automation: CI \u0026 CD]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use Travis in your own project"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Set up Travis to perform CI on your own fork."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Code Coverage `[LO-CodeCoverage]`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Note how our CI server \u003c\u003cUsingTravis#, Travis uses Coveralls to report code coverage\u003e\u003e. (https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]) After \u003c\u003cUsingCoveralls#, setting up Coveralls\u003e\u003e for your project, you can visit Coveralls website to find details about the coverage of code pushed to your repo. https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[Here] is an example."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testCoverage/[se-edu/se-book: QA: Testing: Test Coverage]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use the IDE to measure coverage locally"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the IDE to measure code coverage of your tests."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Test Case Design Heuristics `[LO-TestCaseDesignHeuristics]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/src/test/java/seedu/address/commons/util/StringUtilTest.java[`StringUtilTest.java`]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "class gives some examples of how to use _Equivalence Partitions_, _Boundary Value Analysis_, and _Test Input Combination Heuristics_ to improve the efficiency and effectiveness of test cases testing the link:../src/main/java/seedu/address/commons/util/StringUtil.java[`StringUtil.java`] class."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testCaseDesign/[se-edu/se-book: QA: Test Case Design]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Apply Test Case Design Heuristics to other places"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the test case design heuristics mentioned above to improve test cases in other places."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write Integration Tests `[LO-IntegrationTests]`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Consider the link:{repoURL}/src/test/java/seedu/address/storage/StorageManagerTest.java[`StorageManagerTest.java`] class."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* Test methods `prefsReadSave()` and `addressBookReadSave()` are integration tests. Note how they simply test if The `StorageManager` class is correctly wired to its dependencies."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Test method `handleAddressBookChangedEvent_exceptionThrown_eventRaised()` is a unit test because it uses _dependency injection_ to isolate the SUT `StorageManager#handleAddressBookChangedEvent(...)` from its dependencies."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Compare the above with link:{repoURL}/src/test/java/seedu/address/logic/LogicManagerTest.java[`LogicManagerTest`]. Some of the tests in that class (e.g. `execute_*` methods) are neither integration nor unit tests. They are _integration + unit_ tests because they not only check if the LogicManager is correctly wired to its dependencies, but also checks the working of its dependencies. For example, the following two lines test the `LogicManager` but also the `Parser`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "@Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write unit and integration tests for the same method."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Write a unit test for a high-level method somewhere in the code base (or a new method you wrote)."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* Write an integration test for the same method."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write System Tests `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Note how tests below `src/test/java/systemtests` package (e.g link:{repoURL}/src/test/java/systemtests/AddCommandSystemTest.java[`AddCommandSystemTest.java`]) are system tests because they test the entire system end-to-end."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more system tests"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* Write system tests for the new features you add."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Automate GUI Testing `[LO-AutomateGuiTesting]`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses TextFX library to automate GUI testing, including \u003c\u003cDeveloperGuide#headless-gui-testing, _headless_ GUI testing\u003e\u003e."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more automated GUI tests"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* Covered by `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Design Patterns `[LO-DesignPatterns]`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some example design patterns used in the code base."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* *Singleton Pattern* : link:{repoURL}/src/main/java/seedu/address/commons/core/EventsCenter.java[`EventsCenter.java`] is Singleton class. Its single instance can be accessed using the `EventsCenter.getInstance()` method."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* *Facade Pattern* : link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager.java`] is not only shielding the internals of the Storage component from outsiders, it is mostly redirecting method calls to its internal components (i.e. minimal logic in the class itself). Therefore, `StorageManager` can be considered a Facade class."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* *Command Pattern* : The link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command.java`] and its sub classes implement the Command Pattern."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* *Observer Pattern* : The \u003c\u003cDeveloperGuide#events-driven-nature-of-the-design, event driven mechanism\u003e\u003e used by this code base employs the Observer pattern. For example, objects that are interested in events need to have the `@Subscribe` annotation in the class (this is similar to implementing an `\\\u003c\u003cObserver\u003e\u003e` interface) and register with the `EventsCenter`. When something noteworthy happens, an event is raised and the `EventsCenter` notifies all relevant subscribers. Unlike in the Observer pattern in which the `\\\u003c\u003cObservable\u003e\u003e` class is notifying all `\\\u003c\u003cObserver\u003e\u003e` objects, here the `\\\u003c\u003cObservable\u003e\u003e` classes simply raises an event and the `EventsCenter` takes care of the notifications."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* *MVC Pattern* :"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "** The \u0027View\u0027 part of the application is mostly in the `.fxml` files in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "** `Model` component contains the \u0027Model\u0027. However, note that it is possible to view the `Logic` as the addressbookModel because it hides the `Model` behind it and the view has to go through the `Logic` to access the `Model`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Sub classes of link:{repoURL}/src/main/java/seedu/address/ui/UiPart.java[`UiPart`] (e.g. `PersonListPanel` ) act as \u0027Controllers\u0027, each controlling some part of the UI and communicating with the \u0027Model\u0027 (via the `Logic` component which sits between the \u0027Controller\u0027 and the \u0027Model\u0027)."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* *Abstraction Occurrence Pattern* : Not currently used in the app."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designPatterns/[se-edu/se-book: Design: Design Patterns]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Discover other possible applications of the patterns"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* Find other possible applications of the patterns to improve the current design. e.g. where else in the design can you apply the Singleton pattern?"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* Discuss pros and cons of applying the pattern in each of the situations you found in the previous step."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Find more applicable patterns"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* Learn other _Gang of Four_ Design patterns to see if they are applicable to the app."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Static Analysis `[LO-StaticAnalysis]`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses the http://checkstyle.sourceforge.net/[CheckStyle] static analysis tool to confirm compliance with the coding standard."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/qualityAssurance/staticAnalysis/[se-edu/se-book: QA: Static Analysis]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use CheckStyle locally to check style compliance"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* Install the CheckStyle plugin for your IDE and use it to check compliance of your code with our style rules (given in `/config/checkstyle/checkstyle.xml`)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Do Code Reviews `[LO-CodeReview]`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how some PRs in this project have been reviewed by other developers. Here is an https://github.com/se-edu/addressbook-level4/pull/147[example]."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note how we have used https://www.codacy.com[Codacy] to do automate some part of the code review workload (https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]])"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Review a PR"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* Review PRs created by team members."
      }
    ],
    "authorContributionMap": {
      "truongthanh2606": 1,
      "-": 265
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d Anakin - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T09-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "By: `Team T09-2`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Welcome to the *Anakin* User Guide!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*Anakin*  was built for those who *want to make heavy use of flashcards without the hassle of managing physical copies*. More importantly, Anakin is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Anakin started from our desire to help users organize their flashcards better, and to reduce the paper waste generated by flashcards. As students ourselves, we believe that studying should be effective and easy to plan. Thus, we have built"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "in a scheduling system into Anakin which will help you plan out when to review your flashcards for optimal studying performance. Our scheduler uses spaced repetition which is the result of years"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "of https://www.supermemo.com/help/smalg.htm[psychology research]. Spaced repetiton embodies the idea that last minute studying has little effect. Instead, study sessions should be spread out to allow a student to best absorb infromation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "With this studying tool, we hope to not just decrease paper wastage but also to create a fun environment which can help students sustain their motivation to study"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "throughout the semester."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "To get started, head over to \u003c\u003cQuick Start\u003e\u003e!"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "For a quick review of commands, check out \u003c\u003cCommand Summary\u003e\u003e."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d How to Use This Guide"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "This document is designed for users with varying levels of proficiency. Most command in the guide can be read standalone, but there are"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "occasional references to other related commands."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "To assist you, we have added sample use cases of each command in the document"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//tag::quickStart[]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ".  Download the latest `Anakin.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your copy of Anakin."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* *`list`* : lists all decks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* **`newdeck`** : creates a new deck."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* **`delete`**`3` : deletes the 3rd deck shown in the current list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Refer to \u003c\u003cFeatures\u003e\u003e for more details on the available commands."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//end::quickStart[]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `newdeck n/NAME`, `NAME` is a parameter which can be used as `newdeck n/John Doe`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* Items in square brackets are optional e.g `newdeck [n/NAME]` can be used as `newdeck n/My Deck` or as `newdeck`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* Optional items separated by - e.g. `editdeck 1 [q/Question?]-[a/Answer]` denote that at least one of the optional"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " parameters are needed minimally to execute the command."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `q/QUESTION a/ANSWER`, `a/ANSWER q/QUESTION` is also acceptable."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* Any argument followed by `...` indicates that the command is able to accept multiple arguments for that field."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* If you provide multiple parameters for fields that do not support multiple arguments, only the last argument will be accepted. I.e. If you entered `newdeck n/nameOne n/nameTwo`, the new deck will have the name \"nameTwo\"."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Lists all available commands and their respective formats. +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Lists all decks (or all cards) : `list`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Displays a list of all available decks. If inside a deck displays all cards in that deck. +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003d\u003d\u003d\u003d Filter by performance"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tomforge"
        },
        "content": "This feature allows you to filter the displayed cards by their difficulty."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Format: `list [difficulty] [more difficulties]...`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tomforge"
        },
        "content": "When inside a deck, the `list` command can be used to filter the displayed cards by their difficulty, by passing"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tomforge"
        },
        "content": " in the desired difficulty as a keyword after the command."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tomforge"
        },
        "content": "For example:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tomforge"
        },
        "content": "`list hard` will display all cards with the `hard` difficulty"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Multiple difficulties can be specified as well, in which case all cards with a difficulty matching one of those"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tomforge"
        },
        "content": "specified will be displayed:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tomforge"
        },
        "content": "`list easy hard` will display all cards with either an `easy` or `hard` difficulty."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Navigating into a deck : `cd`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "To enter a deck identified by the INDEX_OF_DECK in the visible deck list. +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Format: `cd INDEX_OF_DECK`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* Enters the deck at the specified `INDEX_OF_DECK`."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* INDEX_OF_DECK must be a positive integer from 1 onwards and is based on the currently displayed list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* `cd 2` +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Enter the 2nd deck in the currently displayed deck list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* Note: User can `cd` into another deck while being inside a deck."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "\u003d\u003d\u003d Navigating out of the current deck : `cd ..`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "Exit the current deck and returns the user to the list of decks. +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Format: `cd ..`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* `cd 1` +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " `cd ..` +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Enter the 1st deck in the currently displayed deck list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "then return back to the Anakin\u0027s deck list (get out of the 1st deck)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "// tag::newdeck[]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "\u003d\u003d\u003d Adding a deck: `newdeck`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "Adds a new deck with the given name to Anakin +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Format: `newdeck n/NAME`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* This deck will contains an empty list of cards."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "* This operation is disabled when user is currently inside a deck."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "* If multiple arguments are given (i.e. `newdeck n/My First Deck n/My Second Deck` only the last valid argument is accepted for each respective field."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* User should be under Anakin\u0027s deck list to perform this operation (not inside any decks)."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* `newdeck n/My First Deck`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "// end::newdeck[]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d Editing the name of a deck : `editdeck`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Edits the name of the deck at the specified index in the list. +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Format: `editdeck INDEX_OF_DECK n/NAME`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* INDEX_OF_DECK must be a positive integer from 1 onwards and is based on the currently displayed list."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* The new deck will maintain the card list of the old one."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "* This operation is disabled when user navigates into a deck."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "* If multiple arguments are given (i.e. `editdeck 1 n/My First Deck n/My Second Deck` only the last valid argument is accepted for each respective field."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* User should be under Anakin\u0027s deck list to perform this operation (not inside any decks)."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "* `editdeck 1 n/My Deck` +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the first deck in the list to be `My Deck` and keeps the card list intact."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Deleting a deck : `deldeck`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Deletes the specified deck from Anakin. +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Format: `deldeck INDEX_OF_DECK`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* Deletes the deck at the specified `INDEX_OF_DECK`."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* `INDEX_OF_DECK` must be a positive integer from 1 onwards and is based on the currently displayed list."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* User should be under Anakin\u0027s deck list to perform this operation (not inside any decks)."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "`deldeck 2` +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Deletes the 2nd deck that appears in the currently displayed list of decks."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "// tag::newcard[]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Adding a card : `newcard`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "Add a new card with given question and answer to the current card list. +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Format: `newcard q/QUESTION a/ANSWER`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* `q/QUESTION` and `a/ANSWER` can be in any order."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* User should be inside a deck to perform this operation."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* `newcard q/Who are you? a/I\u0027m Batman`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* `newcard a/Ding ding ding q/What does the fox say?`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "// end::newcard[]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "// tag::editcard[]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Editing a card : `editcard`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "When user is inside a deck, edits an existing card at the specified index. If multiple arguments are given for"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "question or answer, only the last valid argument is accepted for each respective field. +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Format: `editcard INDEX_OF_CARD [q/QUESTION]-[a/ANSWER]`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "****"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* Edits the card at the specified INDEX_OF_CARD inside the deck. The index refers to the index number shown in the list of displayed cards. The index must be a positive integer e.g. 1,2,3."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* If any of 2 fields: [q/QUESTION] [a/ANSWER] is left empty, the old value for that field will be retained"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* User should be inside a deck to perform this operation."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "****"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* `editcard 1 a/New Answer` +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Edits the answer of the first card in the current card list to be \"New Answer\". If multiple arguments are given for question or answer, only the last valid argument is accepted for each respective field."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "// end::editcard[]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "\u003d\u003d\u003d Deleting a card : `delcard`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "When user is inside a deck, deletes the existing card at the specified index. +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "Format: `delcard INDEX_OF_CARD`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "****"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* Deletes the card at the specified `INDEX_OF_CARD`."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* INDEX_OF_CARD must be a positive integer from 1 onwards and is based on the currently displayed list."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* User should be inside a deck to perform this operation."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "****"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* `cd 1` +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "`delcard 2` +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "Get into the first deck then deletes the 2nd card that appears in the card list."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "// tag::review[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Review the cards in a deck : `review`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Starts a review of the deck specified. +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Format: `review INDEX_OF_DECK`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "****"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* INDEX_OF_DECK must be a positive integer from 1 onwards and is based on the currently displayed list."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* While in review mode, commands that operate on decks and cards are disabled except `endreview`,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "`flipcard`, `nextcard`, `prevcard`, `classify`, `help`, `history`, `exit`."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* The application\u0027s data will only be stored after executing `endreview` command."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "****"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Flip a card in a review : `flipcard`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "View the other side of the current card during a review. +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Format: `flipcard`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* `review 1` +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "`flipcard` +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "`flipcard` +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Reviews the first deck on the list. You will see the first question card. Upon first `flipcard`, you will see the"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "answer on the back of the card. When you execute `flipcard` again, you will see the question card once more."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d Go to the next card in a review : `nextcard`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Views the subsequent card in the deck. +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Format: `nextcard`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "When you are at the last card of the deck, executing `nextcard` will loop back to the first card."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d Go to the previous card in a review : `prevcard`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Views the previous card in the deck. +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Format: `prevcard`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "When you are at the first card of the deck, executing `prevcard` will loop back to the last card."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d Exit review mode : `endreview`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Exits the review and returns to the editing menu +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Format: `endreview`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Executing `undo` after reviewing will undo all the changes made in that review session"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "(all `classify` commands)."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "// end::review[]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d Card difficulty classification : `classify`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Allocates a difficulty (easy, normal, hard) to the card currently being reviewed. +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tomforge"
        },
        "content": "This indicates how you felt about the difficulty of the card, relative to your performance. This rating will be taken"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tomforge"
        },
        "content": "into consideration when scheduling cards for review. For example, a card rated `easy` will show up less often compared"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tomforge"
        },
        "content": "to a card rated `hard`. +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Format: `classify DIFFICULTY`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "****"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tomforge"
        },
        "content": "* The *DIFFICULTY* parameter should be one of the strings: {`easy`, `normal`, `hard`}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tomforge"
        },
        "content": "* The *DIFFICULTY* parameter is case-insensitive"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tomforge"
        },
        "content": "* By default, cards are assigned a `normal` difficulty"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tomforge"
        },
        "content": "****"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tomforge"
        },
        "content": "*Example*"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tomforge"
        },
        "content": "1.  You decide to review a deck."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tomforge"
        },
        "content": "+"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tomforge"
        },
        "content": "image::classifyExample1.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tomforge"
        },
        "content": "2. You encounter a difficult question. You would like to document this for future revision. Simply type in"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tomforge"
        },
        "content": "`classify`, followed by the desired difficulty (in this case, `hard`)."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tomforge"
        },
        "content": "+"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tomforge"
        },
        "content": "image::classifyExample2.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tomforge"
        },
        "content": "+"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tomforge"
        },
        "content": "image::classifyExample3.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tomforge"
        },
        "content": "3. Upon ending the review, you should be able to see the updated difficulty classification on your cards."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tomforge"
        },
        "content": "+"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tomforge"
        },
        "content": "image::classifyExample4.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "// tag::sort[]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "\u003d\u003d\u003d Sort : `sort`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "Sort the current list in lexicographical order."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "* If user is currently inside a deck, sort all cards according to their questions. +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "* If user is not in a deck, sort all decks according to the their names. +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "Format: `sort`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "// end::sort[]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "// tag::find[]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "\u003d\u003d\u003d Search for a deck or card : `find`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "Search decks by names or cards by questions."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* If user is currently in a deck, find all cards which contain the specific keywords."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* If user is not in a deck, find decks."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]...`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "****"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* Only the name of the deck or the question of the card is searched."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* Decks or cards matching at least one keyword will be returned"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "(i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* If user inputs 1 keyword, partial word will be matched. e.g \u0027Han\u0027 will match `Hans\u0027"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* If user inputs multiple keywords, only full words will be matched"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "e.g. \u0027Han Solo\u0027 will match \u0027Han non-solo\u0027 but will not match \u0027Hans Soooolo\u0027"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "****"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* `find Algo` +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "Returns `algo` and `Easy Algo`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* User is not inside any decks:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "** `find Bio Chem Physics` +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Returns any decks containing `Bio`, `Chem`, or `Physics` in their name."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "** `find insert` +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "  Returns `insert`, `inserted`, `inserting` or any decks of which name contains these words."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* User is inside a deck: `find John Snow` +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Returns any cards containing `John` or `Snow` in their questions."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "// tag::importexport[]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Export deck to xml file : `export`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "To create an `xml` file of the deck at INDEX_OF_DECK. +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Format: `export INDEX_OF_DECK`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "****"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* INDEX_OF_DECK must be a positive integer from 1 onwards and is based on the currently displayed list."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* This operation is disabled when user navigates into a deck."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* The xml file will be created in the same directory as the Anakin.jar file."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "****"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* 1. First, display all the decks in Anakin using `list`. +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "image::exportScreenshot1.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* 2. Say you want to export \"Geography\" (the 3rd deck), simply enter the command: `export 3`. You should see the following message: +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "image::exportScreenshot2.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\"Geography.xml\" will be created in the same directory as the Anakin.jar file. +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "image::exportScreenshot3.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d\u003d Import deck from xml file : `import`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "To import a deck from the `xml` file at the specified FILEPATH. +"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Format: `import FILEPATH`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "****"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* You must include the filename of the target file in `FILEPATH`."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* This operation is disabled when you navigate into a deck."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* The default base directory is the directory that the Anakin.jar file is in."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "****"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Say you want to import a deck called \"Geography\" and you have the `Geography.xml` file in the same folder as Anakin.jar. +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "image::exportScreenshot3.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* Simply  enter `import Geography.xml` and Anakin will import the deck \"Geography\". +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "image::importScreenshot1.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "image::importScreenshot2.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* If you want to import a deck that is located elsewhere, for example the file is in Desktop, you can enter `import` followed by the full filepath (something like: `import C:/Users/Admin/Desktop/My Deck2.xml`) and Anakin will be able to import the deck. +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "// end::importexport[]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Restores Anakin to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "Undoable commands: those commands that modify the state of Anakin."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "(`newdeck`, `editdeck`, `deldeck`, `newcard`, `editcard`, `delcard`,"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "`sort`, `classify`, `cd`, `cd ..`)."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* `deldeck 1` +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "`undo` (reverses the `deldeck 1` command) +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* `history` +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* `deldeck 1` +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "`undo` (reverses the `deldeck 1` command) +"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* `deldeck 1` +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "`undo` (reverses the `deldeck 1` command) +"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "`redo` (reapplies the `deldeck 1` command) +"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* `delcard 1` +"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* `delcard 1` +"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "`undo` (reverses the `delcard 1` command) +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "`redo` (reapplies the `delcard 1` command) +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "To clear all entries from Anakin. +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Exiting Anakin : `exit`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "To exit the program. +"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "// tag::autocompletion[]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d\u003d Autocompletion : Hit `\u003cTAB\u003e`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Hit \u003cTAB\u003e for autocompletion so you don\u0027t have to remember verbose commands. If there is an autocompletion available, hitting \u003cTAB\u003e will replace the current text in the command box with the autocompletion text."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "1. Suppose you are attempting to create a new card."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "image::newCardPreAutocomplete.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Image: Partially completed `newcard` command."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "2. Just hit \u003cTAB\u003e and you will instantly get the desired result"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "image::newCardPostAutocomplete.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Image: After pressing \u003cTAB\u003e the command is automatically completed!"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "If the command box is empty, autocompletion will default to ``cd 1``."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "This feature does not work when trailing or preceding whitespace is included in the command."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "// end::autocompletion[]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "// tag::rank[]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d\u003d Rank : `rank`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Use this command to sort all cards by a user\u0027s cumulative performance score on each card. +"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Format: `rank` +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Examples: Suppose you are studying for an important exam, and you want to find out which cards you performed poorly on so you can review them."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "1. Classify cards as described in the `classify` section above and then type `rank`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "image::rankScreenshot1.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Image: Appearance of cards before sorting by performance"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "2. Type `rank` and you will instantly get the desired result"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "image::rankScreenshot2.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Image: Appearance of cards after sorting by performance. As can be seen, harder cards move to the top. +"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " The indicator in the card panel only shows the most recent classification of the card while the scheduling algorithm takes into account all past reviews."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "As such, cards labelled HARD may not always be above cards ranked NORMAL."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "// end::rank[]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*A*: Export all your decks, copy the .xml files to the other Computer, then use the import command to import your decks."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*Q*: Why is it called *Anakin*? +"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*A*: Because using CLI is as cool and mysterious as using the Force."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//tag::cmdsummary[]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "A convenient cheat sheet of commands"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"20%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|Command | What does it do?"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`help` | Lists all available commands and their respective formats."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`list` | Displays a list of all available decks. If inside a deck displays all cards in that deck."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|`cd INDEX` | Navigates into the deck at INDEX. +"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Use `cd ..` to navigate out of the deck."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`newdeck n/NAME` | Adds a new deck."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`editdeck INDEX n/NAME` | Edits the name of the deck at INDEX."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`deldeck INDEX` | Deletes the deck at INDEX."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`newcard q/QUESTION a/ANSWER` | Adds a new card in the current deck. +"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "You must be inside a deck to perform this operation."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`editcard INDEX [q/QUESTION]-[a/ANSWER]` | Edits the details of the card at INDEX. +"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "At least one parameter must be present. +"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "You must be inside a deck to perform this operation."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`delcard INDEX` | Deletes the card at INDEX. +"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "You must be inside a deck to perform this operation."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`review INDEX` | Review the cards of the deck at INDEX."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`flipcard` | View the flipside of the current card during a review."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`nextcard` | Views the subsequent card in the deck."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`prevcard` | Views the previous card in the deck."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`endreview` | Exits the review."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "tomforge"
        },
        "content": "|`classify DIFFICULTY` | Classifies the current card into one of the following categories: {‘easy’, ‘normal\u0027 , ‘hard’}"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`sort` | Sorts the displayed list of decks by name. +"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "When you are inside a deck, sorts the displayed list of cards by question."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "|`rank` | Sort the list of cards by performance"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`find KEYWORD [MORE_KEYWORDS]...` | Finds decks with names that contain any of the given keywords. +"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "When you are inside a deck, finds cards with questions that contain any of the given keywords."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`export INDEX` | Exports the deck at the specified INDEX. (Default location is the same folder as Anakin)"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`import FILEPATH` | Imports a deck from the `xml` file at the specified FILEPATH."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`history` | List all entered commands in reverse chronological order."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`undo` | Undo previous command."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`redo` | Redo previously undone command."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`clear` | Clear all decks and cards."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|`exit` | Exits the program."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//end::cmdsummary[]"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 80,
      "yujiatay": 92,
      "tomforge": 42,
      "truongthanh2606": 78,
      "lessthanfree": 135,
      "-": 178
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//include::../UserGuide.adoc[]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//include::../DeveloperGuide.adoc[]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 2,
      "-": 66
    }
  },
  {
    "path": "docs/team/leeyjjoel.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d Lee Yi Jie, Joel - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T09-2/main/tree/master"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "This portfolio outlines my contributions  to the following project."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d PROJECT: Anakin"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "---"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Anakin is the result of our search for a better command line application to revise for exams. From August 2018 to November 2018,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Team T09-2 comprising of myself, Tay Yu Jia, Foo Guo Wei, David Goh, and Nguyen Truong Thanh built Anakin as part of a Software Engineering module (CS2103T) conducted at"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "the National University of Singapore."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Anakin is a desktop-based flashcard application which makes remembering things easy. The user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "interacts with the application primarily using a Command Line Interface. However, the user can fall back to the Java FX GUI if needed. Anakin uses https://www.supermemo.com/english/ol/sm2.htm[Super Memo 2]  which is the spaced repetition algorithm used by popular language learning tools such as"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Duolingo, Wani Kani, and Memrise. +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Anakin aims to revolutionize the studying experience of the technically advanced user. On top of being easy to use,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Anakin is also environmentally friendly, having zero paper wastage, unlike conventional flashcards."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "image::Ui.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "What is spaced repetition? +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "Spaced repetition is a learning technique that incorporates increasing intervals of time between subsequent review of previously learned material in order to exploit the psychological spacing effect."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "* *Main features*:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Create decks of flashcards easily"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Review your flashcards on the go"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Track your performance for all flashcards"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Import and export decks"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "This section acts as a summary of my contributions to project Anakin."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "* *Major enhancement*: I added autocompletion for commands"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** What it does: Helps a user complete a partially typed command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Justification: This feature improves the product significantly because a user will want to be able to finish expressing"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "the command he wants to type with a simple press of \u003cTAB\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Highlights: This enhancement removes the need for the user to memorise long strings of command syntax. While typing in the command box, the user is saved from the hassle of checking the user guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "for commands he/she has forgotten. This will allow for a better user experience and in turn easier studying for tests."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "* *Major enhancement*: I added the scheduling algorithm at the core of the product together with the `rank` command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** What it does: allows the users to sort cards by performance during review. Cards which the user has performed poorly on will be pushed to the top of the deck."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Justification: This feature improves the product significantly because a user will want to review cards which he or she performed poorly on to increase the yield of her revision."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Highlights: This allows user to focus on what\u0027s important to review and makes for more efficient study sessions."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "* *Minor enhancements*:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Added `help` command which allows user to seek help when he/she is lost."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Implemented the `editdeck` command that allows users to update the name of their deck."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Added the `exit` command to allow the user to leave the deck"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Added the `select` command which eventually formed the basis for other commands to be developed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Added `undo` and `redo` commands"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "*Code contributed:*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/commits?author\u003dleeyjjoel[Github Commits],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dleeyjjoel[Reposense]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "*** Set up Continuous Integration"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "*** Update contact us page(Pull Request: https://github.com/CS2103-AY1819S1-T09-2/main/pull/68[#68])"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "*** Added initial documentation for team README(Pull Request: https://github.com/CS2103-AY1819S1-T09-2/main/pull/23[#23])"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "*** Integrate Reposense for code contribution tracking(Pull Request: https://github.com/CS2103-AY1819S1-T09-2/main/pull/75/files[#75])"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "*** Configure naming convention of files and packages across the project to comply with project style guide(Pull Requests: https://github.com/CS2103-AY1819S1-T09-2/main/pull/38/files[#38]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ", https://github.com/CS2103-AY1819S1-T09-2/main/pull/106/files[#106])"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "*** Wrote extensive system tests which played a major role in boosting coverage from 66% to the above 90%. The tests I have written are detailed below:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "**** Wrote integration tests and tests for help command(https://github.com/CS2103-AY1819S1-T09-2/main/pull/148[#148])"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "**** Wrote Unit Tests for editdeck(Pull Request: https://github.com/CS2103-AY1819S1-T09-2/main/pull/121/files[#121])"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "**** Wrote tests for EditCard, EditDeckParser, and GUI(Pull Request: https://github.com/CS2103-AY1819S1-T09-2/main/pull/157/files[#157])"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "**** Wrote System Tests for ClearCommand, FindCommand, Logic Manager, EditDeck, NewDeck(Pull Requests: https://github.com/CS2103-AY1819S1-T09-2/main/pull/158/files[#158],"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/165/files[#165],"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " https://github.com/CS2103-AY1819S1-T09-2/main/pull/238[#238], https://github.com/CS2103-AY1819S1-T09-2/main/pull/242[#242], https://github.com/CS2103-AY1819S1-T09-2/main/pull/244[#244])"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "*** Add documentation for deck level operations(Pull Request: https://github.com/CS2103-AY1819S1-T09-2/main/pull/110/files[#110])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "*** Update user guide and development guide(Pull Request: https://github.com/CS2103-AY1819S1-T09-2/main/pull/268[#268])"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "*** Pull Requests reviewed(with non-trivial review comments):"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/189[#189]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/195[#195]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/271[#271]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "*** Discovered and reported bugs to peers:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/issues?q\u003dis%3Aissue+is%3Aclosed+author%3Aleeyjjoel[List of created issues]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "include::../UserGuide.adoc[tag\u003dautocompletion]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "include::../UserGuide.adoc[tag\u003drank]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dautocompleteimplementation]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dscheduling]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "\u003d\u003d Additional Information"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "For more information about me and to view more of my works, please feel to check out my website https://joellee.ml[here]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 132
    }
  },
  {
    "path": "docs/team/lessthanfree.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d David Goh Zhi Wei - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "This document outlines my contributions to the following software projects:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d PROJECT: Anakin"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Anakin is a desktop flashcard management application created by team T09-2 to solve the inherent problems associated with physical flashcards. It aims to facilitate quick and intuitive management of virtual flashcards as well as the sharing of flashcard decks. Additionally, it features the ability to rate the difficulty of individual flashcards and a scheduling algorithm that prompts reviews of cards based on their difficulty rating."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Team T09-2 consisted of myself, Joel Lee, Tay Yu Jia, Foo Guo Wei, and Thanh."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "image::Ui.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "_Screenshot of Anakin\u0027s main page_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "While Anakin features a GUI created with JavaFX, users are only able to interact with Anakin through a commandline interface. Anakin is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "Anakin\u0027s codebase draws from https://se-edu.github.io/[SE-EDU]\u0027s AddressBook Level 4."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* *Area of responsibility: Logic*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** Role: Manage command structure, command execution (by making API calls to the main model), and handling of user input arguments."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** Integration: Have to work closely with the head of Model, Thanh, to successfully implement most of the features and functionalities in Anakin."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* *Major enhancement*: added the ability to *import/export decks* (Pull request: https://github.com/CS2103-AY1819S1-T09-2/main/pull/166[#166])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** _What it does:_ allows users to export a deck to a specified file location. Also allows the user to import any decks by providing the location of the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** _Justification:_ This feature improves the product significantly because a user can share decks across devices or even with other users."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** _Highlights:_ This enhancement has a major effect on user experience. It required an in-depth analysis of design alternatives."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* *Major enhancement*: added the ability to *navigate into a deck* (Pull request: https://github.com/CS2103-AY1819S1-T09-2/main/pull/62[#62])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** _What it does:_ allows users to select and enter a deck object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** _Justification:_ The UI would be too cluttered if every deck displayed all the cards it contained. Instead we opted to have cards of each hidden until the user enters a deck. Only then will a user be able to see the cards of that deck."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** _Highlights:_ Provides the necessary framework for separation of deck and card operations. Subsequent card level operations implemented by other team members rely on the framework provided by this feature as card creation, editing and deletion actions are only available if the user has navigated inside a deck."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* *Minor enhancement*: added a list command for decks that clears the current filters and displays all decks in Anakin."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dlessthanfree\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-07\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[Functional code tracked by Reposense]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*** Managed release `v1.3` - `v1.3.1` on GitHub. (https://github.com/CS2103-AY1819S1-T09-2/main/releases/tag/v1.3[v1.3], https://github.com/CS2103-AY1819S1-T09-2/main/releases/tag/v1.3.1[v1.3.1])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*** Fixed project-wide formatting issues across over 200 files: https://github.com/CS2103-AY1819S1-T09-2/main/pull/147/files[#147]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*** Wrote tests for existing features to increase coverage from 67% to 73% (Pull Request: https://github.com/CS2103-AY1819S1-T09-2/main/pull/93[#93])"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*** Subsequently enhanced several existing tests to help bring overall coverage to 90% (Pull Request: https://github.com/CS2103-AY1819S1-T09-2/main/pull/125[#125], https://github.com/CS2103-AY1819S1-T09-2/main/pull/140[#140],"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    https://github.com/CS2103-AY1819S1-T09-2/main/pull/144[#144], https://github.com/CS2103-AY1819S1-T09-2/main/pull/256[#256])"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*** Created and maintained User Guide throughout development: https://github.com/CS2103-AY1819S1-T09-2/main/pull/11[#11],  https://github.com/CS2103-AY1819S1-T09-2/main/pull/30/[#30],  https://github.com/CS2103-AY1819S1-T09-2/main/pull/87/[#87],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/180[#180]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*** Created and provided some updates to Developer Guide: https://github.com/CS2103-AY1819S1-T09-2/main/pull/20[#20],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/97[#97],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/188[#188]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*** Pull Requests reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S1-T09-2/main/pull/60[#60], https://github.com/CS2103-AY1819S1-T09-2/main/pull/73[#73], https://github.com/CS2103-AY1819S1-T09-2/main/pull/192[#192]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*** Highlighted several bugs: https://github.com/CS2103-AY1819S1-T09-2/main/issues/139[#139], https://github.com/CS2103-AY1819S1-T09-2/main/issues/167[#167], https://github.com/CS2103-AY1819S1-T09-2/main/issues/194[#194], https://github.com/CS2103-AY1819S1-T09-2/main/issues/208[#208]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "*** Led the discussion on major bug: https://github.com/CS2103-AY1819S1-T09-2/main/issues/203[#203]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|_Provided below are some of my more notable contributions to the User Guide._"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "include::../UserGuide.adoc[tag\u003dimportexport]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003d\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide._"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlogic]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dimportexportimplementation]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dpartialusecases]"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 84
    }
  },
  {
    "path": "docs/team/tomforge.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003d Foo Guo Wei - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003d\u003d PROJECT: Anakin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": "This project portfolio page serves to document my contributions to the Anakin project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Anakin is a desktop flashcard management application created by team T09-2 to solve the inherent problems associated"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": "with physical flashcards. It aims to facilitate quick and intuitive management of virtual flashcards as well as the sharing of flashcard decks. Additionally, it features the ability to rate the difficulty of individual flashcards and a scheduling algorithm that prompts reviews of cards based on their difficulty rating."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Team T09-2 consisted of myself, Joel Lee, Tay Yu Jia, David Goh, and Truong Thanh."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": "The user interacts with Anakin using a command-line interface, and has a GUI created with JavaFX. Anakin is written"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": "in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Anakin\u0027s codebase draws from https://se-edu.github.io/[SE-EDU]\u0027s AddressBook Level 4."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003d\u003d\u003d Preface"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": "This section summarizes my contributions to the project in terms of code I have written, as well as other general"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": "areas which had a positive impact on the function of the product (e.g. code reviews, bug fixes)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tomforge"
        },
        "content": "---"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tomforge"
        },
        "content": "* *Code contributed:* https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dtomforge[GitHub]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": "* *Area of Responsibility:* Storage"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tomforge"
        },
        "content": "** I was in charge of the Storage component in this project, and handled the initial adaptation of AddressBook\u0027s"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tomforge"
        },
        "content": "storage component for use with Anakin. I served as the subject matter expert for any queries my team had for this"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tomforge"
        },
        "content": "area."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tomforge"
        },
        "content": "** The Storage component allows you to save the data you have in Anakin on a seperate file, and also"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tomforge"
        },
        "content": "supports the loading of external data from a file into Anakin. Essentially, it acts as the bridge between disk (file)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tomforge"
        },
        "content": "storage and program memory, containing functions to convert Anakin state to and from XML files."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tomforge"
        },
        "content": "** This allowed Anakin to be portable and persistent. You will no longer have to worry about losing your precious"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tomforge"
        },
        "content": " data after closing the Anakin program."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tomforge"
        },
        "content": "* *Major enhancement:*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tomforge"
        },
        "content": "** *Added the ability to track user performance*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tomforge"
        },
        "content": "*** I implemented the `classify` feature which allows you to classify your cards into various difficulties. In the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tomforge"
        },
        "content": "background, I also tracked the number of times you have classified each card. This feature allows you to note which"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tomforge"
        },
        "content": "cards you struggled the most with, or found relatively easy. Besides documentation purposes, this feature also paves"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tomforge"
        },
        "content": "the way for card scheduling based on your performance. This is implemented in Anakin\u0027s `schedule` feature,  where cards"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tomforge"
        },
        "content": "that the user is struggling with will show up more often for review. This personalization is what truly"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tomforge"
        },
        "content": "differentiates Anakin as a smart flashcard manager."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tomforge"
        },
        "content": "* *Minor enhancement:*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tomforge"
        },
        "content": "** *Implement card creation and deletion*: I implemented the ability to create a new card in a deck with the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tomforge"
        },
        "content": "question and answer, as well as the ability to delete cards from decks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tomforge"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tomforge"
        },
        "content": "** I drafted the initial architecture of the Model interface"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tomforge"
        },
        "content": "** I wrote tests for the Storage component as well as other utility functions"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tomforge"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tomforge"
        },
        "content": "*** I reviewed the following pull requests of my team, and provided insightful review comments:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tomforge"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/146[#146],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tomforge"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/140[#140]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tomforge"
        },
        "content": "*** I created the following issues in the issue tracker of the project to report bugs I have discovered as well as"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tomforge"
        },
        "content": "make suggestions for new features or ways to implement existing features."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tomforge"
        },
        "content": "(Issues:  https://github.com/CS2103-AY1819S1-T09-2/main/issues/187[#187],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tomforge"
        },
        "content": " https://github.com/CS2103-AY1819S1-T09-2/main/issues/119[#119],"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tomforge"
        },
        "content": " https://github.com/CS2103-AY1819S1-T09-2/main/issues/143[#143],"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tomforge"
        },
        "content": " https://github.com/CS2103-AY1819S1-T09-2/main/issues/82[#82],"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tomforge"
        },
        "content": " https://github.com/CS2103-AY1819S1-T09-2/main/issues/64[#64])"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tomforge"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tomforge"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tomforge"
        },
        "content": "end-users._"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tomforge"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003d\u003d\u003d Card difficulty classification : `classify`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Allocates a difficulty (easy, normal, hard) to the card currently being reviewed. +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tomforge"
        },
        "content": "This indicates how you felt about the difficulty of the card, relative to your performance. This rating will be taken"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tomforge"
        },
        "content": "into consideration when scheduling cards for review. For example, a card rated `easy` will show up less often compared"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tomforge"
        },
        "content": "to a card rated `hard`. +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Format: `classify DIFFICULTY`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tomforge"
        },
        "content": "****"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tomforge"
        },
        "content": "* The *DIFFICULTY* parameter should be one of the strings: {`easy`, `normal`, `hard`}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tomforge"
        },
        "content": "* The *DIFFICULTY* parameter is case-insensitive"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tomforge"
        },
        "content": "* By default, cards are assigned a `normal` difficulty"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tomforge"
        },
        "content": "****"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tomforge"
        },
        "content": "1.  You decide to review a deck."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tomforge"
        },
        "content": "+"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tomforge"
        },
        "content": "image::classifyExample1.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tomforge"
        },
        "content": "2. You encounter a difficult question. You would like to document this for future revision. Simply type in"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tomforge"
        },
        "content": "`classify`, followed by the desired difficulty (in this case, `hard`)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tomforge"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tomforge"
        },
        "content": "image::classifyExample2.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tomforge"
        },
        "content": "+"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tomforge"
        },
        "content": "image::classifyExample3.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tomforge"
        },
        "content": "3. Upon ending the review, you should be able to see the updated difficulty classification on your cards."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tomforge"
        },
        "content": "+"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tomforge"
        },
        "content": "image::classifyExample4.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003d\u003d\u003d\u003d Filter by performance"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tomforge"
        },
        "content": "This feature allows you to filter the displayed cards by their difficulty."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Format: `list [difficulty] [more difficulties]...`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tomforge"
        },
        "content": "When inside a deck, the `list` command can be used to filter the displayed cards by their difficulty, by passing"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tomforge"
        },
        "content": " in the desired difficulty as a keyword after the command."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tomforge"
        },
        "content": "For example:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tomforge"
        },
        "content": "`list hard` will display all cards with the `hard` difficulty"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Multiple difficulties can be specified as well, in which case all cards with a difficulty matching one of those"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tomforge"
        },
        "content": "specified will be displayed:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tomforge"
        },
        "content": "`list easy hard` will display all cards with either an `easy` or `hard` difficulty."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tomforge"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tomforge"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tomforge"
        },
        "content": "documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tomforge"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tomforge"
        },
        "content": "This section details the Storage component, which is the bridge between internal application state and external files."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tomforge"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tomforge"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tomforge"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tomforge"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tomforge"
        },
        "content": "* can store `UserPref` objects in json format and read it back"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tomforge"
        },
        "content": "* can save Anakin\u0027s data in XML format and read it back"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003d\u003d\u003d Performance Tracking Implementation"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tomforge"
        },
        "content": "This section details the implementation details and considerations of the performance tracking feature."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Cards contain the `Performance` parameter, implemented as an `enum`, as well as a `timesReviewed` counter. The fields"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tomforge"
        },
        "content": " are set to `normal` difficulty and `0` counts respectively on initialization. Since these are metadata fields, they"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tomforge"
        },
        "content": " will be considered optional and a `Card` can still be created without specifying them, which will result in the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tomforge"
        },
        "content": " fields being reset to the default initializations."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tomforge"
        },
        "content": "The user can change the difficulty of a card during \"review\" mode. Users can only do this on the card they are"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tomforge"
        },
        "content": "currently reviewing, as it is the only time it makes sense to do so. Cards assigned a difficulty will have their"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tomforge"
        },
        "content": "`timesReviewed` counter incremented by one."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tomforge"
        },
        "content": "The command available to the user will be `classify DIFFICULTY`, where `DIFFICULTY` is any of the strings"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tomforge"
        },
        "content": " `easy`, `normal`, `hard`, corresponding to the level of perceived difficulty for that"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tomforge"
        },
        "content": " flashcard."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Given below is an example usage scenario for the performance tracking feature."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Step 1. The user requests to \"review\" a deck. He sees the question of card A from the deck."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Step 2. The user requests to see the answer. He sees the displayed answer."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Step 3. The user executes `classify hard`. Card A is now assigned the difficulty of `hard`."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Step 4. The user continues reviewing the rest of the cards in the deck."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Step 5. Card A is shown to the user more regularly when he reviews the same deck in the future."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tomforge": 187
    }
  },
  {
    "path": "docs/team/truongthanh2606.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "\u003d Truong Thanh - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "\u003d\u003d PROJECT: Anakin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "Anakin is a desktop flashcard management application created by team T09-2 to solve the inherent problems associated with physical flashcards. It aims to facilitate quick and intuitive management of virtual flashcards as well as the sharing of flashcard decks. Additionally, it features the ability to rate the difficulty of individual flashcards and a scheduling algorithm that prompts reviews of cards based on their difficulty rating."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "Team T09-2 consisted of myself, Joel Lee, Tay Yu Jia, Foo Guo Wei, and David Goh."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* *Code contributed:* https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dtruongthanh2606[Reposense]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* *Major enhancement: Re-design model component*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " ** What can the new model do:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " *** Allows Anakin to have a list of decks, each deck contains a card list with questions and answers."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " *** Allows UI to observe both the deck list and card list so that it can update its deck panel and"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " card panel when these lists are modified (executing commands)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " *** Allows Logic component to execute its set of commands by providing a detailed Model interface,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " which can support the logic of those operations."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " ** Justification: A new Model is needed to manipulates the state of the application"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " and determines the interaction between objects like deck and card."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " ** Highlights:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " Re-designing the Model component requires in-depth understanding of all components in order to have"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " a comprehensive application design."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* *Other enhancements:*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "** *Implement `sort` command*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "*** What can it do:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "**** Sort the current deck list in lexicographical order."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "**** Sort the current card list in lexicographical order if user is inside a deck."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "*** Justification: This allows user to manage their data better and to find"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " deck or card easily."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "** *Implement `find` command*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "*** What can it do:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "**** Search for decks by name if user is under the home directory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "**** Search for cards by question if user is inside a deck."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "**** Search for partial word (keyword need not be exactly the same as the deck\u0027s name or card\u0027s question)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "*** Justification: This allows user to locate the deck or card that contains specific keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " quickly."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "** *Add messages to `undo` and `redo` commands*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "*** What is the new messages: The `undo` and `redo` messages will show which command has"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "just been `undo`, or `redo`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "*** Justification: This provides user more transparent view of the commands being executed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "* *Team contributions*:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "** Project management: Managed release `v1.4` on GitHub - https://github.com/CS2103-AY1819S1-T09-2/main/releases/tag/v1.4[v1.4]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "** Wrote tests for model component"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "(Pull requests https://github.com/CS2103-AY1819S1-T09-2/main/pull/130[#130])"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "** Enhancement to existing features:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "*** Wrote additional classes for test util"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "(Pull requests https://github.com/CS2103-AY1819S1-T09-2/main/pull/122/files[#122])"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 79.5% to 84%"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "(Pull request https://github.com/CS2103-AY1819S1-T09-2/main/pull/192[#192])"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "*** Updated developer guide (Pull request https://github.com/CS2103-AY1819S1-T09-2/main/pull/91[#91],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/195[#195],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/199[#199])"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "*** Updated user guide (Pull request https://github.com/CS2103-AY1819S1-T09-2/main/pull/164[#164],"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/195[#195])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S1-T09-2/main/pull/165[#165],"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/262[#262]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "*** Reported bugs and suggestions in the issue tracker of the project"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "(Issues:  https://github.com/CS2103-AY1819S1-T09-2/main/issues/161[#161],"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " https://github.com/CS2103-AY1819S1-T09-2/main/issues/162[#162] fixed by"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " https://github.com/CS2103-AY1819S1-T09-2/main/pull/171[PR#171],"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " https://github.com/CS2103-AY1819S1-T09-2/main/issues/163[#163],"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " https://github.com/CS2103-AY1819S1-T09-2/main/issues/191[#191],"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " https://github.com/CS2103-AY1819S1-T09-2/main/issues/193[#193],"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " https://github.com/CS2103-AY1819S1-T09-2/main/issues/219[#219] fixed by"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " https://github.com/CS2103-AY1819S1-T09-2/main/pull/243[PR#243])"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "*** Resolved issues suggested by other team members and other groups in the issue tracker of the project"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "(Pull request: https://github.com/CS2103-AY1819S1-T09-2/main/pull/156[#156],"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/164[#164] resolved"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/issues/161[issue#161],"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/209[#209] resolved"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/issues/203[issue#203],"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/218[#218] resolved"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/issues/211[issue#211],"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/issues/212[#212],"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/issues/213[#213],"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/issues/214[#214],"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/issues/217[#217],"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/258[#258] resolved"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/issues/228[issue#228],"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/issues/249[#249])"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfind]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsort]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "include::../UserGuide.adoc[tag\u003dnewdeck]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmodelcomponent]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcardleveloperation]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dhandleinvalidcommands]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dkeepcardspanelupdatedbyui]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "truongthanh2606": 126,
      "-": 13
    }
  },
  {
    "path": "docs/team/yujiatay.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d Tay Yu Jia - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T09-2/main/tree/master"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "This portfolio outlines my contributions to the project Anakin."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d PROJECT: Anakin"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "---"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Project Anakin is the brainchild of team T09-2 which comprises myself, Joel Lee, Foo Guo Wei, David Goh and Nguyen"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Trong Truong Thanh. We completed it in November 2018 as part of a Software Engineering module (CS2103T) in the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "National University of Singapore."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "Anakin is a desktop flashcard management application created by team T09-2 to solve the inherent problems associated"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "with physical flashcards. It aims to facilitate quick and intuitive management of virtual flashcards as well as the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "sharing of flashcard decks. Additionally, it features the ability to rate the difficulty of individual flashcards"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "and a scheduling algorithm that prompts reviews of cards based on their difficulty rating."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "image::Ui.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "The user interacts with Anakin using a command line interface, and has a GUI created with JavaFX. Anakin is written"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "This section acts as a summary of my contributions to project Anakin."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* *Major enhancement*: I added *the ability to review decks*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** What it does: allows the user to review the flashcards in the deck one by one."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Justification: This feature improves the product significantly because a user will want to be able to look through"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " his flashcards stored in our application. It is also important to be able to view the question and answer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " separately as this is used as a revision tool."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. While in the review"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "mode, the user is not allowed to make any changes to his decks and cards, except for classifying his performance for"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "each card. The implementation of this enhancement involves notable UI changes to switch out the screen for editing"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "decks with a different screen specially created for reviewing flashcards."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* *Minor enhancements*:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Enhanced UI component by introducing a new screen for reviewing flashcards and adding a panel for displaying"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "flashcards in decks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Implemented a `editcard` command that allows user to update the details of their flashcard which include the"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "question and answer."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Successfully integrated the different components of the application (i.e. Model, Logic, Storage and UI) and produced"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " the first working prototype."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/commits?author\u003dyujiatay[My GitHub commits],"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dyujiatay\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-08\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[My RepoSense Dashboard]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "*** Created and tracked issues (https://github.com/CS2103-AY1819S1-T09-2/main/issues?utf8\u003d%E2%9C%93\u0026q\u003dis%3Aissue+author%3Ayujiatay+-label%3Atype.bug+[List of"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "created issues]) and set up project management board (https://github.com/CS2103-AY1819S1-T09-2/main/projects/1[Kanban"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " for project management])"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com/CS2103-AY1819S1-T09-2/main/pull/77[#77],"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/178[#178])"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "*** Created tests for UI component (Pull request https://github.com/CS2103-AY1819S1-T09-2/main/pull/137[#137])"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "*** Refined system tests (Pull request https://github.com/CS2103-AY1819S1-T09-2/main/pull/179[#179])"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "*** Added more tests as part of a team effort to increase coverage to above 90% (Pull request https://github.com/CS2103-AY1819S1-T09-2/main/pull/250[#250])"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "*** Improved documentation through adding more details and reformatting. (Pull requests"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/34[#34],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/113[#113],"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/118[#118],"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/183[#183],"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/184[#184])"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): (Reviews"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/30[#30])"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "*** Resolved issues and bugs: (Pull requests"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/35[#35],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/116[#116],"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/182[#182],"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/pull/251[#251])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "*** Discovered and reported bugs to peers: (Issues"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/issues/99[#99],"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/issues/101[#101],"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/issues/102[#102],"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/issues/151[#151],"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/issues/153[#153],"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "https://github.com/CS2103-AY1819S1-T09-2/main/issues/174[#174])"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "include::../UserGuide.adoc[tag\u003dreview]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "include::../UserGuide.adoc[tag\u003deditcard]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddeckreview]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003duichanges]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003duicomponent]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "image::AnakinUIClassDiagram.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `DeckEditScreen`,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "`DeckReviewScreen`, `StatusBarFooter` etc. The `DeckEditScreen` is in turn made up of `DeckListPanel` and"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "`CardListPanel` and the `DeckReviewScreen` is made up of `DeckReviewCard`. All these, including the `MainWindow`,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "The `UI` component"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` changes."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      }
    ],
    "authorContributionMap": {
      "yujiatay": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 8,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ReadOnlyAnakin;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.storage.AnakinStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.storage.XmlAnakinStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 1, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Anakin ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        AnakinStorage anakinStorage \u003d new XmlAnakinStorage(userPrefs.getAnakinFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        storage \u003d new StorageManager(anakinStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns a {@code ModelManager} with the data"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * from {@code storage}\u0027s anakin and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * The data from the sample anakin will be used instead if {@code storage}\u0027s anakin is not found,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * or an empty anakin will be used instead if errors occur when reading {@code storage}\u0027s anakin."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private Model initModelManager(Storage anakinStorageSwap, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Optional\u003cReadOnlyAnakin\u003e anakinOptional;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ReadOnlyAnakin initialData;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            anakinOptional \u003d anakinStorageSwap.readAnakin();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            if (!anakinOptional.isPresent()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Anakin\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            initialData \u003d anakinOptional.orElseGet(SampleDataUtil::getSampleAnakin);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Anakin\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            initialData \u003d new Anakin();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Anakin\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            initialData \u003d new Anakin();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Anakin\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        logger.info(\"Starting Anakin \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Anakin ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 15,
      "truongthanh2606": 15,
      "lessthanfree": 4,
      "-": 176
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/ComponentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Base class for *Manager classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Registers the class\u0027 event handlers in eventsCenter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class ComponentManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this(EventsCenter.getInstance());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager(EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private String appTitle \u003d \"Anakin\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final String LOG_FILE \u003d \"anakin.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "lessthanfree": 2,
      "-": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_INVALID_DECK_DISPLAYED_INDEX \u003d \"The deck index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_INVALID_CARD_DISPLAYED_INDEX \u003d \"The card index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_NOT_INSIDE_DECK \u003d \"Not currently inside any deck\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DECKS_LISTED_OVERVIEW \u003d \"%1$d deck(s) listed\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CARDS_LISTED_OVERVIEW \u003d \"%1$d card(s) listed\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"This deck already exists in Anakin\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String MESSAGE_FILEPATH_INVALID \u003d \"File at %1$s not found\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String MESSAGE_IMPORTED_DECK_INVALID \u003d \"Target deck contains invalid data\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String MESSAGE_EDIT_DECK_SUCCESS \u003d \"Edited Deck: %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String MESSAGE_DECK_NOT_EDITED \u003d \"Index of Deck to edit and Name to edit to must be provided.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_NOT_REVIEWING_DECK \u003d \"Not currently reviewing deck.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_CURRENTLY_REVIEWING_DECK \u003d \"Command disabled while reviewing deck.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        + \"Use `endreview` command to exit reviewing\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String MESSAGE_INVALID_DECK_LEVEL_OPERATION \u003d \"This deck-level command is invalid, please\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        + \" navigate out of the current deck to perform this command.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String MESSAGE_INVALID_CARD_LEVEL_OPERATION \u003d \"This card-level command is invalid, please\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        + \" navigate into a deck to perform this command.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 6,
      "truongthanh2606": 4,
      "lessthanfree": 5,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 15,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 8,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/BaseEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * The base class for all event classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class BaseEvent {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * All Events should have a clear unambiguous custom toString message so that feedback message creation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * stays consistent and reusable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * For example, the event manager post method will call any posted event\u0027s toString and print it in the console."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/AnakinChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ReadOnlyAnakin;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * Indicates Anakin in the model has changed"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "public class AnakinChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public final ReadOnlyAnakin data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public AnakinChangedEvent(ReadOnlyAnakin data) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return \"number of decks \" + data.getDeckList().size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 1,
      "truongthanh2606": 16,
      "lessthanfree": 3,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/CardPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Represents a selection change in the Card List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class CardPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final Card newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public CardPanelSelectionChangedEvent(Card newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Card getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 23,
      "truongthanh2606": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/DeckPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Represents a selection change in the Deck List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class DeckPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final Deck newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public DeckPanelSelectionChangedEvent(Deck newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Deck getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 23,
      "truongthanh2606": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/EndReviewRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Indicates a request to end reviewing deck."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class EndReviewRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/FlipCardRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Indicates a request to flip a card."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class FlipCardRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ReviewNextCardEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Indicate a request to advance to next card in deck review mode."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class ReviewNextCardEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private final Card nextCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public ReviewNextCardEvent(Card nextCard) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        this.nextCard \u003d nextCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public Card getNextCard() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return nextCard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ReviewPreviousCardEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Indicate a request to move to previous card in deck review mode."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class ReviewPreviousCardEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private final Card prevCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public ReviewPreviousCardEvent(Card prevCard) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        this.prevCard \u003d prevCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public Card getPreviousCard() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return prevCard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/StartReviewRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Indicates a request to start reviewing deck."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class StartReviewRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private final Card card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public StartReviewRequestEvent(Card card) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        this.card \u003d card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public Card getCard() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return card;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 2,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 4,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 2,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 3,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of decks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    ObservableList\u003cDeck\u003e getFilteredDeckList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of cards"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    ObservableList\u003cCard\u003e getFilteredCardList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 2,
      "truongthanh2606": 2,
      "lessthanfree": 10,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * The main LogicManager of the app. Implements Logic"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            Command command \u003d parser.parseCommand(commandText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return model.getFilteredDeckList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return model.getFilteredCardList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 4,
      "truongthanh2606": 10,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ChangeDeckCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CURRENTLY_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * Navigates into a deck identified using its displayed index from Anakin."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class ChangeDeckCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cd\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String EXIT_DECK_ARGS \u003d \" ..\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        + \": Navigates into the deck identified by the index number used in the displayed deck list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String MESSAGE_CD_SUCCESS \u003d \"Successfully navigated into %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String MESSAGE_EXIT_SUCCESS \u003d \"Successfully exited deck\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String DEFAULT_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD + \" \" + DEFAULT_INDEX;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private boolean isCdOut;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public ChangeDeckCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this.isCdOut \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Alternate constructor for ChangeDeckCommand that does not require an Index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public ChangeDeckCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        //Set targetIndex as 0."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        this.targetIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this.isCdOut \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // Block `cd` when user is reviewing deck"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(MESSAGE_CURRENTLY_REVIEWING_DECK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cDeck\u003e currentDeckList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (this.isCdOut) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            if (!model.isInsideDeck()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_NOT_INSIDE_DECK);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            model.getOutOfDeck();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            model.commitAnakin(COMMAND_WORD + EXIT_DECK_ARGS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EXIT_SUCCESS));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d currentDeckList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            Deck deckToEnter \u003d currentDeckList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            model.getIntoDeck(deckToEnter);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            model.commitAnakin(COMMAND_WORD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_CD_SUCCESS, deckToEnter));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            || (other instanceof ChangeDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((ChangeDeckCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 4,
      "yujiatay": 10,
      "truongthanh2606": 24,
      "lessthanfree": 52,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClassifyCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.Performance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tomforge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": " * Classifies the currently reviewed card to a particular difficulty"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": "public class ClassifyCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"classify\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Assigns to this card one of the four \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            + \"difficulty classification: {easy, normal, hard}.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            + \"Existing difficulty classification will be overwritten by the input value.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            + \"Parameters: RATING (easy/normal/hard) \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" easy \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final String MESSAGE_CLASSIFICATION_SUCCESS \u003d \"Assigned %1$s difficulty to card %2$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String DEFAULT_DIFFICULTY \u003d \"easy\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD + \" \" + DEFAULT_DIFFICULTY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private final Performance difficulty;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public ClassifyCommand(Performance difficulty) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        requireNonNull(difficulty);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        if (!model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_REVIEWING_DECK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Card card \u003d model.getFilteredCardList().get(model.getIndexOfCurrentCard());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Card editedCard \u003d Card.classifyCard(card, difficulty);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        model.updateCard(card, editedCard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        model.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CLASSIFICATION_SUCCESS, this.difficulty, card));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            || (other instanceof ClassifyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            \u0026\u0026 difficulty.equals(((ClassifyCommand) other).difficulty)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tomforge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 4,
      "tomforge": 47,
      "yujiatay": 1,
      "lessthanfree": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CURRENTLY_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Clears Anakin."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Anakin has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(MESSAGE_CURRENTLY_REVIEWING_DECK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        model.resetData(new Anakin());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.commitAnakin(COMMAND_WORD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 2,
      "yujiatay": 11,
      "truongthanh2606": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @param model {@code AddressbookModel} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCardCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CURRENTLY_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CARD_LEVEL_OPERATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": " * Edits the details of an existing card in a deck."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class DeleteCardCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delcard\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        + \": Deletes the card identified by the index number in the current deck.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final String MESSAGE_DELETE_CARD_SUCCESS \u003d \"Deleted card: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String DEFAULT_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD + \" \" + DEFAULT_INDEX;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Creates a delcard command to delete the {@code Card} at the specified index"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * @param targetIndex"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public DeleteCardCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (!model.isInsideDeck()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_CARD_LEVEL_OPERATION);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new CommandException(MESSAGE_CURRENTLY_REVIEWING_DECK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cCard\u003e currentCardList \u003d model.getFilteredCardList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d currentCardList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card cardToDelete \u003d currentCardList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        model.deleteCard(cardToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.commitAnakin(COMMAND_WORD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CARD_SUCCESS, cardToDelete));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            || (other instanceof DeleteCardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteCardCommand) other).targetIndex));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tomforge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 4,
      "yujiatay": 6,
      "tomforge": 42,
      "truongthanh2606": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteDeckCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CURRENTLY_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DECK_LEVEL_OPERATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Deletes a deck identified using it\u0027s displayed index from Anakin."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class DeleteDeckCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deldeck\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        + \": Deletes the deck identified by the index number used in the displayed deck list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String MESSAGE_DELETE_DECK_SUCCESS \u003d \"Deleted Deck: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String DEFAULT_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD + \" \" + DEFAULT_INDEX;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public DeleteDeckCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (model.isInsideDeck()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DECK_LEVEL_OPERATION);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new CommandException(MESSAGE_CURRENTLY_REVIEWING_DECK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cDeck\u003e currentDeckList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d currentDeckList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckToDelete \u003d currentDeckList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.deleteDeck(deckToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.commitAnakin(COMMAND_WORD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_DECK_SUCCESS, deckToDelete));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            || (other instanceof DeleteDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteDeckCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 4,
      "yujiatay": 7,
      "truongthanh2606": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCardCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CURRENTLY_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CARD_LEVEL_OPERATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_INSIDE_DECK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Answer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Question;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Edits the details of an existing card in a deck."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class EditCardCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editcard\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the card \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        + \"by the index number used in the deck. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        + \"[\" + PREFIX_QUESTION + \"QUESTION] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        + \"[\" + PREFIX_ANSWER + \"ANSWER]\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        + PREFIX_QUESTION + \"Why is Earth round?\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_EDIT_CARD_SUCCESS \u003d \"Edited Card: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD \u003d \"This card already exists in the deck.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String DEFAULT_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String DEFAULT_QUESTION \u003d \"Why is Earth round?\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD + \" \" + DEFAULT_INDEX + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            + PREFIX_QUESTION + DEFAULT_QUESTION;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private final EditCardDescriptor editCardDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @param index of the card in the deck to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @param editCardDescriptor details to edit the card with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public EditCardCommand(Index index, EditCardDescriptor editCardDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        requireNonNull(editCardDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        this.editCardDescriptor \u003d new EditCardDescriptor(editCardDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Creates and returns a {@code Card} with the details of {@code cardToEdit}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * edited with {@code editCardDescriptor}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static Card createEditedCard(Card cardToEdit, EditCardDescriptor editCardDescriptor) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assert cardToEdit !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Question updatedQuestion \u003d editCardDescriptor.getQuestion().orElse(cardToEdit.getQuestion());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Answer updatedAnswer \u003d editCardDescriptor.getAnswer().orElse(cardToEdit.getAnswer());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return new Card(updatedQuestion, updatedAnswer, cardToEdit.getPerformance(), cardToEdit.getTimesReviewed(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                cardToEdit.getReviewScore(), cardToEdit.getNextReview());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(MESSAGE_CURRENTLY_REVIEWING_DECK);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (!model.isInsideDeck()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_CARD_LEVEL_OPERATION);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cCard\u003e lastShownList \u003d model.getFilteredCardList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card cardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card editedCard \u003d createEditedCard(cardToEdit, editCardDescriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (!cardToEdit.isSameCard(editedCard) \u0026\u0026 model.hasCard(editedCard)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            model.updateCard(cardToEdit, editedCard);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            model.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            model.commitAnakin(COMMAND_WORD);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        } catch (DeckNotFoundException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_INSIDE_DECK);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CARD_SUCCESS, editedCard));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (!(other instanceof EditCardCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditCardCommand e \u003d (EditCardCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u0026\u0026 editCardDescriptor.equals(e.editCardDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Stores the details to edit the card with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * corresponding field value of the card."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static class EditCardDescriptor {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        private Question question;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        private Answer answer;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public EditCardDescriptor() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public EditCardDescriptor(EditCardDescriptor toCopy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            setQuestion(toCopy.question);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            setAnswer(toCopy.answer);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return CollectionUtil.isAnyNonNull(question, answer);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public Optional\u003cQuestion\u003e getQuestion() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return Optional.ofNullable(question);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public void setQuestion(Question question) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            this.question \u003d question;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public Optional\u003cAnswer\u003e getAnswer() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return Optional.ofNullable(answer);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public void setAnswer(Answer answer) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            this.answer \u003d answer;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            if (!(other instanceof EditCardDescriptor)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            EditCardDescriptor e \u003d (EditCardDescriptor) other;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return getQuestion().equals(e.getQuestion())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                \u0026\u0026 getAnswer().equals(e.getAnswer());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 9,
      "yujiatay": 137,
      "truongthanh2606": 29,
      "lessthanfree": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditDeckCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CURRENTLY_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_DECK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EDIT_DECK_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DECK_LEVEL_OPERATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DECKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.UniqueCardList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " * Edits the details of an existing deck in the address book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class EditDeckCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editdeck\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the deck identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        + \"by the index number used in the displayed deck list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        + \"Changes its name to NAME.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        + PREFIX_NAME + \"[NAME]\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String DEFAULT_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD + \" \" + DEFAULT_INDEX;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String MESSAGE_EDIT_DECK_SUCCESS \u003d \"Edited Deck: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private final EditDeckDescriptor editDeckDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @param index of the deck in the filtered deck list to edit"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @param editDeckDescriptor details to edit the deck with"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public EditDeckCommand(Index index, EditDeckDescriptor editDeckDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        requireNonNull(editDeckDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        this.editDeckDescriptor \u003d new EditDeckDescriptor(editDeckDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Creates and returns a {@code Deck} with the details of {@code deckToEdit}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * edited with {@code editDeckDescriptor}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static Deck createEditedDeck(Deck deckToEdit, EditDeckDescriptor editDeckDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assert deckToEdit !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Name updatedName \u003d editDeckDescriptor.getName().orElse(deckToEdit.getName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return new Deck(updatedName, deckToEdit.getCards().internalList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(MESSAGE_CURRENTLY_REVIEWING_DECK);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (model.isInsideDeck()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DECK_LEVEL_OPERATION);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cDeck\u003e currentDeckList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d currentDeckList.size()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckToEdit \u003d currentDeckList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck editedDeck \u003d createEditedDeck(deckToEdit, editDeckDescriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (!deckToEdit.isSameDeck(editedDeck) \u0026\u0026 model.hasDeck(editedDeck)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.updateDeck(deckToEdit, editedDeck);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.commitAnakin(COMMAND_WORD);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_DECK_SUCCESS, editedDeck));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (!(other instanceof EditDeckCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditDeckCommand e \u003d (EditDeckCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            \u0026\u0026 editDeckDescriptor.equals(e.editDeckDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Stores the details to edit the deck with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * corresponding field value of the deck."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static class EditDeckDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // private List\u003cCard\u003e cards;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        private UniqueCardList cards;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public EditDeckDescriptor() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        public EditDeckDescriptor(EditDeckDescriptor toCopy) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            setCards(toCopy.cards);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, cards);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "         * Returns an unmodifiable card set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code cards} is null."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public Optional\u003cUniqueCardList\u003e getCards() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            // return (cards !\u003d null) ? Optional.of(Collections.unmodifiableList(cards)) : Optional.empty();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            return (cards !\u003d null) ? Optional.of(cards) : Optional.empty();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "         * Sets {@code cards} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "         * A defensive copy of {@code cards} is used internally."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "         */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public void setCards(UniqueCardList cards) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            // this.cards \u003d (cards !\u003d null) ? new ArrayList\u003c\u003e(cards) : null;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            this.cards \u003d cards;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            if (!(other instanceof EditDeckDescriptor)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            EditDeckDescriptor e \u003d (EditDeckDescriptor) other;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                \u0026\u0026 getCards().equals(e.getCards());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 133,
      "yujiatay": 10,
      "truongthanh2606": 28,
      "lessthanfree": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EndReviewCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.ui.EndReviewRequestEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Ends a review for a deck."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class EndReviewCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"endreview\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deck review ended.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (!model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_REVIEWING_DECK);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        EventsCenter.getInstance().post(new EndReviewRequestEvent());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        model.endReview();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAnakin(COMMAND_WORD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 2,
      "yujiatay": 32,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Anakin as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 2,
      "yujiatay": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportDeckCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CURRENTLY_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DECK_LEVEL_OPERATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * Exports a deck identified using it\u0027s displayed index from Anakin."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "public class ExportDeckCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        + \": Exports the deck identified by the index number used in the displayed deck list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String MESSAGE_EXPORT_DECK_SUCCESS \u003d \"Successfully Exported Deck: %1$s to %2$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String DEFAULT_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD + \" \" + DEFAULT_INDEX;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public ExportDeckCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(MESSAGE_CURRENTLY_REVIEWING_DECK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (model.isInsideDeck()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DECK_LEVEL_OPERATION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cDeck\u003e currentDeckList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d currentDeckList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckToExport \u003d currentDeckList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String exportPath \u003d model.exportDeck(deckToExport);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        System.out.println(exportPath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.commitAnakin(COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EXPORT_DECK_SUCCESS, deckToExport, exportPath));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            || (other instanceof ExportDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((ExportDeckCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 2,
      "yujiatay": 5,
      "truongthanh2606": 10,
      "lessthanfree": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CURRENTLY_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.deck.CardQuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.deck.DeckNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all decks or cards in the current list, which has identity field contains"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * any of the argument keywords."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all decks / cards in the current list,\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            + \" which has identity field contains any of the argument keywords.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Donald Duck\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String DEFAULT_STRING \u003d \"Donald Duck\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD + \" \" + DEFAULT_STRING;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DeckNameContainsKeywordsPredicate deckPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CardQuestionContainsKeywordsPredicate cardPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Constructor to be called by FindCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(DeckNameContainsKeywordsPredicate deckPredicate,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                       CardQuestionContainsKeywordsPredicate cardPredicate) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.deckPredicate \u003d deckPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.cardPredicate \u003d cardPredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(DeckNameContainsKeywordsPredicate deckPredicate) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.deckPredicate \u003d deckPredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.cardPredicate \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(CardQuestionContainsKeywordsPredicate cardPredicate) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.cardPredicate \u003d cardPredicate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.deckPredicate \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(MESSAGE_CURRENTLY_REVIEWING_DECK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.isInsideDeck()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updateFilteredCardList(cardPredicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(Messages.MESSAGE_CARDS_LISTED_OVERVIEW, model.getFilteredCardList().size()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updateFilteredDeckList(deckPredicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(Messages.MESSAGE_DECKS_LISTED_OVERVIEW, model.getFilteredDeckList().size()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof FindCommand)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (deckPredicate \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return cardPredicate.equals(((FindCommand) other).cardPredicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (cardPredicate \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return deckPredicate.equals(((FindCommand) other).deckPredicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return deckPredicate.equals(((FindCommand) other).deckPredicate)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 cardPredicate.equals(((FindCommand) other).cardPredicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 4,
      "yujiatay": 8,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FlipCardCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.ui.FlipCardRequestEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Flips a card during deck review."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class FlipCardCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"flipcard\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Card flipped!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (!model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_REVIEWING_DECK);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        EventsCenter.getInstance().post(new FlipCardRequestEvent());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 2,
      "yujiatay": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 2,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 2,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportDeckCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CURRENTLY_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_DECK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DECK_LEVEL_OPERATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.DeckImportException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * Imports a deck identified using it\u0027s displayed index from Anakin."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "public class ImportDeckCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        + \": Imports the deck at the specified file location.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        + \"Parameters: FILEPATH \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" default.xml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String MESSAGE_IMPORT_DECK_SUCCESS \u003d \"Successfully Imported Deck: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String DEFAULT_FILEPATH \u003d \"default.xml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD + \" \" + DEFAULT_FILEPATH;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final String targetPath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public ImportDeckCommand(String targetPath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this.targetPath \u003d targetPath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Deck importedDeck;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(MESSAGE_CURRENTLY_REVIEWING_DECK);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (model.isInsideDeck()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DECK_LEVEL_OPERATION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            importedDeck \u003d model.importDeck(targetPath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            model.commitAnakin(COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_IMPORT_DECK_SUCCESS, importedDeck));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        } catch (DeckImportException ie) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new CommandException(ie.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        } catch (DuplicateDeckException de) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            || (other instanceof ImportDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            \u0026\u0026 targetPath.equals(((ImportDeckCommand) other).targetPath)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 5,
      "yujiatay": 4,
      "truongthanh2606": 10,
      "lessthanfree": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CURRENTLY_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DECKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.CardPerformanceMatchesPerformancesPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Lists all decks / cards in the current list to the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String MESSAGE_SUCCESS_DECK \u003d \"Listed all decks\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ALL_CARDS \u003d \"Listed all cards\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final String MESSAGE_SUCCESS_PERFORMANCE_CARDS \u003d \"Listed %1$s cards\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private Predicate\u003cCard\u003e cardPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private String messageSuccessCard;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Creates the default ListCommand, which lists all cards"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.cardPredicate \u003d PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.messageSuccessCard \u003d MESSAGE_SUCCESS_ALL_CARDS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Creates a ListCommand with the given performance matching predicate, which will filter by the performances"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * defined in said predicate"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * @param cardPerformancePredicate the performance matching predicate"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public ListCommand(CardPerformanceMatchesPerformancesPredicate cardPerformancePredicate) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.cardPredicate \u003d cardPerformancePredicate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        String performanceString \u003d cardPerformancePredicate.performancesAsStrings().stream().collect(Collectors"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tomforge"
        },
        "content": "                .joining(\", \")).toLowerCase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.messageSuccessCard \u003d String.format(MESSAGE_SUCCESS_PERFORMANCE_CARDS, performanceString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(MESSAGE_CURRENTLY_REVIEWING_DECK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (model.isInsideDeck()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            model.updateFilteredCardList(cardPredicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            return new CommandResult(messageSuccessCard);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            model.updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_DECK);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 2,
      "yujiatay": 8,
      "tomforge": 31,
      "truongthanh2606": 9,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NewCardCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CURRENTLY_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CARD_LEVEL_OPERATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": " * Edits the details of an existing card in a deck."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class NewCardCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"newcard\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add a new card to the current deck\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        + \"[\" + PREFIX_QUESTION + \"QUESTION] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        + \"[\" + PREFIX_ANSWER + \"ANSWER]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        + PREFIX_QUESTION + \"What does Socrates know? \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        + PREFIX_ANSWER + \"Nothing\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final String MESSAGE_NEW_CARD_SUCCESS \u003d \"New card added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD \u003d \"This card already exists in the deck.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String DEFAULT_QUESTION \u003d \"What does Socrates know?\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String DEFAULT_ANSWER \u003d \"Nothing\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD + \" \" + PREFIX_QUESTION + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            + DEFAULT_QUESTION + \" \" + PREFIX_ANSWER + \" \" + DEFAULT_ANSWER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final Card toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Creates a newcard command to add the specified {@code Card}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * @param card"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public NewCardCommand(Card card) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.toAdd \u003d card;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(MESSAGE_CURRENTLY_REVIEWING_DECK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (!model.isInsideDeck()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_CARD_LEVEL_OPERATION);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        if (model.hasCard(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        model.addCard(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.commitAnakin(COMMAND_WORD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_NEW_CARD_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            || (other instanceof NewCardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            \u0026\u0026 toAdd.equals(((NewCardCommand) other).toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tomforge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 7,
      "yujiatay": 9,
      "tomforge": 46,
      "truongthanh2606": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NewDeckCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CURRENTLY_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_DECK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DECK_LEVEL_OPERATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class NewDeckCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"newdeck\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Create a new deck inside Anakin. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        + PREFIX_NAME + \"NAME\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        + PREFIX_NAME + \"Deck 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New deck added: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String DEFAULT_DECK \u003d \"DECK 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD + \" \" + PREFIX_NAME + \" \" + DEFAULT_DECK;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final Deck toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public NewDeckCommand(Deck deck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        toAdd \u003d deck;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(MESSAGE_CURRENTLY_REVIEWING_DECK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (model.isInsideDeck()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DECK_LEVEL_OPERATION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (model.hasDeck(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.addDeck(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.commitAnakin(COMMAND_WORD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            || (other instanceof NewDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            \u0026\u0026 toAdd.equals(((NewDeckCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 3,
      "yujiatay": 7,
      "truongthanh2606": 57,
      "lessthanfree": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NextCardCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.ui.ReviewNextCardEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Advances to next card during deck review."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class NextCardCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"nextcard\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Moving to next question\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (!model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_REVIEWING_DECK);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        ObservableList\u003cCard\u003e cardList \u003d model.getFilteredCardList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        int newIndex \u003d model.getIndexOfCurrentCard() + 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (newIndex \u003d\u003d cardList.size()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            newIndex \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Card nextCard \u003d cardList.get(newIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        EventsCenter.getInstance().post(new ReviewNextCardEvent(nextCard));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        model.setIndexOfCurrentCard(newIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 2,
      "yujiatay": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PerformanceSortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CURRENTLY_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CARD_LEVEL_OPERATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " * Sort the list of deck in order of next review date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "public class PerformanceSortCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rank\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Cards are sorted by performance\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        if (model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            throw new CommandException(MESSAGE_CURRENTLY_REVIEWING_DECK);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        if (!model.isInsideDeck()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_CARD_LEVEL_OPERATION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        model.sort(ModelManager.SortingType.PERFORMANCE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        model.commitAnakin(COMMAND_WORD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PreviousCardCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.ui.ReviewPreviousCardEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Moves to previous card during deck review."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class PreviousCardCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"prevcard\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Moving to previous question\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (!model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_REVIEWING_DECK);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        ObservableList\u003cCard\u003e cardList \u003d model.getFilteredCardList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        int newIndex \u003d model.getIndexOfCurrentCard() - 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (newIndex \u003c 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            newIndex \u003d cardList.size() - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Card prevCard \u003d cardList.get(newIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        EventsCenter.getInstance().post(new ReviewPreviousCardEvent(prevCard));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        model.setIndexOfCurrentCard(newIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 2,
      "yujiatay": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CURRENTLY_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DECKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success: \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(MESSAGE_CURRENTLY_REVIEWING_DECK);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (!model.canRedoAnakin()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String redoCommand \u003d model.redoAnakin();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        model.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        model.updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + redoCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 2,
      "yujiatay": 10,
      "truongthanh2606": 3,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ReviewCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.ui.StartReviewRequestEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Starts a review for a deck."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class ReviewCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"review\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Reviews a deck inside Anakin.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deck review started: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_DECK_NO_CARDS \u003d \"Cannot review deck with no cards\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_ALREADY_REVIEWING_DECK \u003d \"End current deck review before reviewing another deck\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String DEFAULT_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD + \" \" + DEFAULT_INDEX;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Creates a ReviewCommand to play a selected deck."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @param index of the deck in the filtered deck list to review"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public ReviewCommand(Index index) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_REVIEWING_DECK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cDeck\u003e currentDeckList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d currentDeckList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck targetDeck \u003d currentDeckList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        model.getIntoDeck(targetDeck);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        ObservableList\u003cCard\u003e cardList \u003d model.getFilteredCardList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (cardList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(MESSAGE_DECK_NO_CARDS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        model.startReview();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Card cardToShow \u003d cardList.get(model.getIndexOfCurrentCard());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        EventsCenter.getInstance().post(new StartReviewRequestEvent(cardToShow));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetDeck));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                || (other instanceof ReviewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                \u0026\u0026 this.index.equals(((ReviewCommand) other).index));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 4,
      "yujiatay": 74,
      "truongthanh2606": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CURRENTLY_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Sort the list of deck in lexicographical order."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String MESSAGE_SUCCESS_1 \u003d \"decks are sorted in alphabetical order\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String MESSAGE_SUCCESS_2 \u003d \"cards are sorted in alphabetical order\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(MESSAGE_CURRENTLY_REVIEWING_DECK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        model.sort(ModelManager.SortingType.LEXICOGRAPHICAL);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.commitAnakin(COMMAND_WORD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (model.isInsideDeck()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 4,
      "yujiatay": 8,
      "truongthanh2606": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CURRENTLY_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DECKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success: \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"There is no more undoable commands!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (model.isReviewingDeck()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CommandException(MESSAGE_CURRENTLY_REVIEWING_DECK);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (!model.canUndoAnakin()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String undoCommand \u003d model.undoAnakin();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        model.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        model.updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + undoCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 2,
      "yujiatay": 9,
      "truongthanh2606": 4,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 3,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 2,
      "-": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Autocompleter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.ChangeDeckCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.ClassifyCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.DeleteDeckCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.EditCardCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.EditDeckCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.EndReviewCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.ExportDeckCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.FlipCardCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.ImportDeckCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.NewCardCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.NewDeckCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.NextCardCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.PreviousCardCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.ReviewCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " * The logic component that is responsible for performing autocompletion based on user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "public class Autocompleter {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /** This method of approaching the problem was inspired by verbal discussion with @jethrokuan"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * (a Year Three CS student)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * His team\u0027s CS2103 project can be found at  https://github.com/jethrokuan/main"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Checks if {@code commandBox}\u0027s commandTextField has a potential autocompletable command word,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * if there exists such a word, it is replaced with the relevant autocompletion command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static boolean isAutocompletable(String input) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        // Check if the give input string has an existing autocompletion in the list of command words which starts"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        // with what the user has currently typed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return getCommandList().stream().filter(command -\u003e command.startsWith(input)).collect("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                Collectors.toList()).size() \u003e 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Filters from list of available autocompletions and retrieves the first matching completion"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static String getAutocompletion(String input) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return getAutocompletionStrings().stream().filter("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            completion -\u003e completion.startsWith(input)).collect(Collectors.toList()).get(0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private static List\u003cString\u003e getCommandList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return getCommandField(\"COMMAND_WORD\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private static List\u003cString\u003e getAutocompletionStrings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return getCommandField(\"AUTOCOMPLETE_TEXT\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Get a property/field for a particular command class."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private static List\u003cString\u003e getCommandField(String field) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return getCommandClasses().stream().map(command -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                // Get all fields in the given list of strings"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                return (String) command.getField(field).get(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            } catch (IllegalAccessException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            } catch (NoSuchFieldException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        }).collect(Collectors.toList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Creates a list of all existing command classes and returns it to the user so that"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * the user can retrieve properties within each command class."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private static List\u003cClass\u003c? extends Command\u003e\u003e getCommandClasses() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        List\u003cClass\u003c? extends Command\u003e\u003e commandClasses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(ChangeDeckCommand.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(ClassifyCommand.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(ClearCommand.class);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(DeleteCardCommand.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(DeleteDeckCommand.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(EditCardCommand.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(EditDeckCommand.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(EndReviewCommand.class);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(ExitCommand.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(ExportDeckCommand.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(FindCommand.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(FlipCardCommand.class);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(HelpCommand.class);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(HistoryCommand.class);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(ImportDeckCommand.class);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(ListCommand.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(NewCardCommand.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(NewDeckCommand.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(NextCardCommand.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(PreviousCardCommand.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(RedoCommand.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(ReviewCommand.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(SortCommand.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandClasses.add(UndoCommand.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return commandClasses;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ChangeDeckCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.ChangeDeckCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class ChangeDeckCommandParser implements ParserInterface\u003cChangeDeckCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ChangeDeckCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * and returns an ChangeDeckCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public ChangeDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            if (args.equals(ChangeDeckCommand.EXIT_DECK_ARGS)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                return new ChangeDeckCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                return new ChangeDeckCommand(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "                ChangeDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 3,
      "truongthanh2606": 8,
      "lessthanfree": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClassifyCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.logic.commands.ClassifyCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.Performance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": " * Parses input arguments and create a ClassifyCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": "public class ClassifyCommandParser implements ParserInterface\u003cClassifyCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClassifyCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * and returns a ClassifyCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public ClassifyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            Performance difficulty \u003d ParserUtil.parsePerformance(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            return new ClassifyCommand(difficulty);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClassifyCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final Prefix PREFIX_DECK \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final Prefix PREFIX_FILEPATH \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 4,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCardCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class DeleteCardCommandParser implements ParserInterface\u003cDeleteCardCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteDeckCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * and returns an DeleteDeckCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public DeleteCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return new DeleteCardCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "                DeleteCardCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "tomforge": 1,
      "truongthanh2606": 5,
      "lessthanfree": 2,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteDeckCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.DeleteDeckCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class DeleteDeckCommandParser implements ParserInterface\u003cDeleteDeckCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteDeckCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * and returns an DeleteDeckCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public DeleteDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return new DeleteDeckCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "                DeleteDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 3,
      "truongthanh2606": 5,
      "lessthanfree": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCardCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.EditCardCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.EditCardCommand.EditCardDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Parses input arguments and creates a new EditCardCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class EditCardCommandParser implements ParserInterface\u003cEditCardCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCardCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * and returns an EditCardCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public EditCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                EditCardCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        EditCardDescriptor editCardDescriptor \u003d new EditCardDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUESTION).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            editCardDescriptor.setQuestion(ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ANSWER).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            editCardDescriptor.setAnswer(ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (!editCardDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new ParseException(EditCardCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return new EditCardCommand(index, editCardDescriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yujiatay": 45,
      "truongthanh2606": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditDeckCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DECK_NOT_EDITED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.EditDeckCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.EditDeckCommand.EditDeckDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " * Parses input arguments and creates a new EditDeck object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class EditDeckCommandParser implements ParserInterface\u003cEditDeckCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditDeckCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * and returns an EditDeckCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public EditDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                EditDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        EditDeckDescriptor editDeckDescriptor \u003d new EditDeckDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            editDeckDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        if (!editDeckDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new ParseException(MESSAGE_DECK_NOT_EDITED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return new EditDeckCommand(index, editDeckDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 38,
      "yujiatay": 4,
      "truongthanh2606": 6,
      "lessthanfree": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportDeckCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.ExportDeckCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "public class ExportDeckCommandParser implements ParserInterface\u003cExportDeckCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportDeckCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * and returns an ExportDeckCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public ExportDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return new ExportDeckCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "                ExportDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportDeckCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.ImportDeckCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * Parses input arguments and creates a new ImportDeckCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "public class ImportDeckCommandParser implements ParserInterface\u003cImportDeckCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportDeckCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * and returns an ImportDeckCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public ImportDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String targetPath \u003d args.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (targetPath.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return new ImportDeckCommand(targetPath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truongthanh2606": 3,
      "lessthanfree": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.CardPerformanceMatchesPerformancesPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.Performance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": " * Parses input elements and creates a new ListCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tomforge"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": "public class ListCommandParser implements ParserInterface\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public ListCommand parse(String args) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        if (!trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            Set\u003cPerformance\u003e performanceSet \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "                    Arrays.stream(keywords).filter(Performance::isValidPerformance)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": "                            .map(Performance::type).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            if (!performanceSet.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": "                return new ListCommand(new CardPerformanceMatchesPerformancesPredicate(performanceSet));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NewCardCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.NewCardCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Answer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Parses input arguments and creates a new NewCardCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class NewCardCommandParser implements ParserInterface\u003cNewCardCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NewCardCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * and returns an NewCardCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public NewCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_ANSWER, PREFIX_QUESTION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ANSWER, PREFIX_QUESTION)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                NewCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Question question \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Answer answer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card card \u003d new Card(question, answer);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return new NewCardCommand(card);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tomforge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 5,
      "tomforge": 27,
      "truongthanh2606": 11,
      "lessthanfree": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NewDeckCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.NewDeckCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class NewDeckCommandParser implements ParserInterface\u003cNewDeckCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public NewDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                NewDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deck \u003d new Deck(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return new NewDeckCommand(deck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 7,
      "truongthanh2606": 6,
      "lessthanfree": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.ChangeDeckCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.logic.commands.ClassifyCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.DeleteDeckCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.EditCardCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.EditDeckCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.EndReviewCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.ExportDeckCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.FlipCardCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.ImportDeckCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.NewCardCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.NewDeckCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.NextCardCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.PerformanceSortCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.PreviousCardCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.ReviewCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        case NewDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return new NewDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        case EditDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return new EditDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        case DeleteDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return new DeleteDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        case NewCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return new NewCardCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        case EditCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return new EditCardCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        case DeleteCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return new DeleteCardCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        case ChangeDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return new ChangeDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return new SortCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        case ExportDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return new ExportDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        case ImportDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return new ImportDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        case ReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return new ReviewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        case EndReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return new EndReviewCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        case FlipCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return new FlipCardCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        case NextCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return new NextCardCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        case PreviousCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return new PreviousCardCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        case ClassifyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            return new ClassifyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        case PerformanceSortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            return new PerformanceSortCommand();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 3,
      "yujiatay": 110,
      "tomforge": 5,
      "truongthanh2606": 3,
      "lessthanfree": 9,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserInterface.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public interface ParserInterface\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 2,
      "truongthanh2606": 2,
      "lessthanfree": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Answer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.Performance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Parses a {@code String question} into a {@code Question}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static Question parseQuestion(String question) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        String trimmed \u003d question.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (!Question.isValidQuestion(trimmed)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new ParseException(Question.MESSAGE_QUESTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return new Question(trimmed);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Parses a {@code String answer} into a {@code Answer}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static Answer parseAnswer(String answer) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        String trimmed \u003d answer.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (!Answer.isValidAnswer(trimmed)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new ParseException(Answer.MESSAGE_ANSWER_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return new Answer(trimmed);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Parses a {@code String performance} into a {@code Performance}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static Performance parsePerformance(String performance) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        requireNonNull(performance);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        String trimmed \u003d performance.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            return Performance.type(trimmed);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            throw new ParseException(Performance.MESSAGE_PERFORMANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 19,
      "tomforge": 10,
      "lessthanfree": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ReviewCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.ReviewCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Parses input arguments and creates a new ReviewCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class ReviewCommandParser implements ParserInterface\u003cReviewCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReviewCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * and returns an ReviewCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public ReviewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                    ReviewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return new ReviewCommand(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Anakin.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.UniqueCardList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.DeckImportException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.storage.portmanager.PortManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Wraps all data at the Anakin level"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Duplicates are not allowed (by .isSameDeck comparison)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class Anakin implements ReadOnlyAnakin {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final UniqueDeckList decks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Represent the current list of cards (when user get into a deck)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private UniqueCardList cards;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    // Represents the list of cards displayed on the UI"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private UniqueCardList displayedCards;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private boolean isInsideDeck;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    // Boolean flag to indicate whether user is in deck review mode"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private boolean isReviewingDeck;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    // Manager to handle imports/exports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private PortManager portManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private String lastCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    * among constructors."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    */ {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        decks \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        cards \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        displayedCards \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        portManager \u003d new PortManager();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public Anakin() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an Anakin using the Decks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Anakin(ReadOnlyAnakin toBeCopied) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the deck list with {@code decks}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code decks} must not contain duplicate decks."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setDecks(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.decks.setDecks(decks);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Replaces the contents of the card list with {@code cards}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * {@code cards} must not contain duplicate cards."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setCards(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        this.cards.setCards(cards);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code Anakin} with {@code newData}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void resetData(ReadOnlyAnakin newData) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        isInsideDeck \u003d newData.isInsideDeck();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        setIsReviewingDeck(newData.isReviewingDeck());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setDecks(newData.getDeckList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        setCards(newData.getCardList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        lastCommand \u003d newData.getLastCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        updateDisplayedCards();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Sort the current list of decks/cards in LEXICOGRAPHICAL order."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public void sort(ModelManager.SortingType type) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        if (type \u003d\u003d ModelManager.SortingType.LEXICOGRAPHICAL \u0026\u0026 isInsideDeck()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            cards.sort();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            updateDisplayedCards();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        } else if (type \u003d\u003d ModelManager.SortingType.LEXICOGRAPHICAL \u0026\u0026 !isInsideDeck()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            decks.sort();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        } else if (type \u003d\u003d ModelManager.SortingType.PERFORMANCE \u0026\u0026 isInsideDeck()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            cards.perfsort();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            updateDisplayedCards();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void updateDisplayedCards() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        displayedCards.setCards(cards);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    //// navigating operations"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Navigating into a deck"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void getIntoDeck(Deck deck) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        isInsideDeck \u003d true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        cards \u003d deck.getCards();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        updateDisplayedCards();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Navigating out of the current deck"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void getOutOfDeck() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        isInsideDeck \u003d false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        cards \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        updateDisplayedCards();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Return the current deck"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public boolean isInsideDeck() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return isInsideDeck;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    //// deck-level operations"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a deck with the same identity as {@code deck} exists in Anakin."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return decks.contains(deck);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a deck to the Anakin."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * The deck must not already exist in the Anakin."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void addDeck(Deck d) throws DuplicateDeckException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        decks.add(d);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given deck {@code target} in the list with {@code editedDeck}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the Anakin."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * The deck identity of {@code editedDeck} must not be the same as another existing deck in the Anakin."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void updateDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedDeck);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        decks.setDeck(target, editedDeck);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Removes {@code deck} from this {@code Anakin}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * {@code deck} must exist in the Anakin."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void removeDeck(Deck deck) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        decks.remove(deck);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (deck.getCards().equals(cards)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            cards \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            updateDisplayedCards();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Attempts to export {@deck}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Returns the exported file location as a string."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public String exportDeck(Deck deck) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return portManager.exportDeck(deck);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Attempts to import a deck at the specified file location."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * If there is an existing duplicate deck, throw DuplicateDeckException."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * If there was a problem with the import action, throw DeckImportException"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public Deck importDeck(String filepath) throws DuplicateDeckException, DeckImportException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Deck targetDeck \u003d portManager.importDeck(filepath);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        if (decks.contains(targetDeck)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return targetDeck;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    //// card-level operations"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card with the same identity as {@code card} exists in current deck."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        return cards.contains(card);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a card to the current deck."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * The card must not already exist in the current deck."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void addCard(Card c) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        cards.add(c);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        updateDisplayedCards();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given card {@code target} in the list with {@code editedCard}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the current deck."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * The card identity of {@code editedCard} must not be the same as another existing card in the current deck."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void updateCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedCard);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        cards.setCard(target, editedCard);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        updateDisplayedCards();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code currentDeck}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the currentDeck."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void removeCard(Card key) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        cards.remove(key);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        updateDisplayedCards();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Return true if user is inside deck review mode"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public boolean isReviewingDeck() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return isReviewingDeck;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private void setIsReviewingDeck(boolean state) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        isReviewingDeck \u003d state;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void startReview() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        isReviewingDeck \u003d true;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Concludes the end of a deck review by setting isReviewingDeck flag to false"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void endReview() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        isReviewingDeck \u003d false;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public int getIndexOfCurrentCard() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return cards.getCurrentIndex();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void setIndexOfCurrentCard(int newIndex) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        cards.setCurrentIndex(newIndex);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        stringBuilder.append(\"ANAKIN: \" + decks.asUnmodifiableObservableList().size() + \" decks\\n\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Iterator\u003cDeck\u003e iterator \u003d decks.iterator();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            Deck cur \u003d iterator.next();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            stringBuilder.append(cur.toString() + \"\\n\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            Iterator\u003cCard\u003e cardIterator \u003d cur.getCards().iterator();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            while (cardIterator.hasNext()) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                stringBuilder.append(\"\\t\" + cardIterator.next().toString() + \"\\n\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public ObservableList\u003cDeck\u003e getDeckList() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        return decks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public ObservableList\u003cCard\u003e getCardList() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return displayedCards.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public String getLastCommand() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return lastCommand;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Anakin // instanceof handles nulls"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 decks.equals(((Anakin) other).decks));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        return decks.hashCode();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 7,
      "yujiatay": 44,
      "truongthanh2606": 111,
      "lessthanfree": 47,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.DeckImportException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * The API of the Model component"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    Predicate\u003cDeck\u003e PREDICATE_SHOW_ALL_DECKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    Predicate\u003cCard\u003e PREDICATE_SHOW_ALL_CARDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    void resetData(ReadOnlyAnakin newData);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    ReadOnlyAnakin getAnakin();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    void sort(ModelManager.SortingType type);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    boolean hasDeck(Deck deck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    void addDeck(Deck deck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    void deleteDeck(Deck deck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    void updateDeck(Deck target, Deck editedDeck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    boolean hasCard(Card card);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    void addCard(Card card);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    void deleteCard(Card card);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void getIntoDeck(Deck deck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    void getOutOfDeck();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    void updateCard(Card target, Card editedCard);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    ObservableList\u003cDeck\u003e getFilteredDeckList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    ObservableList\u003cCard\u003e getFilteredCardList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    void updateFilteredCardList(Predicate\u003cCard\u003e predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    boolean isInsideDeck();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    boolean isReviewingDeck();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    void startReview();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    void endReview();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    int getIndexOfCurrentCard();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    void setIndexOfCurrentCard(int newIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    String exportDeck(Deck deck);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    Deck importDeck (String filepath) throws DeckImportException, DuplicateDeckException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    boolean canUndoAnakin();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    boolean canRedoAnakin();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    String undoAnakin();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    String redoAnakin();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    void commitAnakin(String command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 1,
      "yujiatay": 12,
      "truongthanh2606": 35,
      "lessthanfree": 8,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.commons.events.model.AnakinChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Represents the in-memory model of Anakin data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * This enum encapsulates the different types of sorts that can be performed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public enum SortingType {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        PERFORMANCE, LEXICOGRAPHICAL"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final Logger LOGGER \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final VersionedAnakin versionedAnakin;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final FilteredList\u003cDeck\u003e filteredDecks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    // The filteredCards is not assigned. Should have methods to assign filteredCards (when user is inside a deck)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private FilteredList\u003cCard\u003e filteredCards;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Initializes a ModelManager with the given Anakin and userPrefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public ModelManager(ReadOnlyAnakin anakin, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        requireAllNonNull(anakin, userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        LOGGER.fine(\"Initializing with anakin: \" + anakin + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        versionedAnakin \u003d new VersionedAnakin(anakin);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        filteredDecks \u003d new FilteredList\u003c\u003e(versionedAnakin.getDeckList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        filteredCards \u003d new FilteredList\u003c\u003e(versionedAnakin.getCardList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this(new Anakin(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void resetData(ReadOnlyAnakin newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        versionedAnakin.resetData(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        indicateAnakinChanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public ReadOnlyAnakin getAnakin() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return versionedAnakin;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private void indicateAnakinChanged() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        raise(new AnakinChangedEvent(versionedAnakin));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public void sort(SortingType type) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        if (type \u003d\u003d SortingType.LEXICOGRAPHICAL \u0026\u0026 isInsideDeck()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            LOGGER.info(\"Execute Lexicographical Card Sort\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            versionedAnakin.sort(SortingType.LEXICOGRAPHICAL);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        } else if (type \u003d\u003d SortingType.LEXICOGRAPHICAL \u0026\u0026 !isInsideDeck()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            LOGGER.info(\"Execute Lexicographical Deck Sort\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            versionedAnakin.sort(SortingType.LEXICOGRAPHICAL);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        } else if (type \u003d\u003d SortingType.PERFORMANCE \u0026\u0026 isInsideDeck()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            LOGGER.info(\"Execute Performance card sort \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            versionedAnakin.sort(SortingType.PERFORMANCE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        indicateAnakinChanged();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        requireAllNonNull(deck);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return versionedAnakin.hasDeck(deck);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void deleteDeck(Deck deck) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LOGGER.info(\"Deleted a deck.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        versionedAnakin.removeDeck(deck);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        indicateAnakinChanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LOGGER.info(\"Added a new deck to Anakin.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        versionedAnakin.addDeck(deck);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        indicateAnakinChanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void updateDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        requireAllNonNull(target, editedDeck);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        LOGGER.info(\"Updated a deck\u0027s name in Anakin.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        versionedAnakin.updateDeck(target, editedDeck);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        indicateAnakinChanged();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public boolean hasCard(Card card) throws DeckNotFoundException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        requireAllNonNull(card);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return versionedAnakin.hasCard(card);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void deleteCard(Card card) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        LOGGER.info(\"Deleted a card in the current deck.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        versionedAnakin.removeCard(card);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        indicateAnakinChanged();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void addCard(Card card) throws DeckNotFoundException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        versionedAnakin.addCard(card);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        LOGGER.info(\"Added a card to the current deck.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        indicateAnakinChanged();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void updateCard(Card target, Card editedCard) throws DeckNotFoundException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        requireAllNonNull(target, editedCard);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        versionedAnakin.updateCard(target, editedCard);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        LOGGER.info(\"Updated a card in the current deck.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        indicateAnakinChanged();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getIntoDeck(Deck deck) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        requireAllNonNull(deck);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        LOGGER.info(\"Got into a deck.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        versionedAnakin.getIntoDeck(deck);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        indicateAnakinChanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void getOutOfDeck() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        LOGGER.info(\"Got out of the current deck, back to Anakin\u0027s deck list.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        versionedAnakin.getOutOfDeck();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        indicateAnakinChanged();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public boolean isInsideDeck() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return versionedAnakin.isInsideDeck();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public boolean isReviewingDeck() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return versionedAnakin.isReviewingDeck();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void startReview() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        LOGGER.info(\"Starting reviewing...\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        versionedAnakin.startReview();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        indicateAnakinChanged();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void endReview() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        LOGGER.info(\"Ended review mode.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        versionedAnakin.endReview();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        indicateAnakinChanged();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public int getIndexOfCurrentCard() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return versionedAnakin.getIndexOfCurrentCard();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void setIndexOfCurrentCard(int newIndex) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        versionedAnakin.setIndexOfCurrentCard(newIndex);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        indicateAnakinChanged();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public String exportDeck(Deck deck) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        LOGGER.info(\"Exported a deck.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return versionedAnakin.exportDeck(deck);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public Deck importDeck (String filepath) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        LOGGER.info(\"Imported a deck from xml file.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Deck imported \u003d versionedAnakin.importDeck(filepath);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        addDeck(imported);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return imported;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Deck List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Deck} backed by the internal list of"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * {@code versionedAnakin}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredDecks);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        requireAllNonNull(predicate);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        filteredDecks.setPredicate(predicate);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Card List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Card} backed by the internal list of"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * {@code currentDeck}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredCards);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        requireAllNonNull(predicate);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        filteredCards.setPredicate(predicate);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public boolean canUndoAnakin() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return versionedAnakin.canUndo();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public boolean canRedoAnakin() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return versionedAnakin.canRedo();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public String undoAnakin() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        LOGGER.info(\"Undo Anakin, reset the application to the previous state.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String undoCommand \u003d versionedAnakin.undo();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        indicateAnakinChanged();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return undoCommand;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public String redoAnakin() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        LOGGER.info(\"Redo Anakin, reset the application to the state before the previous `undo` command.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String redoCommand \u003d versionedAnakin.redo();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        indicateAnakinChanged();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return redoCommand;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void commitAnakin(String command) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        LOGGER.info(\"Committed Anakin\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        versionedAnakin.commit(command);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return versionedAnakin.equals(other.versionedAnakin)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            \u0026\u0026 filteredDecks.equals(other.filteredDecks);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 18,
      "yujiatay": 17,
      "truongthanh2606": 117,
      "lessthanfree": 12,
      "-": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAnakin.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": " * Unmodifiable view of Anakin"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public interface ReadOnlyAnakin {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the decks list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate decks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    ObservableList\u003cDeck\u003e getDeckList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Returns an unmodifiable view of the cards list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * This list will not contain any duplicate cards."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    ObservableList\u003cCard\u003e getCardList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Returns true if user is inside a deck."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    boolean isInsideDeck();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @return boolean of whether deck is being reviewed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    boolean isReviewingDeck();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * @return string represents the last commands that commits Anakin"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    String getLastCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tomforge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 8,
      "yujiatay": 7,
      "truongthanh2606": 14,
      "lessthanfree": 4,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private Path anakinFilePath \u003d Paths.get(\"data\", \"anakin.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        setGuiSettings(690, 500, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public Path getAnakinFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return anakinFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void setAnakinFilePath(Path anakinFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        this.anakinFilePath \u003d anakinFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u0026\u0026 Objects.equals(anakinFilePath, o.anakinFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return Objects.hash(guiSettings, anakinFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + anakinFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 9,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedAnakin.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * {@code Anakin} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class VersionedAnakin extends Anakin {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final List\u003cReadOnlyAnakin\u003e anakinStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    // The command that causes Anakin\u0027s state to be changed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private String lastCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public VersionedAnakin(ReadOnlyAnakin initialState) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        anakinStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        anakinStateList.add(new Anakin(initialState));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Saves a copy of the current {@code Anakin} state at the end of the state list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * @param command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void commit(String command) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        lastCommand \u003d command;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        anakinStateList.add(new Anakin(this));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public String getLastCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return lastCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        anakinStateList.subList(currentStatePointer + 1, anakinStateList.size()).clear();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previous state."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public String undo() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String undoCommand \u003d anakinStateList.get(currentStatePointer).getLastCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(anakinStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        updateDisplayedCards();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return undoCommand;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previously undone state."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public String redo() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(anakinStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        updateDisplayedCards();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return anakinStateList.get(currentStatePointer).getLastCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003c anakinStateList.size() - 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (!(other instanceof VersionedAnakin)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin otherVersionedAnakin \u003d (VersionedAnakin) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.equals(otherVersionedAnakin)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 anakinStateList.equals(otherVersionedAnakin.anakinStateList)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedAnakin.currentStatePointer;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            super(\"Current state pointer at start of anakinState list, unable to undo.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            super(\"Current state pointer at end of anakinState list, unable to redo.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 3,
      "truongthanh2606": 41,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/Answer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Represents a Card\u0027s answer in the deck."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAnswer(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class Answer {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_ANSWER_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \"Answers can contain any text inputs but it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * The first character of the answer must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String ANSWER_VALIDATION_REGEX \u003d \"[\\\\p{Graph}][\\\\p{Graph} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public final String fullAnswer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Constructs a {@code Answer}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @param answer A valid answer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Answer(String answer) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        checkArgument(isValidAnswer(answer), MESSAGE_ANSWER_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        fullAnswer \u003d answer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns true if a given string is a valid answer."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static boolean isValidAnswer(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return test.matches(ANSWER_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return fullAnswer;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            || (other instanceof Answer // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            \u0026\u0026 fullAnswer.equals(((Answer) other).fullAnswer)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return fullAnswer.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 51,
      "tomforge": 1,
      "truongthanh2606": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/Card.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Represents a Card inside a Deck."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class Card {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     *  Each Card contains details required to implement SM2, a popular spaced repetition algorithm."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     *  For more information, please refer to https://www.supermemo.com/english/ol/sm2.htm"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     *  As we are using a modified version of SM2, our implementation will differ from the site shown above."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final double PERFORMANCE_MODERATING_FACTOR \u003d -0.8;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final int BIAS \u003d 4;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final double UPDATED_SQUARED_COEFFICIENT \u003d 0.02;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final double UPDATED_LINEAR_COEFFICIENT \u003d 0.28;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final double REVIEW_INTERVAL_COEFFICIENT \u003d 6;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final double DEFAULT_REVIEW_SCORE \u003d 2.5;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final double REVIEW_SCORE_THRESHOLD \u003d 15;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Performance performance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private final int timesReviewed;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private LocalDateTime nextReviewDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private double reviewScore;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final Question question;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final Answer answer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Card(Question question, Answer answer) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        requireAllNonNull(question, answer);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        this.reviewScore \u003d DEFAULT_REVIEW_SCORE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        timesReviewed \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        performance \u003d Performance.NORMAL;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        this.nextReviewDate \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public Card(Question question, Answer answer, Performance performance, int timesReviewed, double reviewScore,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                LocalDateTime nextReviewDate) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        requireAllNonNull(question, answer);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.performance \u003d performance;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.timesReviewed \u003d timesReviewed;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        this.nextReviewDate \u003d nextReviewDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        this.reviewScore \u003d reviewScore;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Card(Card other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this.question \u003d new Question(other.getQuestion().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this.answer \u003d new Answer(other.getAnswer().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this.performance \u003d other.performance;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.timesReviewed \u003d other.timesReviewed;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        this.nextReviewDate \u003d other.nextReviewDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        this.reviewScore \u003d other.reviewScore;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Assigns performance to the currently reviewed card."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @param card the card being reviewed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @param performance how well the user remembers the card"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static Card classifyCard(Card card, Performance performance) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        int performanceAsInt \u003d performance.ordinal();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        // Cap the review Score threshold"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        double scorePostUpdate \u003d Math.min(card.updateReviewScore(performanceAsInt), REVIEW_SCORE_THRESHOLD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        LocalDateTime nextReviewDate \u003d calculateNextReviewDate(card, performance);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return new Card(card.question, card.answer, performance, card.timesReviewed + 1,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                scorePostUpdate, nextReviewDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     *  Find out when the card needs to be reviewed again for optimal recall. If the card was answered correctly,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     *  the date for the next scheduled review is pushed back by an exponential factor. If it is answered wrongly, it"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     *  is scheduled the next day."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private static LocalDateTime calculateNextReviewDate(Card card, Performance performance) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        double consecutiveCorrectAnswers \u003d card.getConsecutiveCorrect();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        double addedDays \u003d 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        if (performance.isCorrect()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            addedDays \u003d REVIEW_INTERVAL_COEFFICIENT * Math.pow(card.reviewScore, consecutiveCorrectAnswers - 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return card.nextReviewDate.plusDays((long) addedDays);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Toggle the review score using a quadratic factor based on how well the user has performed on this card."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Performance is scaled to reflect that there are three tiers of performance instead"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * of the conventional five tiered performance."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public double updateReviewScore(int performanceAsInt) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        double scaledPerformance \u003d performanceAsInt + BIAS;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return PERFORMANCE_MODERATING_FACTOR + UPDATED_LINEAR_COEFFICIENT * scaledPerformance"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                + UPDATED_SQUARED_COEFFICIENT * scaledPerformance * scaledPerformance;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public double getReviewScore() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return reviewScore;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public Performance getPerformance() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return performance;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public int getTimesReviewed() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return timesReviewed;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public int getConsecutiveCorrect() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return (this.performance.isCorrect()) ? timesReviewed + 1 : 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public LocalDateTime getNextReview() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return nextReviewDate;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Returns true if 2 cards are the same, or have same question."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public boolean isSameCard(Card otherCard) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (otherCard \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (otherCard \u003d\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return otherCard.getQuestion().equals(question);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (!(other instanceof Card)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return isSameCard((Card) other);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return Objects.hash(question);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        builder.append(\"Question: \")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tomforge"
        },
        "content": "                .append(question)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                .append(\" Answer: \")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tomforge"
        },
        "content": "                .append(answer);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 74,
      "yujiatay": 4,
      "tomforge": 18,
      "truongthanh2606": 71,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/CardPerformanceMatchesPerformancesPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": " * Tests that a {@code Card}\u0027s {@code Performance} matches any of the Performances given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": "public class CardPerformanceMatchesPerformancesPredicate implements Predicate\u003cCard\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private final Set\u003cPerformance\u003e performances;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public CardPerformanceMatchesPerformancesPredicate(Set\u003cPerformance\u003e performances) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.performances \u003d performances;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Returns the constituent performances as a list of strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public List\u003cString\u003e performancesAsStrings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return performances.stream().map(Performance::toString).collect(Collectors.toList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public boolean test(Card card) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return performances.contains(card.getPerformance());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        } else if (!(other instanceof CardPerformanceMatchesPerformancesPredicate)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        CardPerformanceMatchesPerformancesPredicate predicate \u003d (CardPerformanceMatchesPerformancesPredicate) other;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return performances.size() \u003d\u003d predicate.performances.size()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tomforge"
        },
        "content": "                \u0026\u0026 performances.containsAll(predicate.performances);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tomforge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/CardQuestionContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Card}\u0027s {@code Question} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CardQuestionContainsKeywordsPredicate implements Predicate\u003cCard\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CardQuestionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Card card) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (keywords.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return card.getQuestion().toString().toLowerCase().contains(keywords.get(0).toLowerCase());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(card.getQuestion().toString(), keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof CardQuestionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((CardQuestionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truongthanh2606": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/Deck.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Represents a Deck inside Anakin."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class Deck {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final UniqueCardList cards;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Deck(Name name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        cards \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Deck(Name name, List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this(name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        for (Card card : cards) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            this.cards.add(card);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Deck(Deck other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this.name \u003d new Name(other.name.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this.cards \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this.cards.setCards(other.getCards());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public UniqueCardList getCards() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return cards;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Returns true if 2 decks are the same, or have identical name."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public boolean isSameDeck(Deck otherDeck) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (otherDeck \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (otherDeck \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return otherDeck.getName().equals(getName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (!(other instanceof Deck)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return isSameDeck((Deck) other);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 2,
      "yujiatay": 1,
      "tomforge": 5,
      "truongthanh2606": 68,
      "lessthanfree": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/DeckNameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Tests that a {@code Deck}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class DeckNameContainsKeywordsPredicate implements Predicate\u003cDeck\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public DeckNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public boolean test(Deck deck) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (keywords.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return deck.getName().toString().toLowerCase().contains(keywords.get(0).toLowerCase());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(deck.getName().fullName, keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            || (other instanceof DeckNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            \u0026\u0026 keywords.equals(((DeckNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "truongthanh2606": 9,
      "lessthanfree": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Represents a Deck\u0027s name in Anakin."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 3,
      "yujiatay": 1,
      "truongthanh2606": 1,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/Performance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a card\u0027s performance."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public enum Performance {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    EASY,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    NORMAL,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    HARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final String MESSAGE_PERFORMANCE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \"Performance must be one of the strings {easy|normal|hard}\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Converts the provided string to a Performance type"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * @param type the input string"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * @return the converted Performance type"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static Performance type(String type) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return Performance.valueOf(type.toUpperCase());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Returns a boolean indicating whether the given string can be converted to a valid performance type"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * @param type the input string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * @return True if type is a valid performance, false otherwise"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static boolean isValidPerformance(String type) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            Performance.type(type);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public boolean isCorrect() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return this.ordinal() \u003e\u003d (Performance.values().length / 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 3,
      "yujiatay": 1,
      "tomforge": 32,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/Question.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Represents a Card\u0027s question in the deck."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuestion(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String MESSAGE_QUESTION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \"Questions can contain any text inputs but it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * The first character of the question must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String QUESTION_VALIDATION_REGEX \u003d \"[\\\\p{Graph}][\\\\p{Graph} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public final String fullQuestion;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Constructs a {@code Question}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @param question A valid question."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Question(String question) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        checkArgument(isValidQuestion(question), MESSAGE_QUESTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        fullQuestion \u003d question;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns true if a given string is a valid question."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static boolean isValidQuestion(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return test.matches(QUESTION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return fullQuestion;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            || (other instanceof Question // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            \u0026\u0026 fullQuestion.equals(((Question) other).fullQuestion)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return fullQuestion.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 52,
      "truongthanh2606": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/UniqueCardList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of cards that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class UniqueCardList implements Iterable\u003cCard\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public final ObservableList\u003cCard\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private int currentIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent deck as the given argument."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public boolean contains(Card toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCard);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a card to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * The card must not already exist in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void add(Card toAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the card {@code target} in the list with {@code editedCard}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * The card identity of {@code editedCard} must not be the same as another existing card in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedCard);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSameCard(editedCard) \u0026\u0026 contains(editedCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedCard);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent card from the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * The card must exist in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void remove(Card toRemove) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Clears all cards."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Sort all cards in the list in alphabetical order according to the question."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        internalList.sort(Comparator.comparing(o -\u003e o.getQuestion().toString().toLowerCase()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Sort all cards in the list in order of performance."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public void perfsort() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        internalList.sort(Comparator.comparing(o -\u003e -o.getReviewScore()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setCards(UniqueCardList cards) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        requireNonNull(cards);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        internalList.setAll(cards.internalList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.internalList.size(); i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            internalList.set(i, new Card(cards.internalList.get(i)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code cards}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code cards} must not contain duplicate cards."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setCards(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(cards);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!cardsAreUnique(cards)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(cards);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public int getCurrentIndex() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return currentIndex;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void setCurrentIndex(int newIndex) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (newIndex \u003c 0 || newIndex \u003e\u003d internalList.size()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        currentIndex \u003d newIndex;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public ObservableList\u003cCard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Iterator\u003cCard\u003e iterator() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            || (other instanceof UniqueCardList // instanceof handles nulls"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueCardList) other).internalList));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code cards} contains only unique cards."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cards"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private boolean cardsAreUnique(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.size() - 1; i++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c cards.size(); j++) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                if (cards.get(i).isSameCard(cards.get(j))) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 8,
      "yujiatay": 23,
      "truongthanh2606": 31,
      "lessthanfree": 2,
      "-": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/UniqueDeckList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of decks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class UniqueDeckList implements Iterable\u003cDeck\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public final ObservableList\u003cDeck\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent deck as the given argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public boolean contains(Deck toCheck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDeck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a deck to the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * The deck must not already exist in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void add(Deck toAdd) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the deck {@code target} in the list with {@code editedDeck}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * The deck identity of {@code editedPerson} must not be the same as another existing deck in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedDeck);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSameDeck(editedDeck) \u0026\u0026 contains(editedDeck)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedDeck);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent deck from the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * The deck must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void remove(Deck toRemove) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Sort all decks in the list in alphabetical order according to the name of decks."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        internalList.sort(Comparator.comparing(o -\u003e o.getName().toString()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setDecks(UniqueDeckList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code decks}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code decks} must not contain duplicate decks."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setDecks(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(decks);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!decksAreUnique(decks)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(decks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        for (int i \u003d 0; i \u003c decks.size(); i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            internalList.set(i, new Deck(decks.get(i)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public ObservableList\u003cDeck\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Iterator\u003cDeck\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            || (other instanceof UniqueDeckList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueDeckList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code decks} contains only unique decks."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param decks"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private boolean decksAreUnique(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c decks.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c decks.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                if (decks.get(i).isSameDeck(decks.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 3,
      "truongthanh2606": 29,
      "lessthanfree": 2,
      "-": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/anakinexceptions/CardNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck.anakinexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Signals that the operation is unable to find the specified card."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class CardNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "truongthanh2606": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/anakinexceptions/DeckImportException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "package seedu.address.model.deck.anakinexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * Signals that the operation will result in duplicate Cards (Cards are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "public class DeckImportException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public DeckImportException(String msg) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/anakinexceptions/DeckNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck.anakinexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Signals that the operation is unable to find the specified deck."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class DeckNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "truongthanh2606": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/anakinexceptions/DuplicateCardException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck.anakinexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Signals that the operation will result in duplicate Cards (Cards are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class DuplicateCardException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public DuplicateCardException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        super(\"Operation would result in duplicate cards\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "truongthanh2606": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/anakinexceptions/DuplicateDeckException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck.anakinexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Signals that the operation will result in duplicate Decks (Decks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class DuplicateDeckException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public DuplicateDeckException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        super(\"Operation would result in duplicate decks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "truongthanh2606": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/anakinexceptions/IllegalOperationWhileReviewingDeckException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck.anakinexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Signals that the operation cannot occur when reviewing deck."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class IllegalOperationWhileReviewingDeckException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public IllegalOperationWhileReviewingDeckException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        super(\"Operation is not allowed when user is reviewing deck.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/anakinexceptions/NotReviewingDeckException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck.anakinexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Signals that the operation cannot occur without reviewing deck first."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class NotReviewingDeckException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public NotReviewingDeckException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        super(\"Operation requires user to be reviewing deck.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ReadOnlyAnakin;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Answer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Contains utility methods for populating {@code Anakin} with sample decks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * @param sampleAnakin"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * @return sampleAnakin with a sample deck"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    static final Card SAMPLE_CARD_1 \u003d new Card(new Question(\"What is always coming, but never arrives?\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            new Answer(\"Tomorrow\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    static final Card SAMPLE_CARD_2 \u003d new Card(new Question(\"What can be broken, but is never held?\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            new Answer(\"A promise\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    static final Card SAMPLE_CARD_3 \u003d new Card(new Question(\"What is it that lives if it is fed, and dies if you \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            + \"give it a drink?\"), new Answer(\"Fire\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    static final Card SAMPLE_CARD_4 \u003d new Card(new Question(\"What can one catch that is not thrown?\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            new Answer(\"A cold\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    static final Card SAMPLE_CARD_5 \u003d new Card(new Question(\"What is it that if you have, you want to share me, \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            + \"and if you share, you do not have?\"), new Answer(\"A secret\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    static final Card SAMPLE_CARD_6 \u003d new Card(new Question(\"If it takes eight men ten hours to build a wall, \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            + \"how long would it take four men?\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            new Answer(\"No time, because the wall is already built\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": "                    + \".\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    static final Deck SAMPLE_DECK \u003d new Deck(new Name(\"Asking Questions\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Loads sample data into Anakin"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * @param sampleAnakin"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static Anakin addSampleDeck(Anakin sampleAnakin) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        sampleAnakin.addDeck(SAMPLE_DECK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        sampleAnakin.getIntoDeck(SAMPLE_DECK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        sampleAnakin.addCard(SAMPLE_CARD_1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        sampleAnakin.addCard(SAMPLE_CARD_2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        sampleAnakin.addCard(SAMPLE_CARD_3);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        sampleAnakin.addCard(SAMPLE_CARD_4);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        sampleAnakin.addCard(SAMPLE_CARD_5);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        sampleAnakin.addCard(SAMPLE_CARD_6);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return sampleAnakin;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static ReadOnlyAnakin getSampleAnakin() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Anakin sampleAnakin \u003d new Anakin();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        addSampleDeck(sampleAnakin);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return sampleAnakin;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 5,
      "tomforge": 26,
      "truongthanh2606": 11,
      "lessthanfree": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AnakinStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ReadOnlyAnakin;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Represents a storage for {@link ReadOnlyAnakin}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public interface AnakinStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    Path getAnakinFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Returns Anakin data as a {@link ReadOnlyAnakin}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    Optional\u003cReadOnlyAnakin\u003e readAnakin() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * @see #getAnakinFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    Optional\u003cReadOnlyAnakin\u003e readAnakin(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Saves the given {@link ReadOnlyAnakin} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * @param anakin cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    void saveAnakin(ReadOnlyAnakin anakin) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * @see #saveAnakin(ReadOnlyAnakin)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    void saveAnakin(ReadOnlyAnakin anakin, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tomforge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 16,
      "truongthanh2606": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 1,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.commons.events.model.AnakinChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ReadOnlyAnakin;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public interface Storage extends AnakinStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    Path getAnakinFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    Optional\u003cReadOnlyAnakin\u003e readAnakin() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    void saveAnakin(ReadOnlyAnakin anakin) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Saves the current version of the Anakin to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Creates the data file if it is missing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    void handleAnakinChangedEvent(AnakinChangedEvent abce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 1,
      "truongthanh2606": 8,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.commons.events.model.AnakinChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ReadOnlyAnakin;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Manages storage of Anakin data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private AnakinStorage anakinStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public StorageManager(AnakinStorage anakinStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this.anakinStorage \u003d anakinStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Anakin methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public Path getAnakinFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return anakinStorage.getAnakinFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Optional\u003cReadOnlyAnakin\u003e readAnakin() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return readAnakin(anakinStorage.getAnakinFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Optional\u003cReadOnlyAnakin\u003e readAnakin(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return anakinStorage.readAnakin(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void saveAnakin(ReadOnlyAnakin anakin) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        saveAnakin(anakin, anakinStorage.getAnakinFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void saveAnakin(ReadOnlyAnakin anakin, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        anakinStorage.saveAnakin(anakin, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void handleAnakinChangedEvent(AnakinChangedEvent event) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            saveAnakin(event.data);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 5,
      "truongthanh2606": 14,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.UserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 2,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.Performance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": " * JAXB-friendly version of the Card."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "public class XmlAdaptedCard {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Card\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private String performance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private int timesReviewed \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private double reviewScore \u003d 2.5;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Constructs an XmlAdaptedCard."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public XmlAdaptedCard() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Constructs an {@code XmlAdaptedCard} with the given person details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public XmlAdaptedCard(String question, String answer) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public XmlAdaptedCard(String question, String answer, String performance, int timesReviewed) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.performance \u003d performance;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.timesReviewed \u003d timesReviewed;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Converts a given Card into this class for JAXB use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedCard"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public XmlAdaptedCard(Card source) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        question \u003d source.getQuestion().fullQuestion;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        answer \u003d source.getAnswer().fullAnswer;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        performance \u003d source.getPerformance().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        timesReviewed \u003d source.getTimesReviewed();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        reviewScore \u003d source.getReviewScore();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Converts this jaxb-friendly adapted card object into the model\u0027s Card object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Card toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        if (question \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                    Question.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (!Question.isValidQuestion(question)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new IllegalValueException(Question.MESSAGE_QUESTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        final Question cardQuestion \u003d new Question(question);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                    Answer.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (!Answer.isValidAnswer(answer)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new IllegalValueException(Answer.MESSAGE_ANSWER_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        final Answer cardAnswer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Performance cardPerformance \u003d Performance.NORMAL;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        if (Performance.isValidPerformance(performance)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            cardPerformance \u003d Performance.type(performance);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        LocalDateTime nextReview \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return new Card(cardQuestion, cardAnswer, cardPerformance, timesReviewed, reviewScore, nextReview);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        if (!(other instanceof XmlAdaptedCard)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlAdaptedCard otherCard \u003d (XmlAdaptedCard) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return Objects.equals(question, otherCard.question)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tomforge"
        },
        "content": "                \u0026\u0026 Objects.equals(answer, otherCard.answer)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tomforge"
        },
        "content": "                \u0026\u0026 Objects.equals(performance, otherCard.performance)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tomforge"
        },
        "content": "                \u0026\u0026 Objects.equals(timesReviewed, otherCard.timesReviewed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tomforge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 7,
      "tomforge": 99,
      "yujiatay": 3,
      "truongthanh2606": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedDeck.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": " * JAXB-friendly version of the Deck."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": "public class XmlAdaptedDeck {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Deck\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private List\u003cXmlAdaptedCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Constructs an XmlAdaptedDeck."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public XmlAdaptedDeck() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Constructs an {@code XmlAdaptedDeck} with the given person details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public XmlAdaptedDeck(String name, List\u003cXmlAdaptedCard\u003e cards) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.cards \u003d new ArrayList\u003c\u003e(cards);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Converts a given Deck into this class for JAXB use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedDeck"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public XmlAdaptedDeck(Deck source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        cards \u003d source.getCards().internalList.stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            .map(XmlAdaptedCard::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Converts this jaxb-friendly adapted deck object into the model\u0027s Deck object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Deck toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        final List\u003cCard\u003e deckCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        for (XmlAdaptedCard card : cards) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            deckCards.add(card.toModelType());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        final Name deckName \u003d new Name(name);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return new Deck(deckName, deckCards);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        if (!(other instanceof XmlAdaptedDeck)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlAdaptedDeck otherDeck \u003d (XmlAdaptedDeck) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return Objects.equals(name, otherDeck.name)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u0026\u0026 cards.equals(otherDeck.cards);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tomforge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 82,
      "yujiatay": 3,
      "truongthanh2606": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAnakinStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ReadOnlyAnakin;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class XmlAnakinStorage implements AnakinStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAnakinStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public XmlAnakinStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public Path getAnakinFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Optional\u003cReadOnlyAnakin\u003e readAnakin() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return readAnakin(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Similar to {@link #readAnakin()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Optional\u003cReadOnlyAnakin\u003e readAnakin(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        FileNotFoundException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            logger.info(\"Anakin file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlSerializableAnakin xmlAnakin \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            return Optional.of(xmlAnakin.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void saveAnakin(ReadOnlyAnakin anakin) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        saveAnakin(anakin, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Similar to {@link #saveAnakin(ReadOnlyAnakin)}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void saveAnakin(ReadOnlyAnakin anakin, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        requireNonNull(anakin);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableAnakin(anakin));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 12,
      "truongthanh2606": 9,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlExportableDeck.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * Exportable verion of deck."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "@XmlRootElement(name \u003d \"deck\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "public class XmlExportableDeck {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Deck\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private List\u003cXmlAdaptedCard\u003e cards;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Creates an empty XmlExportableDeck"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public XmlExportableDeck() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        name \u003d \"Generic Deck Name\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Creates an XmlExportableDeck with the specified name and Card list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public XmlExportableDeck(String strName, List\u003cXmlAdaptedCard\u003e cardsList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        name \u003d strName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        cards \u003d cardsList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Converts a given Deck into this class for JAXB use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * @param source future changes to this will not affect the created XmlExportableDeck"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public XmlExportableDeck(Deck source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        cards \u003d source.getCards().internalList.stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .map(XmlAdaptedCard::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Converts this XmlExportableDeck into the model\u0027s {@code Deck} object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or missing values."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public Deck toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        final List\u003cCard\u003e deckCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        for (XmlAdaptedCard card : cards) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            deckCards.add(card.toModelType());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        final Name deckName \u003d new Name(name);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return new Deck(deckName, deckCards);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        if (!(other instanceof XmlExportableDeck)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        XmlExportableDeck otherDeck \u003d (XmlExportableDeck) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return Objects.equals(name, otherDeck.name)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            \u0026\u0026 cards.equals(otherDeck.cards);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": " * Stores anakin data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Saves the given anakin data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableAnakin anakin)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            XmlUtil.saveDataToFile(file, anakin);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns address book in the file or an empty address book"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static XmlSerializableAnakin loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableAnakin.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 6,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAnakin.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ReadOnlyAnakin;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": " * An Immutable Anakin that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": "@XmlRootElement(name \u003d \"anakin\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "public class XmlSerializableAnakin {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"Deck list contains duplicate deck(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private List\u003cXmlAdaptedDeck\u003e decks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Creates an empty XmlSerializableAnakin."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public XmlSerializableAnakin() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        decks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public XmlSerializableAnakin(ReadOnlyAnakin src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        decks.addAll(src.getDeckList().stream().map(XmlAdaptedDeck::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Converts this anakin into the model\u0027s {@code Anakin} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * {@code XmlAdaptedDeck}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public Anakin toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Anakin anakin \u003d new Anakin();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        for (XmlAdaptedDeck d : decks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            Deck deck \u003d d.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            if (anakin.hasDeck(deck)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tomforge"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            anakin.addDeck(deck);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return anakin;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        if (!(other instanceof XmlSerializableAnakin)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return decks.equals(((XmlSerializableAnakin) other).decks);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tomforge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 67,
      "yujiatay": 1,
      "truongthanh2606": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/portmanager/PortManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "package seedu.address.storage.portmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FILEPATH_INVALID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_IMPORTED_DECK_INVALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.DeckImportException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.storage.XmlExportableDeck;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * Manages the import and exports of decks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "public class PortManager implements Porter {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PortManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private Path baseFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public PortManager() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        baseFilePath \u003d Paths.get(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public PortManager(Path bfp) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        baseFilePath \u003d bfp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public String getBfp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return baseFilePath.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public String exportDeck(Deck deck) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Name deckName \u003d deck.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Path filePath \u003d makeFilePath(deckName.fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        XmlExportableDeck adaptedDeck \u003d new XmlExportableDeck(deck);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            //If file doesn\u0027t exist, create it"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            //Write to file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, adaptedDeck);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return filePath.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public Deck importDeck(String stringPath) throws DeckImportException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Path filepath \u003d makeFilePath(stringPath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        XmlExportableDeck xmlDeck \u003d loadDeckFromFile(filepath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return convertDeck(xmlDeck);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Attempts to load the data from the file at filepath."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Returns a XmlExportableDeck object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private XmlExportableDeck loadDeckFromFile(Path filepath) throws DeckImportException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        XmlExportableDeck xmlDeck;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            xmlDeck \u003d XmlUtil.getDataFromFile(filepath, XmlExportableDeck.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return xmlDeck;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        } catch (javax.xml.bind.JAXBException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            logger.info(\"Illegal values found in \" + filepath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new DeckImportException(MESSAGE_IMPORTED_DECK_INVALID);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new DeckImportException(String.format(MESSAGE_FILEPATH_INVALID, filepath));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Converts the XmlExportableDeck to a Deck"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Returns a deck object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * If contents are invalid, throw DataConversionException"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private Deck convertDeck(XmlExportableDeck targetDeck) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return targetDeck.toModelType();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            logger.info(\"Illegal values found in \" + targetDeck + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new DeckImportException(MESSAGE_IMPORTED_DECK_INVALID);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Convert the string into a file path."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * @param name The name of the file, can be the absolute or relative file path"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * @return a Path that represents the file path"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private Path makeFilePath(String name) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (name.length() \u003e 4 \u0026\u0026 name.substring(name.length() - 4).equals(\".xml\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return baseFilePath.resolve(name);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return baseFilePath.resolve(name + \".xml\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truongthanh2606": 13,
      "lessthanfree": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/portmanager/Porter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "package seedu.address.storage.portmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.DeckImportException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * The API of PortManager"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "public interface Porter {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    String exportDeck(Deck deck);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    Deck importDeck(String stringPath) throws DeckImportException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CardCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * An UI component that displays information of a {@code Card}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class CardCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final String FXML \u003d \"CardListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public final Card card;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private Label question;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private Label difficulty;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public CardCard(Card card, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        this.card \u003d card;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        question.setText(card.getQuestion().fullQuestion);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        difficulty.setText(card.getPerformance().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        switch (card.getPerformance()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        case EASY:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            difficulty.setStyle(\"-fx-background-color: #3dc93e\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        case NORMAL:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            difficulty.setStyle(\"-fx-background-color: #c9c235\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        case HARD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            difficulty.setStyle(\"-fx-background-color: #c92c2a; -fx-text-fill: #ffffff\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (!(other instanceof CardCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        CardCard card \u003d (CardCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                \u0026\u0026 this.card.equals(card.card);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 55,
      "tomforge": 15,
      "truongthanh2606": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CardListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.ui.CardPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Panel containing the list of cards."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class CardListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final String FXML \u003d \"CardListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CardListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private ListView\u003cCard\u003e cardListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public CardListPanel(ObservableList\u003cCard\u003e cardList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        setConnections(cardList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private void setConnections(ObservableList\u003cCard\u003e cardList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        cardListView.setItems(cardList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        cardListView.setCellFactory(listView -\u003e new CardListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        cardListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                    logger.fine(\"Selection in card list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                    raise(new CardPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Scrolls to the {@code Card} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            cardListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            cardListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Card} using a {@code CardCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    class CardListViewCell extends ListCell\u003cCard\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        protected void updateItem(Card card, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            super.updateItem(card, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            if (empty || card \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                setGraphic(new CardCard(card, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 77,
      "truongthanh2606": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.parser.Autocompleter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        case TAB:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            autocomplete();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Checks if {@code commandBox}\u0027s commandTextField has a potential autocompletable command word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * if there exists such a word, it is replaced with the relevant autocompletion command."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private void autocomplete() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        String commandText \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        if (!Autocompleter.isAutocompletable(commandText)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        replaceText(Autocompleter.getAutocompletion(commandText));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 18,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeckCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * An UI component that displays information of a {@code Deck}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class DeckCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final String FXML \u003d \"DeckListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public final Deck deck;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public DeckCard(Deck deck, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        name.setText(deck.getName().fullName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (!(other instanceof DeckCard)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        DeckCard card \u003d (DeckCard) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u0026\u0026 deck.equals(card.deck);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 9,
      "truongthanh2606": 2,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeckEditScreen.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * A view container for edit operations."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class DeckEditScreen extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final String FXML \u003d \"DeckEditScreen.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeckEditScreen.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private StackPane deckListPanelPlaceholder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private StackPane cardListPanelPlaceholder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public DeckEditScreen(DeckListPanel deckListPanel, CardListPanel cardListPanel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        cardListPanelPlaceholder.getChildren().add(cardListPanel.getRoot());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        deckListPanelPlaceholder.getChildren().add(deckListPanel.getRoot());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeckListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.ui.DeckPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Panel containing the list of decks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class DeckListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final String FXML \u003d \"DeckListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CardListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private ListView\u003cDeck\u003e deckListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public DeckListPanel(ObservableList\u003cDeck\u003e deckList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        setConnections(deckList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private void setConnections(ObservableList\u003cDeck\u003e deckList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        deckListView.setItems(deckList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        deckListView.setCellFactory(listView -\u003e new DeckListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        deckListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                    logger.fine(\"Selection in deck list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                    raise(new DeckPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Scrolls to the {@code Deck} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            deckListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            deckListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Deck} using a {@code DeckCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    class DeckListViewCell extends ListCell\u003cDeck\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        protected void updateItem(Deck card, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            super.updateItem(card, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            if (empty || card \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                setGraphic(new DeckCard(card, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 77,
      "truongthanh2606": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeckReviewCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * An UI component that displays information of a {@code Card} during deck review."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class DeckReviewCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final String FXML \u003d \"DeckReviewCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public final Card card;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeckReviewScreen.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public DeckReviewCard(Card card, Boolean showAnswer) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        this.card \u003d card;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (!showAnswer) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            text.setText(\"Q: \" + card.getQuestion().fullQuestion);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            text.setText(\"A: \" + card.getAnswer().fullAnswer);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (!(other instanceof DeckReviewCard)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        DeckReviewCard card \u003d (DeckReviewCard) other;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return text.getText().equals(card.text.getText())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                \u0026\u0026 this.card.equals(card.card);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeckReviewScreen.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.ui.FlipCardRequestEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.ui.ReviewNextCardEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.ui.ReviewPreviousCardEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * An UI component for deck review."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class DeckReviewScreen extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final String FXML \u003d \"DeckReviewScreen.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeckReviewScreen.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private StackPane reviewCardPlaceholder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public DeckReviewScreen() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public DeckReviewScreen(Card card) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        updateCard(card);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Updates UI with new cardToShow"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @param cardToShow on the screen"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void updateCard(Card cardToShow) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        reviewCardPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        DeckReviewCard gameCardWithoutAnswer \u003d new DeckReviewCard(cardToShow, false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        DeckReviewCard gameCardWithAnswer \u003d new DeckReviewCard(cardToShow, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        reviewCardPlaceholder.getChildren().add(gameCardWithAnswer.getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        reviewCardPlaceholder.getChildren().add(gameCardWithoutAnswer.getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Reorders the nodes in stack pane to show different cards"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void handleFlipCard() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Node currentFront \u003d reviewCardPlaceholder.getChildren().get(reviewCardPlaceholder.getChildren().size() - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        currentFront.toBack();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private void handleFlipCardEvent(FlipCardRequestEvent event) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        handleFlipCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void handleNextCard(Card nextCard) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        updateCard(nextCard);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private void handleNextCardEvent(ReviewNextCardEvent event) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        handleNextCard(event.getNextCard());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void handlePreviousCard(Card prevCard) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        updateCard(prevCard);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private void handlePreviousCardEvent(ReviewPreviousCardEvent event) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        handlePreviousCard(event.getPreviousCard());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 2,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.ui.EndReviewRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.ui.StartReviewRequestEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private DeckListPanel deckListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private CardListPanel cardListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private DeckEditScreen deckEditScreen;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private DeckReviewScreen deckReviewScreen;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private StackPane mainAreaPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        cardListPanel \u003d new CardListPanel(logic.getFilteredCardList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        deckListPanel \u003d new DeckListPanel(logic.getFilteredDeckList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        deckEditScreen \u003d new DeckEditScreen(deckListPanel, cardListPanel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        deckReviewScreen \u003d new DeckReviewScreen();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        mainAreaPlaceholder.getChildren().add(deckReviewScreen.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        mainAreaPlaceholder.getChildren().add(deckEditScreen.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAnakinFilePath());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public DeckListPanel getDeckListPanel() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return deckListPanel;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private void handleStartReview(Card cardToShow) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Node currentFront \u003d mainAreaPlaceholder.getChildren().get(mainAreaPlaceholder.getChildren().size() - 1);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        mainAreaPlaceholder.getChildren().set(0, (new DeckReviewScreen(cardToShow)).getRoot());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        currentFront.toBack();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private void handleStartReviewEvent(StartReviewRequestEvent event) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        handleStartReview(event.getCard());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private void handleEndReview() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Node currentFront \u003d mainAreaPlaceholder.getChildren().get(mainAreaPlaceholder.getChildren().size() - 1);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        currentFront.toBack();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private void handleEndReviewEvent(EndReviewRequestEvent event) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        handleEndReview();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 41,
      "lessthanfree": 1,
      "-": 189
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.model.AnakinChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void handleAnakinChangedEvent(AnakinChangedEvent abce) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 2,
      "lessthanfree": 9,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Stops the UI."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    void stop();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 6,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/anakin.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String contentText) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            event.exception);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "lessthanfree": 20,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises the event via {@link EventsCenter#post(BaseEvent)}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(event);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Registers the object as an event handler at the {@link EventsCenter}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param handler usually {@code this}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void registerAsAnEventHandler(Object handler) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(handler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 18,
      "-": 95
    }
  },
  {
    "path": "src/main/resources/view/CardListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                \u003cLabel fx:id\u003d\"question\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003cLabel fx:id\u003d\"difficulty\" text\u003d\"\\$difficulty\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 31,
      "tomforge": 1
    }
  },
  {
    "path": "src/main/resources/view/CardListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    \u003cListView fx:id\u003d\"cardListView\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"card-panel\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 8
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003cStackPane styleClass\u003d\"command-stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyPress\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "             promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yujiatay": 3,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    background-color: #1c1c1c; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-background-color: #1c1c1c;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-background-color: #1c1c1c;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-padding: 5 0 0 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-padding: 5 5 5 5;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-background-insets: 5 0 5 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-background-color: #181818;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-background-color: #d1d1d1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /*-fx-text-fill: #fffd3b;*/"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ".list-cell:filled:even .label {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-text-fill: #fffd3b;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ".list-cell:filled:odd .label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-text-fill: #181818;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ".card-panel .list-cell:filled {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-background-color: #d1d1d1;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ".card-panel .list-cell .label {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-text-fill: #181818;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ".command-stack-pane {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-background-color: #E8E9EB;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     -fx-background-color: #1c1c1c;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-background-color: rgb(17, 17, 17);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-background-color: #bab849;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ".text-id {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /*-fx-border-color: #383838 #383838 #ffffff #383838;*/"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-text-fill: #313638;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "#deckReview {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-background-color: #1c1c1c;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "#deckReviewCard {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    -fx-background-color: #d8d8d8;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 50,
      "-": 336
    }
  },
  {
    "path": "src/main/resources/view/DeckEditScreen.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    \u003cVBox fx:id\u003d\"deckList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003cText text\u003d\"Decks\" styleClass\u003d\"text-id\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003cStackPane fx:id\u003d\"deckListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    \u003cVBox fx:id\u003d\"cardList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003cText text\u003d\"Cards\" styleClass\u003d\"text-id\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003cStackPane fx:id\u003d\"cardListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c/SplitPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 32
    }
  },
  {
    "path": "src/main/resources/view/DeckListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 31
    }
  },
  {
    "path": "src/main/resources/view/DeckListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    \u003cListView fx:id\u003d\"deckListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/DeckReviewCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003cStackPane id\u003d\"deckReviewCard\" fx:id\u003d\"deckReviewCard\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\" minWidth\u003d\"380\" prefWidth\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u003cLabel fx:id\u003d\"text\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 19
    }
  },
  {
    "path": "src/main/resources/view/DeckReviewScreen.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003cStackPane id\u003d\"deckReview\" fx:id\u003d\"deckReview\" VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    \u003cVBox minWidth\u003d\"680\" prefWidth\u003d\"680\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003cText text\u003d\"Playing\" styleClass\u003d\"text-id\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003cStackPane fx:id\u003d\"reviewCardPlaceholder\" prefWidth\u003d\"600\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 21
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    \u003cImage url\u003d\"@/images/anakin.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003cStackPane id\u003d\"mainAreaPlaceholder\" fx:id\u003d\"mainAreaPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"0\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            \u003cInsets top\u003d\"0\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 10,
      "-": 45
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\": \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\": {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\": 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\": 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\": 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": "  \"anakinFilePath\": \"anakin.xml\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\": {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\": 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\": 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "  \"anakinFilePath\": \"anakin.xml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/PortManagerTest/InvalidDeck.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003cdeck\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003cname\u003eInvalidDeck\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003cca"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cquestion\u003eAn\u003c/question\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003canswer\u003eEmpty\u003c/answer\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cperformance\u003eNORMAL\u003c/performance\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        eviewed\u003e0\u003c/timesReviewed\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cquestion\u003eStreet\u003c/question\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003canswer\u003eAn\u003c/answer\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cperformance\u003eNORMAL\u003c/performance\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003ctimesReviewed\u003e0\u003c/timesReviewed\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cquestion\u003eEmpty\u003c/question\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003canswer\u003eHouse\u003c/answer\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cperformance\u003eNORMAL\u003c/performance\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003ctimesReviewed\u003e0\u003c/timesReviewed\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cquestion\u003eA\u003c/question\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003canswer\u003eHole\u003c/answer\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cperformance\u003eNORMAL\u003c/performance\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003ctimesReviewed\u003e0\u003c/timesReviewed\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cquestion\u003eInside\u003c/question\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003canswer\u003eMy\u003c/answer\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cperformance\u003eNORMAL\u003c/performance\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003ctimesReviewed\u003e0\u003c/timesReviewed\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cquestion\u003eHeart\u003c/question\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003canswer\u003eI am\u003c/answer\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cperformance\u003eNORMAL\u003c/performance\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003ctimesReviewed\u003e0\u003c/timesReviewed\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cquestion\u003eAll\u003c/question\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003canswer\u003eAlone\u003c/answer\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cperformance\u003eNORMAL\u003c/performance\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003ctimesReviewed\u003e0\u003c/timesReviewed\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cquestion\u003eA million\u003c/question\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003canswer\u003eDefault answer for default question lmao\u003c/answer\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cperformance\u003eNORMAL\u003c/performance\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003ctimesReviewed\u003e0\u003c/timesReviewed\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cquestion\u003edreams is\u003c/question\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003canswer\u003eDefault answer for default question lmao\u003c/answer\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cperformance\u003eNORMAL\u003c/performance\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003ctimesReviewed\u003e0\u003c/timesReviewed\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cquestion\u003eall it\u0027s gonna take\u003c/question\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003canswer\u003eDefault answer for default question lmao\u003c/answer\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003cperformance\u003eNORMAL\u003c/performance\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        \u003ctimesReviewed\u003e0\u003c/timesReviewed\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003c/deck\u003e"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 64
    }
  },
  {
    "path": "src/test/data/XmlAnakinStorageTest/NotXmlFormatAnakin.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "Not xml format!"
      }
    ],
    "authorContributionMap": {
      "tomforge": 1
    }
  },
  {
    "path": "src/test/data/XmlAnakinStorageTest/invalidAndValidDeckAnakin.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003canakin\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c!-- Valid Deck --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003cdecks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003cname\u003eI tried\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003cquestion\u003eso hard and\u003c/question\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003canswer\u003egot so far\u003c/answer\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c/decks\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c!-- Deck with invalid name--\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003cdecks\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003cname\u003e \u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003cquestion\u003ebut in the end\u003c/question\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003canswer\u003eit does not even matter\u003c/answer\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c/decks\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003c/anakin\u003e"
      }
    ],
    "authorContributionMap": {
      "tomforge": 19
    }
  },
  {
    "path": "src/test/data/XmlAnakinStorageTest/invalidDeckAnakin.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003canakin\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c!--Deck with invalid name field--\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003cdecks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003cname\u003e \u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003cquestion\u003eHow is\u003c/question\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003canswer\u003eGamora\u003c/answer\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c/decks\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003c/anakin\u003e"
      }
    ],
    "authorContributionMap": {
      "tomforge": 11
    }
  },
  {
    "path": "src/test/data/XmlSerializableAnakinTest/duplicateDeckAnakin.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003canakin\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003cdecks\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003cname\u003eDuplicate Deck\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003cquestion\u003eTheirs not to\u003c/question\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003canswer\u003ereason why\u003c/answer\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c/decks\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003cdecks\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003cname\u003eDuplicate Deck\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003cquestion\u003eTheirs but to\u003c/question\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003canswer\u003edo and die\u003c/answer\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c/decks\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003c/anakin\u003e"
      }
    ],
    "authorContributionMap": {
      "tomforge": 17
    }
  },
  {
    "path": "src/test/data/XmlSerializableAnakinTest/invalidDeckAnakin.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003canakin\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c!--Deck with invalid name field--\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003cdecks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003cname\u003e \u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003cquestion\u003eHow is\u003c/question\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003canswer\u003eGamora\u003c/answer\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c/decks\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003c/anakin\u003e"
      }
    ],
    "authorContributionMap": {
      "tomforge": 11
    }
  },
  {
    "path": "src/test/data/XmlSerializableAnakinTest/typicalDecksAnakin.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003canakin\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003cdecks\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003cname\u003eHEYYY\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003cquestion\u003eAn\u003c/question\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003canswer\u003eEmpty\u003c/answer\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003cquestion\u003eStreet\u003c/question\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003canswer\u003eAn\u003c/answer\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003cquestion\u003eEmpty\u003c/question\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003canswer\u003eHouse\u003c/answer\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003cquestion\u003eA\u003c/question\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003canswer\u003eHole\u003c/answer\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003cquestion\u003eInside\u003c/question\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003canswer\u003eMy\u003c/answer\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003cquestion\u003eHeart\u003c/question\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003canswer\u003eI am\u003c/answer\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003cquestion\u003eAll\u003c/question\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003canswer\u003eAlone\u003c/answer\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cquestion\u003eA million\u003c/question\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003canswer\u003eDefault answer for default question lmao\u003c/answer\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cquestion\u003edreams is\u003c/question\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003canswer\u003eDefault answer for default question lmao\u003c/answer\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cquestion\u003eall it\u0027s gonna take\u003c/question\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003canswer\u003eDefault answer for default question lmao\u003c/answer\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c/decks\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003cdecks\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003cname\u003eAlgebra\u003c/name\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c/decks\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003cdecks\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003cname\u003eBacon Salad Recipe\u003c/name\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c/decks\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003cdecks\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003cname\u003eCalculus\u003c/name\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c/decks\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003cdecks\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003cname\u003eDarwinian Studies\u003c/name\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c/decks\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003cdecks\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003cname\u003eEpistemology\u003c/name\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c/decks\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cdecks\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBaby there\u003c/name\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cquestion\u003eAn\u003c/question\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003canswer\u003eEmpty\u003c/answer\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cquestion\u003eStreet\u003c/question\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003canswer\u003eAn\u003c/answer\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cquestion\u003eEmpty\u003c/question\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003canswer\u003eHouse\u003c/answer\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cquestion\u003eA\u003c/question\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003canswer\u003eHole\u003c/answer\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cquestion\u003eInside\u003c/question\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003canswer\u003eMy\u003c/answer\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cquestion\u003eHeart\u003c/question\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003canswer\u003eI am\u003c/answer\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cquestion\u003eAll\u003c/question\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003canswer\u003eAlone\u003c/answer\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cquestion\u003eA million\u003c/question\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003canswer\u003eDefault answer for default question lmao\u003c/answer\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cquestion\u003edreams is\u003c/question\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003canswer\u003eDefault answer for default question lmao\u003c/answer\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cquestion\u003eall it\u0027s gonna take\u003c/question\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003canswer\u003eDefault answer for default question lmao\u003c/answer\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/decks\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cdecks\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eis nothing\u003c/name\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/decks\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cdecks\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eholding me back\u003c/name\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/decks\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003c/anakin\u003e"
      }
    ],
    "authorContributionMap": {
      "tomforge": 48,
      "-": 61
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidDeckField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003cdeck\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003cname\u003e \u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003cquestion\u003eHow is\u003c/question\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003canswer\u003eGamora\u003c/answer\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003c/deck\u003e"
      }
    ],
    "authorContributionMap": {
      "tomforge": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingDeckField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003cdeck\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003cquestion\u003eHow is\u003c/question\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003canswer\u003eGamora\u003c/answer\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003c/deck\u003e"
      }
    ],
    "authorContributionMap": {
      "tomforge": 7
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAnakin.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003canakin\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003cdecks\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003cname\u003eVive\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003cquestion\u003eAux armes\u003c/question\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003canswer\u003ecitoyens\u003c/answer\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003cquestion\u003eFormez\u003c/question\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003canswer\u003evos bataillons\u003c/answer\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c/decks\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003cdecks\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003cname\u003eLa\u003c/name\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003cquestion\u003eMarchons\u003c/question\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003canswer\u003emarchons\u003c/answer\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003cquestion\u003eQu\u0027un\u003c/question\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003canswer\u003esang impur\u003c/answer\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c/decks\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003cdecks\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003cname\u003eFrance\u003c/name\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003ccards\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003cquestion\u003eAbreuve\u003c/question\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            \u003canswer\u003enos sillons\u003c/answer\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003c/cards\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c/decks\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003c/anakin\u003e"
      }
    ],
    "authorContributionMap": {
      "tomforge": 32
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validDeck.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003cdeck\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003cname\u003eQui Gon Jinn\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003cquestion\u003eHow is\u003c/question\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \u003canswer\u003eGamora\u003c/answer\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "\u003c/deck\u003e"
      }
    ],
    "authorContributionMap": {
      "tomforge": 8
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CardCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Provides a handle to a card card in the card list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class CardCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final String QUESTION_FIELD_ID \u003d \"#question\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final String ANSWER_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private final Label questionLabel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public CardCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        questionLabel \u003d getChildNode(QUESTION_FIELD_ID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return questionLabel.getText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns true if this handle contains {@code deck}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public boolean equals(Card card) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return getQuestion().equals(card.getQuestion().fullQuestion);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 39,
      "truongthanh2606": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CardListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Provides a handle for {@code CardListPanel} containing the list of {@code CardCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class CardListPanelHandle extends NodeHandle\u003cListView\u003cCard\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String CARD_LIST_VIEW_ID \u003d \"#cardListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private Optional\u003cCard\u003e lastRememberedSelectedCardCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public CardListPanelHandle(ListView\u003cCard\u003e cardListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        super(cardListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns a handle to the selected {@code CardCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public CardCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cCard\u003e selectedCardList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (selectedCardList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new AssertionError(\"Card list size expected 1.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            .map(CardCardHandle::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            .filter(handle -\u003e handle.equals(selectedCardList.get(0)))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Navigates the listview to display {@code card}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void navigateToCard(Card card) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (!getRootNode().getItems().contains(card)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new IllegalArgumentException(\"Card does not exist.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            getRootNode().scrollTo(card);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Selects the {@code CardCard} at {@code index} in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns the card card handle of a card associated with the {@code index} in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public CardCardHandle getCardCardHandle(int index) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            .map(CardCardHandle::new)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            .filter(handle -\u003e handle.equals(getAnakinCard(index)))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private Card getAnakinCard(int index) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Remembers the selected {@code CardCard} in the list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void rememberSelectedCardCard() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            lastRememberedSelectedCardCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            lastRememberedSelectedCardCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns true if the selected {@code CardCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * {@code rememberSelectedCardCard()} call."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public boolean isSelectedCardCardChanged() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return lastRememberedSelectedCardCard.isPresent();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return !lastRememberedSelectedCardCard.isPresent()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                || !lastRememberedSelectedCardCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 150,
      "truongthanh2606": 9,
      "lessthanfree": 2
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/DeckCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Provides a handle to a deck card in the deck list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class DeckCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public DeckCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns true if this handle contains {@code deck}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public boolean equals(Deck deck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return getName().equals(deck.getName().fullName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 37,
      "truongthanh2606": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/DeckListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Provides a handle for {@code DeckListPanel} containing the list of {@code DeckCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class DeckListPanelHandle extends NodeHandle\u003cListView\u003cDeck\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static final String DECK_LIST_VIEW_ID \u003d \"#deckListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private Optional\u003cDeck\u003e lastRememberedSelectedDeckCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public DeckListPanelHandle(ListView\u003cDeck\u003e deckListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        super(deckListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns a handle to the selected {@code DeckCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public DeckCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cDeck\u003e selectedDeckList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (selectedDeckList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new AssertionError(\"Deck list size expected 1.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            .map(DeckCardHandle::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            .filter(handle -\u003e handle.equals(selectedDeckList.get(0)))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns the index of the selected deck card."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns true if a deck card is currently selected."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cDeck\u003e selectedDeckCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (selectedDeckCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return !selectedDeckCardsList.isEmpty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Navigates the listview to display {@code deck}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void navigateToCard(Deck deck) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (!getRootNode().getItems().contains(deck)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new IllegalArgumentException(\"Deck does not exist.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            getRootNode().scrollTo(deck);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Selects the {@code DeckCard} at {@code index} in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns the deck card handle of a deck associated with the {@code index} in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * @throws IllegalStateException if the selected deck card is currently not in the scene graph."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public DeckCardHandle getDeckCardHandle(int index) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            .map(DeckCardHandle::new)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            .filter(handle -\u003e handle.equals(getAnakinDeck(index)))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private Deck getAnakinDeck(int index) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns all deck card nodes in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Deck card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Remembers the selected {@code DeckCard} in the list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void rememberSelectedDeckCard() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cDeck\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            lastRememberedSelectedDeckCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            lastRememberedSelectedDeckCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns true if the selected {@code DeckCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * {@code rememberSelectedDeckCard()} call."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public boolean isSelectedDeckCardChanged() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cDeck\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return lastRememberedSelectedDeckCard.isPresent();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return !lastRememberedSelectedDeckCard.isPresent()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                || !lastRememberedSelectedDeckCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 150,
      "truongthanh2606": 9,
      "lessthanfree": 2
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/DeckReviewCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Provides a handle to a deck review card."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class DeckReviewCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final String TEXT_FIELD_ID \u003d \"#text\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private final Label textLabel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private final boolean showAnswer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public DeckReviewCardHandle(Node cardNode, boolean showAnswer) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        textLabel \u003d getChildNode(TEXT_FIELD_ID);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        this.showAnswer \u003d showAnswer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return textLabel.getText();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns true if this handle contains {@code card}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public boolean equals(Card card) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (showAnswer) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return getText().equals(card.getAnswer().fullAnswer);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return getText().equals(card.getQuestion().fullQuestion);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 37
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private final DeckListPanelHandle deckListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private final CardListPanelHandle cardListPanel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        deckListPanel \u003d new DeckListPanelHandle(getChildNode(DeckListPanelHandle.DECK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        cardListPanel \u003d new CardListPanelHandle(getChildNode(CardListPanelHandle.CARD_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // TODO: Add deck edit screen and deck review screen"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public DeckListPanelHandle getDeckListPanel() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return deckListPanel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public CardListPanelHandle getCardListPanel() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return cardListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 12,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.ReadOnlyAnakin;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.storage.XmlSerializableAnakin;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    protected Supplier\u003cReadOnlyAnakin\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAnakin\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            createDataFileWithData(new XmlSerializableAnakin(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        userPrefs.setAnakinFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Returns a defensive copy of Anakin data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public Anakin readStorageAnakin() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            return new Anakin(storage.readAnakin().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            throw new AssertionError(\"Data is not in the Anakin format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return storage.getAnakinFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAnakin()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        ModelHelper.setFilteredDeckList(copy, model.getFilteredDeckList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        ModelHelper.setFilteredCardList(copy, model.getFilteredCardList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 14,
      "yujiatay": 1,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Anakin\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.storage.XmlAdaptedCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.storage.XmlAdaptedDeck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.storage.XmlSerializableAnakin;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.testutil.AnakinBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAnakin.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final Path MISSING_DECK_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingDeckField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final Path INVALID_DECK_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidDeckField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final Path VALID_DECK_FILE \u003d TEST_DATA_FOLDER.resolve(\"validDeck.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAnakin.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final String INVALID_NAME \u003d \" \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final String VALID_NAME \u003d \"Qui Gon Jinn\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static final List\u003cXmlAdaptedCard\u003e VALID_CARDS \u003d Collections"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        .singletonList(new XmlAdaptedCard(\"How is\", \"Gamora\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlUtil.getDataFromFile(null, Anakin.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, Anakin.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, Anakin.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Anakin dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAnakin.class).toModelType();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(3, dataFromFile.getDeckList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void xmlAdaptedDeckFromFile_fileWithMissingDeckField_validResult() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlAdaptedDeck actualDeck \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            MISSING_DECK_FIELD_FILE, XmlAdaptedDeckWithRootElement.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlAdaptedDeck expectedDeck \u003d new XmlAdaptedDeck("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            null, VALID_CARDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(expectedDeck, actualDeck);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void xmlAdaptedDeckFromFile_fileWithInvalidDeckField_validResult() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlAdaptedDeck actualDeck \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            INVALID_DECK_FIELD_FILE, XmlAdaptedDeckWithRootElement.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlAdaptedDeck expectedDeck \u003d new XmlAdaptedDeck("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            INVALID_NAME, VALID_CARDS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(expectedDeck, actualDeck);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void xmlAdaptedDeckFromFile_fileWithValidDeck_validResult() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlAdaptedDeck actualDeck \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            VALID_DECK_FILE, XmlAdaptedDeckWithRootElement.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlAdaptedDeck expectedDeck \u003d new XmlAdaptedDeck("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            VALID_NAME, VALID_CARDS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(expectedDeck, actualDeck);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlUtil.saveDataToFile(null, new Anakin());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new Anakin());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlSerializableAnakin dataToWrite \u003d new XmlSerializableAnakin(new Anakin());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlSerializableAnakin dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAnakin.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        AnakinBuilder builder \u003d new AnakinBuilder(new Anakin());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAnakin("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            builder.withDeck(new DeckBuilder().build()).build());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAnakin.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * XmlAdaptedDeck}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @XmlRootElement(name \u003d \"deck\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static class XmlAdaptedDeckWithRootElement extends XmlAdaptedDeck {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 46,
      "truongthanh2606": 3,
      "lessthanfree": 2,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/AutocompleterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.NewDeckCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.parser.Autocompleter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "public class AutocompleterTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private Autocompleter autocompleter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        autocompleter \u003d new Autocompleter();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public void autocompleter_is_completable() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        final String completableCommand \u003d \"newd\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        final String uncompletableCommand \u003d \"dwen\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertTrue(autocompleter.isAutocompletable(completableCommand));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertFalse(autocompleter.isAutocompletable(uncompletableCommand));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public void autocompleter_completion() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        final String completableCommand \u003d \"newd\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertEquals(autocompleter.getAutocompletion(completableCommand), NewDeckCommand.AUTOCOMPLETE_TEXT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private Logic anakinLogic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        String deleteCommand \u003d \"deldeck 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS_DECK, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public void getFilteredDeckList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        anakinLogic.getFilteredDeckList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Model expectedModel) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " expected: \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * - the internal Model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            CommandResult result \u003d anakinLogic.execute(inputCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            CommandResult result \u003d anakinLogic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 23,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddDeckIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_DECK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakin;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " * Contains integration tests (interaction with the AddressbookModel) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "public class AddDeckIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private Model anakinModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        anakinModel \u003d new ModelManager(getTypicalAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public void execute_newDeck_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Model expectedAnakinModel \u003d new ModelManager(anakinModel.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        expectedAnakinModel.addDeck(validDeck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedAnakinModel.commitAnakin(NewDeckCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandSuccess(new NewDeckCommand(validDeck), anakinModel, commandHistory,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                String.format(NewDeckCommand.MESSAGE_SUCCESS, validDeck), expectedAnakinModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Deck deckInList \u003d anakinModel.getAnakin().getDeckList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandFailure(new NewDeckCommand(deckInList), anakinModel, commandHistory, MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 43,
      "yujiatay": 3,
      "truongthanh2606": 1,
      "lessthanfree": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ChangeDeckCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.logic.commands.ChangeDeckCommand.EXIT_DECK_ARGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.logic.commands.ChangeDeckCommand.MESSAGE_CD_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.logic.commands.ChangeDeckCommand.MESSAGE_EXIT_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showDeckAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakin;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakinInDeck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_DECK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * {@code ChangeDeckCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class ChangeDeckCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckToEnter \u003d model.getFilteredDeckList().get(INDEX_FIRST_DECK.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ChangeDeckCommand cdCommand \u003d new ChangeDeckCommand(INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CD_SUCCESS, deckToEnter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.getIntoDeck(deckToEnter);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(ChangeDeckCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(cdCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDeckList().size() + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ChangeDeckCommand cdCommand \u003d new ChangeDeckCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandFailure(cdCommand, model, commandHistory,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckToEnter \u003d model.getFilteredDeckList().get(INDEX_FIRST_DECK.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ChangeDeckCommand cdCommand \u003d new ChangeDeckCommand(INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CD_SUCCESS, deckToEnter);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.getIntoDeck(deckToEnter);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(ChangeDeckCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(cdCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_validEnterDeck_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Model actualModel \u003d new ModelManager(this.model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckToEnter \u003d this.model.getFilteredDeckList().get(INDEX_FIRST_DECK.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ChangeDeckCommand cdCommand \u003d new ChangeDeckCommand(INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CD_SUCCESS, deckToEnter);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // Enter deck so that cdCommand can leave it"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Model expectedModel \u003d new ModelManager(actualModel.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.getIntoDeck(deckToEnter);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(ChangeDeckCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(cdCommand, actualModel, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_validLeaveDeck_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Model actualModel \u003d new ModelManager(getTypicalAnakinInDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ChangeDeckCommand cdCommand \u003d new ChangeDeckCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXIT_SUCCESS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Model expectedModel \u003d new ModelManager(actualModel.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.getOutOfDeck();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(ChangeDeckCommand.COMMAND_WORD + EXIT_DECK_ARGS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(cdCommand, actualModel, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_invalidLeaveDeck_throwsCommandException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ChangeDeckCommand cdCommand \u003d new ChangeDeckCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        String expectedException \u003d String.format(Messages.MESSAGE_NOT_INSIDE_DECK);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandFailure(cdCommand, model, commandHistory, expectedException);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        showDeckAtIndex(model, INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_DECK;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAnakin().getDeckList().size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ChangeDeckCommand cdCommand \u003d new ChangeDeckCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandFailure(cdCommand, model, commandHistory,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ChangeDeckCommand cdFirstCommand \u003d new ChangeDeckCommand(INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ChangeDeckCommand cdSecondCommand \u003d new ChangeDeckCommand(INDEX_SECOND_DECK);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(cdFirstCommand.equals(cdFirstCommand));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ChangeDeckCommand cdFirstCommandCopy \u003d new ChangeDeckCommand(INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(cdFirstCommand.equals(cdFirstCommandCopy));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(cdFirstCommand.equals(1));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(cdFirstCommand.equals(null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // different deck -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(cdFirstCommand.equals(cdSecondCommand));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private void showNoDeck(Model model) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.updateFilteredDeckList(p -\u003e false);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(model.getFilteredDeckList().isEmpty());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 10,
      "truongthanh2606": 147,
      "lessthanfree": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClassifyCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_REVIEWING_DECK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakinInDeckReview;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Performance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class ClassifyCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAnakinInDeckReview(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void execute_classify_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        int currentIndex \u003d model.getIndexOfCurrentCard();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Card card \u003d model.getFilteredCardList().get(currentIndex);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Card editedCard \u003d Card.classifyCard(card, Performance.EASY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        String expectedMessage \u003d String.format(ClassifyCommand.MESSAGE_CLASSIFICATION_SUCCESS,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                Performance.EASY, editedCard);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        expectedModel.updateCard(model.getFilteredCardList().get(currentIndex), editedCard);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCommandSuccess(new ClassifyCommand(Performance.EASY), model, commandHistory, expectedMessage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void execute_classify_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        model.endReview();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCommandFailure(new ClassifyCommand(Performance.EASY), model, commandHistory, MESSAGE_NOT_REVIEWING_DECK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakin;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void execute_emptyAnakin_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void execute_nonEmptyAnakin_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        expectedModel.resetData(new Anakin());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 12,
      "truongthanh2606": 2,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.EditDeckCommand.EditDeckDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.deck.CardQuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.DeckNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.Performance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.testutil.EditDeckDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.testutil.TypicalCards;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String VALID_NAME \u003d \"My Deck\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String INVALID_NAME \u003d \"B@d_Deck_Name\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String VALID_NAME_JOHN \u003d \"John Phua\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String VALID_NAME_DECK_A \u003d \"My Deck A\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String VALID_NAME_DECK_B \u003d \"Your deck\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final Deck VALID_DECK_A \u003d new DeckBuilder().withName(VALID_NAME_DECK_A).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final Deck VALID_DECK_B \u003d new DeckBuilder().withName(VALID_NAME_DECK_B).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String VALID_DECK_NAME_A_ARGS \u003d \" \" + PREFIX_NAME + VALID_NAME_DECK_A;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String VALID_DECK_NAME_B_ARGS \u003d \" \" + PREFIX_NAME + VALID_NAME_DECK_B;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String INVALID_DECK_NAME_ARGS \u003d \" \" + PREFIX_NAME + \" Bad_Deck_Name!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String VALID_QUESTION_A \u003d \"Another valid stuff\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String VALID_QUESTION_B \u003d \"Need another valid question\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final Performance VALID_PERFORMANCE_A \u003d Performance.EASY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String VALID_ANSWER_A \u003d \"Valid question needs a valid answer\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String VALID_ANSWER_B \u003d \"Whateverrrrrrr\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String INVALID_QUESTION \u003d \" \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String INVALID_ANSWER \u003d \" \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String VALID_CARD_A_ARGS \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_A + \" \" + PREFIX_ANSWER"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        + VALID_ANSWER_A;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String VALID_CARD_QUESTION_ARGS \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_A;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String VALID_CARD_ANSWER_ARGS \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_A;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String INVALID_CARD_QUESTION_ARGS \u003d \" \" + PREFIX_QUESTION + INVALID_QUESTION;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static final String INVALID_CARD_ANSWER_ARGS \u003d \" \" + PREFIX_ANSWER + INVALID_ANSWER;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final List\u003cCard\u003e VALID_CARD_LIST \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final List\u003cCard\u003e TYPICAL_CARD_LIST \u003d TypicalCards.getTypicalCards();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final EditDeckDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final EditDeckDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        DESC_AMY \u003d new EditDeckDescriptorBuilder().withName(VALID_NAME_DECK_A)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            .withCards(TYPICAL_CARD_LIST).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        DESC_BOB \u003d new EditDeckDescriptorBuilder().withName(VALID_NAME_DECK_B)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            .withCards(TYPICAL_CARD_LIST).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static void assertCommandSuccess(Command command,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * - the address book and the filtered deck list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static void assertCommandFailure(Command command,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String expectedMessage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Anakin expectedAnakin \u003d new Anakin(actualModel.getAnakin());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cDeck\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredDeckList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            assertEquals(expectedAnakin, actualModel.getAnakin());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredDeckList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the deck at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * {@code model}\u0027s Anakin."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static void showDeckAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredDeckList().size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deck \u003d model.getFilteredDeckList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        final String[] splitName \u003d deck.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        model.updateFilteredDeckList("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            new DeckNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(1, model.getFilteredDeckList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the CARD at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * {@code model}\u0027s current deck."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static void showCardAtIndexOfCurrentDeck(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCardList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card card \u003d model.getFilteredCardList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        final String[] splitName \u003d card.getQuestion().fullQuestion.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.updateFilteredCardList("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                new CardQuestionContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertEquals(1, model.getFilteredCardList().size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Deletes the first deck in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static void deleteFirstDeck(Model model) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deck \u003d model.getFilteredDeckList().get(0);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        model.deleteDeck(deck);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.commitAnakin(DeleteDeckCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 14,
      "yujiatay": 4,
      "tomforge": 2,
      "truongthanh2606": 37,
      "lessthanfree": 40,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCardCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakinInDeck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * {@code DeleteCardCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class DeleteCardCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAnakinInDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void getIntoFirstDeck() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.getIntoDeck(model.getFilteredDeckList().get(0));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card cardToDelete \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        DeleteCardCommand deleteCommand \u003d new DeleteCardCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCardCommand.MESSAGE_DELETE_CARD_SUCCESS, cardToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.deleteCard(cardToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(DeleteCardCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCardList().size() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        DeleteCardCommand deleteCommand \u003d new DeleteCardCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        //showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card cardToDelete \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        DeleteCardCommand deleteCommand \u003d new DeleteCardCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCardCommand.MESSAGE_DELETE_CARD_SUCCESS, cardToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.deleteCard(cardToDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(DeleteCardCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        showNoCard(expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        DeleteCardCommand deleteFirstCommand \u003d new DeleteCardCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        DeleteCardCommand deleteSecondCommand \u003d new DeleteCardCommand(INDEX_SECOND_CARD);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        DeleteCardCommand deleteFirstCommandCopy \u003d new DeleteCardCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private void showNoCard(Model model) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.updateFilteredCardList(p -\u003e false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(model.getFilteredCardList().isEmpty());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 7,
      "truongthanh2606": 97,
      "lessthanfree": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteDeckCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showDeckAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakin;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_DECK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Contains integration tests (interaction with the AddressbookModel) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * {@code DeleteDeckCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class DeleteDeckCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckToDelete \u003d model.getFilteredDeckList().get(INDEX_FIRST_DECK.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        DeleteDeckCommand deleteCommand \u003d new DeleteDeckCommand(INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteDeckCommand.MESSAGE_DELETE_DECK_SUCCESS, deckToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        expectedModel.deleteDeck(deckToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(DeleteDeckCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDeckList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        DeleteDeckCommand deleteCommand \u003d new DeleteDeckCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        showDeckAtIndex(model, INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckToDelete \u003d model.getFilteredDeckList().get(INDEX_FIRST_DECK.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        DeleteDeckCommand deleteCommand \u003d new DeleteDeckCommand(INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteDeckCommand.MESSAGE_DELETE_DECK_SUCCESS, deckToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        expectedModel.deleteDeck(deckToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(DeleteDeckCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        showNoDeck(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        showDeckAtIndex(model, INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_DECK;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAnakin().getDeckList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        DeleteDeckCommand deleteCommand \u003d new DeleteDeckCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        DeleteDeckCommand deleteFirstCommand \u003d new DeleteDeckCommand(INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        DeleteDeckCommand deleteSecondCommand \u003d new DeleteDeckCommand(INDEX_SECOND_DECK);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        DeleteDeckCommand deleteFirstCommandCopy \u003d new DeleteDeckCommand(INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // different deck -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private void showNoDeck(Model model) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        model.updateFilteredDeckList(p -\u003e false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(model.getFilteredDeckList().isEmpty());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 1,
      "yujiatay": 8,
      "truongthanh2606": 25,
      "lessthanfree": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCardCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.logic.commands.UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakinInDeck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.EditCardCommand.EditCardDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.deck.Answer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.deck.Question;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * EditCardCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class EditCardCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAnakinInDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void getIntoFirstDeck() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.getIntoDeck(model.getFilteredDeckList().get(0));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card editedCard \u003d new Card(new Question(\"sample\"), new Answer(\"sample\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedCard).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditCardCommand editCardCommand \u003d new EditCardCommand(INDEX_FIRST_CARD, descriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        expectedModel.updateCard(model.getFilteredCardList().get(INDEX_FIRST_CARD.getOneBased()), editedCard);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(EditCardCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(editCardCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Index indexLastCard \u003d Index.fromOneBased(model.getFilteredCardList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card lastCard \u003d model.getFilteredCardList().get(indexLastCard.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        CardBuilder cardInList \u003d new CardBuilder(lastCard);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card editedCard \u003d cardInList"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            .withQuestion(VALID_QUESTION_B).withAnswer(VALID_ANSWER_A).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            .withQuestion(VALID_QUESTION_B)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .withAnswer(VALID_ANSWER_A).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditCardCommand editCardCommand \u003d new EditCardCommand(indexLastCard, descriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Anakin(model.getAnakin()), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.updateCard(lastCard, editedCard);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(EditCardCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(editCardCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditCardCommand editCardCommand \u003d new EditCardCommand(INDEX_FIRST_CARD, new EditCardDescriptor());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card editedCard \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Anakin(model.getAnakin()), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(EditCardCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(editCardCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        //showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card cardInFilteredList \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card editedCard \u003d new CardBuilder(cardInFilteredList).withQuestion(VALID_QUESTION_A).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditCardCommand editCardCommand \u003d new EditCardCommand(INDEX_FIRST_CARD,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_A).build());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Anakin(model.getAnakin()), new UserPrefs());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.updateCard(model.getFilteredCardList().get(0), editedCard);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(EditCardCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(editCardCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void execute_duplicateAnakinCardUnfilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card firstCard \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(firstCard).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditCardCommand editCardCommand \u003d new EditCardCommand(INDEX_SECOND_CARD, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandFailure(editCardCommand, model, commandHistory, EditCardCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_duplicateCardFilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        //showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // edit card in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card cardInList \u003d model.getAnakin().getCardList().get(INDEX_SECOND_CARD.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditCardCommand editCardCommand \u003d new EditCardCommand(INDEX_FIRST_CARD,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            new EditCardDescriptorBuilder(cardInList).build());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandFailure(editCardCommand, model, commandHistory, EditCardCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void execute_invalidAnakinCardIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCardList().size() + 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_A).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditCardCommand editCardCommand \u003d new EditCardCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandFailure(editCardCommand, model, commandHistory,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    // TODO: When filter functions are available write filter test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //    public void execute_invalidAnakinCardIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //        Index outOfBoundIndex \u003d INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAnakin().getCardList().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    //        EditCardCommand editCardCommand \u003d new EditCardCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //                new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_A).build());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    //        assertCommandFailure(editCardCommand, model, commandHistory, AddressbookMessages"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    // .MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card editedCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card cardToEdit \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedCard).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditCardCommand editCardCommand \u003d new EditCardCommand(INDEX_FIRST_CARD, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Anakin(model.getAnakin()), new UserPrefs());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.updateCard(cardToEdit, editedCard);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(EditCardCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // edit -\u003e first card edited"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        editCardCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // undo -\u003e reverts anakin back to previous state and filtered card list to show all cards"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        expectedModel.undoAnakin();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            UndoCommand.MESSAGE_SUCCESS + EditCardCommand.COMMAND_WORD, expectedModel);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // redo -\u003e same first card edited again"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        expectedModel.redoAnakin();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCommandSuccess(new seedu.address.logic.commands.RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            RedoCommand.MESSAGE_SUCCESS + EditCardCommand.COMMAND_WORD, expectedModel);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCardList().size() + 1);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_A).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditCardCommand editCardCommand \u003d new EditCardCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandFailure(editCardCommand, model, commandHistory,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCommandFailure(new seedu.address.logic.commands.RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            seedu.address.logic.commands.RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * 1. Edits a {@code Card} from a filtered list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited card in the"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the card object regardless of indexing."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameAnakinCardEdited() throws Exception {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card editedCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedCard).build();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditCardCommand editCardCommand \u003d new EditCardCommand(INDEX_FIRST_CARD, descriptor);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Anakin(model.getAnakin()), new UserPrefs());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        //  showCardAtIndex(model, INDEX_SECOND_CARD);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card cardToEdit \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.updateCard(cardToEdit, editedCard);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(EditCardCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // edit -\u003e edits second card in unfiltered card list / first card in filtered card list"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        editCardCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // undo -\u003e reverts anakin back to previous state and filtered card list to show all cards"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        expectedModel.undoAnakin();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS + EditCardCommand.COMMAND_WORD, expectedModel);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // assertNotEquals(model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased()), cardToEdit);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // redo -\u003e edits same second card in unfiltered card list"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        expectedModel.redoAnakin();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS + EditCardCommand.COMMAND_WORD, expectedModel);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditCardDescriptor cardDesc \u003d new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .withAnswer(VALID_ANSWER_A).withQuestion(VALID_QUESTION_A)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditCardDescriptor cardDescB \u003d new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .withAnswer(VALID_ANSWER_B).withQuestion(VALID_QUESTION_B)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        final EditCardCommand standardCommand \u003d new EditCardCommand(INDEX_FIRST_CARD, cardDesc);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditCardDescriptor copyDescriptor \u003d new EditCardDescriptor(cardDesc);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditCardCommand commandWithSameValues \u003d new EditCardCommand(INDEX_FIRST_CARD, copyDescriptor);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCardCommand(INDEX_SECOND_CARD, cardDesc)));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCardCommand(INDEX_FIRST_CARD, cardDescB)));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 11,
      "yujiatay": 14,
      "truongthanh2606": 99,
      "lessthanfree": 147
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditDeckCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_DECK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EDIT_DECK_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPICAL_CARD_LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_JOHN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showDeckAtIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakin;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_DECK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.testutil.EditDeckDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * Contains integration tests (interaction with the AddressbookModel, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class EditDeckCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck editedDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditDeckCommand.EditDeckDescriptor descriptor \u003d new EditDeckDescriptorBuilder(editedDeck).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(INDEX_FIRST_DECK, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_DECK_SUCCESS, editedDeck);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.updateDeck(model.getFilteredDeckList().get(0), editedDeck);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(EditDeckCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Index indexLastAnakinDeck \u003d Index.fromOneBased(model.getFilteredDeckList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck lastDeck \u003d model.getFilteredDeckList().get(indexLastAnakinDeck.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        DeckBuilder deckInList \u003d new DeckBuilder(lastDeck);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck editedDeck \u003d deckInList.withName(VALID_NAME_JOHN).withCards(TYPICAL_CARD_LIST).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditDeckCommand.EditDeckDescriptor descriptor \u003d new EditDeckDescriptorBuilder().withName(VALID_NAME_JOHN)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            .withCards(TYPICAL_CARD_LIST).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(indexLastAnakinDeck, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_DECK_SUCCESS, editedDeck);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.updateDeck(lastDeck, editedDeck);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(EditDeckCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(INDEX_FIRST_DECK, new EditDeckCommand.EditDeckDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck editedDeck \u003d model.getFilteredDeckList().get(INDEX_FIRST_DECK.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_DECK_SUCCESS, editedDeck);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(EditDeckCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        showDeckAtIndex(model, INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckInFilteredList \u003d model.getFilteredDeckList().get(INDEX_FIRST_DECK.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck editedDeck \u003d new DeckBuilder(deckInFilteredList).withName(VALID_NAME_JOHN).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(INDEX_FIRST_DECK,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            new EditDeckDescriptorBuilder().withName(VALID_NAME_JOHN).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_DECK_SUCCESS, editedDeck);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.updateDeck(model.getFilteredDeckList().get(0), editedDeck);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(EditDeckCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_duplicateAnakinDeckUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck firstDeck \u003d model.getFilteredDeckList().get(INDEX_FIRST_DECK.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditDeckCommand.EditDeckDescriptor descriptor \u003d new EditDeckDescriptorBuilder(firstDeck).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(INDEX_SECOND_DECK, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_duplicateAnakinDeckFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        showDeckAtIndex(model, INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // edit deck in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckInList \u003d model.getAnakin().getDeckList().get(INDEX_SECOND_DECK.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(INDEX_FIRST_DECK,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            new EditDeckDescriptorBuilder(deckInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_invalidAnakinDeckIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDeckList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditDeckCommand.EditDeckDescriptor descriptor \u003d new EditDeckDescriptorBuilder().withName(VALID_NAME_JOHN)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_invalidAnakinDeckIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        showDeckAtIndex(model, INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_DECK;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAnakin().getDeckList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            new EditDeckDescriptorBuilder().withName(VALID_NAME_JOHN).build());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck editedDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckToEdit \u003d model.getFilteredDeckList().get(INDEX_FIRST_DECK.getZeroBased());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditDeckCommand.EditDeckDescriptor descriptor \u003d new EditDeckDescriptorBuilder(editedDeck).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(INDEX_FIRST_DECK, descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.updateDeck(deckToEdit, editedDeck);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(EditDeckCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // edit -\u003e first deck edited"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // undo -\u003e reverts anakin back to previous state and filtered deck list to show all decks"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.undoAnakin();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            UndoCommand.MESSAGE_SUCCESS + EditDeckCommand.COMMAND_WORD, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // redo -\u003e same first deck edited again"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.redoAnakin();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            seedu.address.logic.commands.RedoCommand.MESSAGE_SUCCESS + EditDeckCommand.COMMAND_WORD, expectedModel);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDeckList().size() + 1);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditDeckCommand.EditDeckDescriptor descriptor \u003d new EditDeckDescriptorBuilder().withName(VALID_NAME_JOHN)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCommandFailure(new seedu.address.logic.commands.UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            seedu.address.logic.commands.UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            seedu.address.logic.commands.RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * 1. Edits a {@code Deck} from a filtered list."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited deck in the"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the deck object regardless of indexing."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameAnakinDeckEdited() throws Exception {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck editedDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditDeckCommand.EditDeckDescriptor descriptor \u003d new EditDeckDescriptorBuilder(editedDeck).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(INDEX_FIRST_DECK, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        showDeckAtIndex(model, INDEX_SECOND_DECK);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckToEdit \u003d model.getFilteredDeckList().get(INDEX_FIRST_DECK.getZeroBased());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.updateDeck(deckToEdit, editedDeck);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.commitAnakin(EditDeckCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // edit -\u003e edits second deck in unfiltered deck list / first deck in filtered deck list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // undo -\u003e reverts anakin back to previous state and filtered deck list to show all decks"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.undoAnakin();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCommandSuccess(new seedu.address.logic.commands.UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            UndoCommand.MESSAGE_SUCCESS + EditDeckCommand.COMMAND_WORD, expectedModel);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertNotEquals(model.getFilteredDeckList().get(INDEX_FIRST_DECK.getZeroBased()), deckToEdit);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // redo -\u003e edits same second deck in unfiltered deck list"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.redoAnakin();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            seedu.address.logic.commands.RedoCommand.MESSAGE_SUCCESS + EditDeckCommand.COMMAND_WORD, expectedModel);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        final EditDeckCommand standardCommand \u003d new EditDeckCommand(INDEX_FIRST_DECK, DESC_AMY);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditDeckCommand.EditDeckDescriptor copyDescriptor \u003d new EditDeckCommand.EditDeckDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditDeckCommand commandWithSameValues \u003d new EditDeckCommand(INDEX_FIRST_DECK, copyDescriptor);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertFalse(standardCommand.equals(new EditDeckCommand(INDEX_SECOND_DECK, DESC_AMY)));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertFalse(standardCommand.equals(new EditDeckCommand(INDEX_FIRST_DECK, DESC_BOB)));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 2,
      "yujiatay": 16,
      "truongthanh2606": 208,
      "lessthanfree": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EndReviewCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_REVIEWING_DECK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakinInDeck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.TypicalCards;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * {@code EndReviewCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class EndReviewCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAnakinInDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void executeEndReviewSuccess() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckToReview \u003d TypicalCards.getTypicalDeck();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.getIntoDeck(deckToReview);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.startReview();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EndReviewCommand endReviewCommand \u003d new EndReviewCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(EndReviewCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.endReview();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAnakin(EndReviewCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(endReviewCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void executeEndReviewFail() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckToReview \u003d TypicalCards.getTypicalDeck();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.getIntoDeck(deckToReview);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EndReviewCommand endReviewCommand \u003d new EndReviewCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_NOT_REVIEWING_DECK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandFailure(endReviewCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truongthanh2606": 50,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportDeckCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showDeckAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakin;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_DECK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.DeckImportException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.storage.portmanager.PortManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.storage.portmanager.Porter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * Contains integration tests (interaction with the Anakin) and unit tests for"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * {@code ExportDeckCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "public class ExportDeckCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Deck deckToExport \u003d model.getFilteredDeckList().get(INDEX_FIRST_DECK.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ExportDeckCommand exportCommand \u003d new ExportDeckCommand(INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Porter temp \u003d new PortManagerExportsDeck();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String location \u003d temp.exportDeck(deckToExport);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String expectedMessage \u003d String.format(ExportDeckCommand.MESSAGE_EXPORT_DECK_SUCCESS, deckToExport,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            location);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        expectedModel.exportDeck(deckToExport);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        expectedModel.commitAnakin(ExportDeckCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandSuccess(exportCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDeckList().size() + 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ExportDeckCommand exportCommand \u003d new ExportDeckCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandFailure(exportCommand, model, commandHistory,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        showDeckAtIndex(model, INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Deck deckToExport \u003d model.getFilteredDeckList().get(INDEX_FIRST_DECK.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ExportDeckCommand exportCommand \u003d new ExportDeckCommand(INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String location \u003d makeFilePath(deckToExport.getName().fullName).toAbsolutePath().toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String expectedMessage \u003d String.format(ExportDeckCommand.MESSAGE_EXPORT_DECK_SUCCESS, deckToExport,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        showDeckAtIndex(expectedModel, INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        expectedModel.exportDeck(deckToExport);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        expectedModel.commitAnakin(ExportDeckCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandSuccess(exportCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        showDeckAtIndex(model, INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_DECK;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAnakin().getDeckList().size());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ExportDeckCommand exportCommand \u003d new ExportDeckCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertCommandFailure(exportCommand, model, commandHistory,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ExportDeckCommand exportFirstCommand \u003d new ExportDeckCommand(INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ExportDeckCommand exportSecondCommand \u003d new ExportDeckCommand(INDEX_SECOND_DECK);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(exportFirstCommand.equals(exportFirstCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ExportDeckCommand exportFirstCommandCopy \u003d new ExportDeckCommand(INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(exportFirstCommand.equals(exportFirstCommandCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertFalse(exportFirstCommand.equals(1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertFalse(exportFirstCommand.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // different deck -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertFalse(exportFirstCommand.equals(exportSecondCommand));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static class PortManagerExportsDeck implements Porter {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public String exportDeck(Deck deck) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return makeFilePath(deck.getName().fullName).toAbsolutePath().toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public Deck importDeck(String stringPath) throws DeckImportException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Converts a string to a full Path."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static Path makeFilePath(String name) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Path baseFilePath \u003d Paths.get(new PortManager().getBfp());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        if (name.length() \u003e 4 \u0026\u0026 name.substring(name.length() - 4).equals(\".xml\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return baseFilePath.resolve(name);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return baseFilePath.resolve(name + \".xml\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 145
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FlipCardCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_REVIEWING_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.FlipCardCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakinInDeckReview;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.ui.FlipCardRequestEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class FlipCardCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAnakinInDeckReview(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAnakinInDeckReview(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void execute_flipcard_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCommandSuccess(new FlipCardCommand(), model, commandHistory, MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof FlipCardRequestEvent);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void execute_flipcard_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        model.endReview();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCommandFailure(new FlipCardCommand(), model, commandHistory, MESSAGE_NOT_REVIEWING_DECK);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportDeckCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FILEPATH_INVALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.storage.XmlSerializableAnakin.MESSAGE_DUPLICATE_DECK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_WITH_CARDS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.ReadOnlyAnakin;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.DeckImportException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.storage.portmanager.PortManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.storage.portmanager.Porter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "public class ImportDeckCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void importDeck_success() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Model testModel \u003d new ModelAlwaysImports();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Deck deckToImport \u003d DECK_WITH_CARDS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ImportDeckCommand importCommand \u003d new ImportDeckCommand(\"Unused\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        CommandResult commandResult \u003d importCommand.execute(testModel, commandHistory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(String.format(ImportDeckCommand.MESSAGE_IMPORT_DECK_SUCCESS, deckToImport),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void importFileCantBeFound_throwsException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Model testModel \u003d new ModelCantFindFile();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String filepath \u003d \"test filepath.xml\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ImportDeckCommand importCommand \u003d new ImportDeckCommand(filepath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_FILEPATH_INVALID, filepath));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        importCommand.execute(testModel, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void importDuplicate_throwsException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Model testModel \u003d new ModelThrowsDe();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Deck deckToImport \u003d DECK_WITH_CARDS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ImportDeckCommand importCommand \u003d new ImportDeckCommand(\"Unused\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        thrown.expectMessage(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        importCommand.execute(testModel, commandHistory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public void resetData(ReadOnlyAnakin anakin) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public boolean hasDeck(Deck target) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public ReadOnlyAnakin getAnakin() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public void updateDeck(Deck target, Deck newdeck) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public void updateCard(Card target, Card newcard) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public void deleteCard(Card card) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public void getOutOfDeck() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public void getIntoDeck(Deck target) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public boolean isReviewingDeck() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public void startReview() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public void endReview() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public int getIndexOfCurrentCard() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public void setIndexOfCurrentCard(int newIndex) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public boolean canUndoAnakin() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public boolean canRedoAnakin() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public String undoAnakin() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public String redoAnakin() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void commitAnakin(String command) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public boolean isInsideDeck() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public String exportDeck(Deck deck) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public Deck importDeck(String filepath) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        public void sort(ModelManager.SortingType type) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * A Model stub that always imports the same deck."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private class ModelAlwaysImports extends ModelStub {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        private final Porter porter \u003d new PortManagerStub();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public Deck importDeck(String filepath) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return porter.importDeck(filepath);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public boolean isReviewingDeck() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void commitAnakin(String command) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            // called by {@code ImportDeckCommand#execute()}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private class ModelCantFindFile extends ModelStub {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        final Porter porter \u003d new PortManagerFileNotFound();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public Deck importDeck(String filepath) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return porter.importDeck(filepath);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public boolean isReviewingDeck() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void commitAnakin(String command) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            // called by {@code ImportDeckCommand#execute()}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private class ModelThrowsDe extends ModelStub {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        final Porter porter \u003d new PortManager();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public Deck importDeck(String filepath) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new DeckImportException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public boolean isReviewingDeck() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void commitAnakin(String command) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            // called by {@code ImportDeckCommand#execute()}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static class PortManagerStub implements Porter {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public String exportDeck(Deck deck) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public Deck importDeck(String stringPath) throws DeckImportException {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return DECK_WITH_CARDS;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static class PortManagerFileNotFound implements Porter {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        private static Path baseFilePath \u003d Paths.get(\"\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public String exportDeck(Deck deck) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public Deck importDeck(String stringPath) throws DeckImportException {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            Path filepath \u003d makeFilePath(stringPath);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new DeckImportException(String.format(MESSAGE_FILEPATH_INVALID, filepath));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "         * Makes a string into a path."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "         */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        private Path makeFilePath(String name) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            if (name.substring(name.length() - 4).equals(\".xml\")) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "                return baseFilePath.resolve(name);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "                return baseFilePath.resolve(name + \".xml\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 2,
      "yujiatay": 40,
      "truongthanh2606": 8,
      "lessthanfree": 284
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showDeckAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static seedu.address.logic.commands.ListCommand.MESSAGE_SUCCESS_PERFORMANCE_CARDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_EASY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_HARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_WITH_CARDS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.THERE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakin;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.CardPerformanceMatchesPerformancesPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.Performance;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model \u003d new ModelManager(getTypicalAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                ListCommand.MESSAGE_SUCCESS_DECK, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.getIntoDeck(DECK_WITH_CARDS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.getIntoDeck(DECK_WITH_CARDS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tomforge"
        },
        "content": "                ListCommand.MESSAGE_SUCCESS_ALL_CARDS, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        showDeckAtIndex(model, INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                ListCommand.MESSAGE_SUCCESS_DECK, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.getIntoDeck(DECK_WITH_CARDS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.getIntoDeck(DECK_WITH_CARDS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        //showCardAtIndexOfCurrentDeck(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tomforge"
        },
        "content": "                ListCommand.MESSAGE_SUCCESS_ALL_CARDS, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void execute_hard_showsHard() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        model.getIntoDeck(THERE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        expectedModel.getIntoDeck(THERE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS_PERFORMANCE_CARDS, \"hard\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        CardPerformanceMatchesPerformancesPredicate hardPredicate \u003d preparePerformancePredicate(Set.of(Performance"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tomforge"
        },
        "content": "                .HARD));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        ListCommand command \u003d new ListCommand(hardPredicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        expectedModel.updateFilteredCardList(hardPredicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(Collections.singletonList(CARD_HARD), model.getFilteredCardList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void execute_easyHard_showsEasyHard() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        model.getIntoDeck(THERE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        expectedModel.getIntoDeck(THERE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        CardPerformanceMatchesPerformancesPredicate easyHardPredicate \u003d preparePerformancePredicate(Set.of(Performance"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tomforge"
        },
        "content": "                .HARD, Performance.EASY));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        String displayPerformanceStrings \u003d convertPerformanceStringsForDisplay(easyHardPredicate"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tomforge"
        },
        "content": "                .performancesAsStrings());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS_PERFORMANCE_CARDS, displayPerformanceStrings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        ListCommand command \u003d new ListCommand(easyHardPredicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        expectedModel.updateFilteredCardList(easyHardPredicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Set\u003cCard\u003e expectedCards \u003d Set.of(CARD_EASY, CARD_HARD);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Set\u003cCard\u003e actualCards \u003d new HashSet\u003c\u003e(model.getFilteredCardList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(expectedCards.size(), actualCards.size());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertTrue(expectedCards.containsAll(actualCards));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private CardPerformanceMatchesPerformancesPredicate preparePerformancePredicate(Set\u003cPerformance\u003e performances) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return new CardPerformanceMatchesPerformancesPredicate(performances);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public String convertPerformanceStringsForDisplay(List\u003cString\u003e performanceStrings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return performanceStrings.stream().collect(Collectors.joining(\", \")).toLowerCase();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 55,
      "truongthanh2606": 21,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/NewCardCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ReadOnlyAnakin;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class NewCardCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private Model testModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void constructor_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        new NewCardCommand(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void execute_cardAcceptedByModel_success() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ModelStubAcceptingCardAdded modelStub \u003d new ModelStubAcceptingCardAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card validCard \u003d CARD_A;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        CommandResult commandResult \u003d new NewCardCommand(validCard).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(String.format(NewCardCommand.MESSAGE_NEW_CARD_SUCCESS, validCard), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(Arrays.asList(validCard), modelStub.cardsAdded);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void execute_duplicateCard_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card validCard \u003d CARD_B;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        NewCardCommand newCardCommand \u003d new NewCardCommand(validCard);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCard(validCard);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expectMessage(NewCardCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        newCardCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void execute_validCardButNotInDeck_throwsRuntimeException() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card validCard \u003d CARD_B;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        NewCardCommand newCardCommand \u003d new NewCardCommand(validCard);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Model model \u003d testModel;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        newCardCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    // Integrated test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void execute_validCardInDeck_success() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card validCard \u003d CARD_B;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        NewCardCommand newCardCommand \u003d new NewCardCommand(validCard);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().withName(\"Deck with Card B\").build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Model model \u003d testModel;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.getIntoDeck(validDeck);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        CommandResult commandResult \u003d newCardCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(String.format("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            NewCardCommand.MESSAGE_NEW_CARD_SUCCESS,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            validCard), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Card firstCard \u003d new CardBuilder().withQuestion(\"Test Card1\").withAnswer(\"A1\").build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Card secondCard \u003d new CardBuilder().withQuestion(\"Test Card2\").withAnswer(\"A2\").build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        NewCardCommand addFirstCardCommand \u003d new NewCardCommand(firstCard);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        NewCardCommand addSecondCardCommand \u003d new NewCardCommand(secondCard);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(addFirstCardCommand.equals(addFirstCardCommand));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        NewCardCommand addFirstCardCommandCopy \u003d new NewCardCommand(firstCard);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(addFirstCardCommand.equals(addFirstCardCommandCopy));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertFalse(addFirstCardCommand.equals(1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertFalse(addFirstCardCommand.equals(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertFalse(addFirstCardCommand.equals(addSecondCardCommand));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void resetData(ReadOnlyAnakin anakin) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public boolean hasDeck(Deck target) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public ReadOnlyAnakin getAnakin() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void updateDeck(Deck target, Deck newdeck) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void updateCard(Card target, Card newcard) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void deleteCard(Card card) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public void getOutOfDeck() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public void getIntoDeck(Deck target) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public boolean isReviewingDeck() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public void startReview() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public void endReview() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public int getIndexOfCurrentCard() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public void setIndexOfCurrentCard(int newIndex) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public boolean canUndoAnakin() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public boolean canRedoAnakin() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public String undoAnakin() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public String redoAnakin() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void commitAnakin(String command) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public boolean isInsideDeck() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public String exportDeck(Deck deck) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public Deck importDeck(String filepath) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        public void sort(ModelManager.SortingType type) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private class ModelStubWithCard extends ModelStub {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        private final Card card;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ModelStubWithCard(Card card) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            this.card \u003d card;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return this.card.isSameCard(card);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public boolean isReviewingDeck() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private class ModelStubAcceptingCardAdded extends ModelStub {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        final ArrayList\u003cCard\u003e cardsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return cardsAdded.stream().anyMatch(card::isSameCard);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            cardsAdded.add(card);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public boolean isReviewingDeck() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void commitAnakin(String command) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            // called by {@code NewCardCommand#execute()}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public ReadOnlyAnakin getAnakin() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return new Anakin();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 1,
      "yujiatay": 41,
      "truongthanh2606": 50,
      "lessthanfree": 247,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/NewDeckCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_DECK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ReadOnlyAnakin;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class NewDeckCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void constructor_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        new NewDeckCommand(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_deckAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ModelStubAcceptingDeckAdded modelStub \u003d new ModelStubAcceptingDeckAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        CommandResult commandResult \u003d new NewDeckCommand(validDeck).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertEquals(String.format(NewDeckCommand.MESSAGE_SUCCESS, validDeck), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(Arrays.asList(validDeck), modelStub.decksAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void execute_duplicateDeck_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        NewDeckCommand newDeckCommand \u003d new NewDeckCommand(validDeck);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithDeck(validDeck);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        thrown.expectMessage(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        newDeckCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck firstDeck \u003d new DeckBuilder().withName(\"Test Deck1\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck secondDeck \u003d new DeckBuilder().withName(\"Test Deck2\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        NewDeckCommand addFirstDeckCommand \u003d new NewDeckCommand(firstDeck);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        NewDeckCommand addSecondDeckCommand \u003d new NewDeckCommand(secondDeck);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(addFirstDeckCommand.equals(addFirstDeckCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        NewDeckCommand addFirstDeckCommandCopy \u003d new NewDeckCommand(firstDeck);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(addFirstDeckCommand.equals(addFirstDeckCommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertFalse(addFirstDeckCommand.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertFalse(addFirstDeckCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertFalse(addFirstDeckCommand.equals(addSecondDeckCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void resetData(ReadOnlyAnakin anakin) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public boolean hasDeck(Deck target) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public ReadOnlyAnakin getAnakin() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        public void sort(ModelManager.SortingType type) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void updateDeck(Deck target, Deck newdeck) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void updateCard(Card target, Card newcard) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void deleteCard(Card card) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public void getOutOfDeck() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void getIntoDeck(Deck target) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public boolean isReviewingDeck() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public void startReview() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public void endReview() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public int getIndexOfCurrentCard() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public void setIndexOfCurrentCard(int newIndex) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public boolean canUndoAnakin() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public boolean canRedoAnakin() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public String undoAnakin() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public String redoAnakin() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void commitAnakin(String command) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public boolean isInsideDeck() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public String exportDeck(Deck deck) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public Deck importDeck(String filepath) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * A Model stub that contains a single deck."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private class ModelStubWithDeck extends ModelStub {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        private final Deck deck;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ModelStubWithDeck(Deck deck) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            this.deck \u003d deck;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return this.deck.isSameDeck(deck);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public boolean isReviewingDeck() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private class ModelStubAcceptingDeckAdded extends ModelStub {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        final ArrayList\u003cDeck\u003e decksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return decksAdded.stream().anyMatch(deck::isSameDeck);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            decksAdded.add(deck);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public boolean isReviewingDeck() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void commitAnakin(String command) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            // called by {@code NewDeckCommand#execute()}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public ReadOnlyAnakin getAnakin() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return new Anakin();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 6,
      "yujiatay": 41,
      "truongthanh2606": 52,
      "lessthanfree": 207,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/NextCardCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_REVIEWING_DECK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakinInDeck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.TypicalCards;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * {@code NextCardCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class NextCardCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAnakinInDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void executeNextCardSuccess() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckToReview \u003d TypicalCards.getTypicalDeck();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.getIntoDeck(deckToReview);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.startReview();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        NextCardCommand nextCardCommand \u003d new NextCardCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(NextCardCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.setIndexOfCurrentCard(model.getIndexOfCurrentCard() + 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(nextCardCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void executeNextCardLastIndexSuccess() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckToReview \u003d TypicalCards.getTypicalDeck();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.getIntoDeck(deckToReview);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.startReview();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.setIndexOfCurrentCard(model.getFilteredCardList().size() - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        NextCardCommand nextCardCommand \u003d new NextCardCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(NextCardCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.setIndexOfCurrentCard(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(nextCardCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void executeNextCardFail() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckToReview \u003d TypicalCards.getTypicalDeck();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.getIntoDeck(deckToReview);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        NextCardCommand nextCardCommand \u003d new NextCardCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_NOT_REVIEWING_DECK);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandFailure(nextCardCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truongthanh2606": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PerformanceSortCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalDeck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.testutil.AnakinBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "public class PerformanceSortCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public void execute_rankCardList() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Deck expectedDeck \u003d getTypicalDeck();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        expectedDeck.getCards().perfsort();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        List\u003cCard\u003e expectedCardList \u003d expectedDeck.getCards().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Deck deck \u003d getTypicalDeck();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Anakin anakin \u003d new AnakinBuilder().withDeck(deck).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        anakin.getIntoDeck(deck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        ModelManager model \u003d new ModelManager(anakin, new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        PerformanceSortCommand command \u003d new PerformanceSortCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        command.execute(model, commandHistory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        List\u003cCard\u003e cardList \u003d model.getFilteredCardList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertEquals(expectedCardList, cardList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PreviousCardCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_REVIEWING_DECK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakinInDeck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.TypicalCards;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * {@code PreviousCardCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class PreviousCardCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAnakinInDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void executePreviousCardSuccess() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckToReview \u003d TypicalCards.getTypicalDeck();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.getIntoDeck(deckToReview);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.startReview();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        PreviousCardCommand previousCardCommand \u003d new PreviousCardCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(PreviousCardCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        int newIndex \u003d model.getIndexOfCurrentCard() - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        if (newIndex \u003c 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            newIndex \u003d model.getFilteredCardList().size() - 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.setIndexOfCurrentCard(newIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(previousCardCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void executePreviousCardFail() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckToReview \u003d TypicalCards.getTypicalDeck();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.getIntoDeck(deckToReview);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        PreviousCardCommand previousCardCommand \u003d new PreviousCardCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_NOT_REVIEWING_DECK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandFailure(previousCardCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truongthanh2606": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstDeck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakin;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        deleteFirstDeck(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        deleteFirstDeck(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.undoAnakin();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.undoAnakin();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        deleteFirstDeck(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        deleteFirstDeck(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.undoAnakin();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.undoAnakin();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.redoAnakin();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS + DeleteDeckCommand.COMMAND_WORD, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.redoAnakin();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS + DeleteDeckCommand.COMMAND_WORD, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "truongthanh2606": 18,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ReviewCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakinInDeck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.TypicalCards;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * {@code ReviewCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class ReviewCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAnakinInDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void executeReviewSuccess() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckToReview \u003d TypicalCards.getTypicalDeck();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.getIntoDeck(deckToReview);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ReviewCommand reviewCommand \u003d new ReviewCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(ReviewCommand.MESSAGE_SUCCESS, deckToReview);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.startReview();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(reviewCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void executeReviewFail() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckToReview \u003d TypicalCards.getTypicalDeck();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.getIntoDeck(deckToReview);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        model.startReview();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ReviewCommand reviewCommand \u003d new ReviewCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(ReviewCommand.MESSAGE_ALREADY_REVIEWING_DECK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandFailure(reviewCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truongthanh2606": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalDeck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.AnakinBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void execute_sortDeckList() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Anakin expectedAnakin \u003d new AnakinBuilder().withDeck(DECK_A).withDeck(DECK_B).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        List\u003cDeck\u003e expectedDeckList \u003d expectedAnakin.getDeckList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ModelManager model \u003d new ModelManager(new AnakinBuilder().withDeck(DECK_B).withDeck(DECK_A).build(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        List\u003cDeck\u003e deckList \u003d model.getAnakin().getDeckList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        SortCommand command \u003d new SortCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        command.execute(model, commandHistory);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(expectedDeckList, deckList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void execute_sortCardList() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Deck expectedDeck \u003d getTypicalDeck();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        expectedDeck.getCards().sort();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        List\u003cCard\u003e expectedCardList \u003d expectedDeck.getCards().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deck \u003d getTypicalDeck();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Anakin anakin \u003d new AnakinBuilder().withDeck(deck).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        anakin.getIntoDeck(deck);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ModelManager model \u003d new ModelManager(anakin, new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        SortCommand command \u003d new SortCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        command.execute(model, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        List\u003cCard\u003e cardList \u003d model.getFilteredCardList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(expectedCardList, cardList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 2,
      "truongthanh2606": 23,
      "lessthanfree": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstDeck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakin;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAnakin(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        deleteFirstDeck(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        deleteFirstDeck(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        deleteFirstDeck(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        deleteFirstDeck(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.undoAnakin();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS + DeleteDeckCommand.COMMAND_WORD, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedModel.undoAnakin();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS + DeleteDeckCommand.COMMAND_WORD, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "truongthanh2606": 13,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ChangeDeckCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.ChangeDeckCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class ChangeDeckCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private ChangeDeckCommandParser parser \u003d new ChangeDeckCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void parse_validArgs_returnsCdCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ChangeDeckCommand(INDEX_FIRST_DECK));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void parse_validExit_returnsCdCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertParseSuccess(parser, ChangeDeckCommand.EXIT_DECK_ARGS, new ChangeDeckCommand());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 5,
      "truongthanh2606": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClassifyCardParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.ClassifyCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Performance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "public class ClassifyCardParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static final String MESSAGE_INVALID_CLASSIFY_FORMAT \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClassifyCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private ClassifyCommandParser parser \u003d new ClassifyCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_validArgs_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // EASY"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseSuccess(parser, String.valueOf(Performance.EASY), new ClassifyCommand(Performance.EASY));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // NORMAL"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseSuccess(parser, String.valueOf(Performance.NORMAL), new ClassifyCommand(Performance.NORMAL));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // HARD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseSuccess(parser, String.valueOf(Performance.HARD), new ClassifyCommand(Performance.HARD));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // Invalid Rating"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"Terrible\", MESSAGE_INVALID_CLASSIFY_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // Blank"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_CLASSIFY_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static void assertParseSuccess(ParserInterface parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static void assertParseFailure(ParserInterface parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truongthanh2606": 2,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCardCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class DeleteCardCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private DeleteCardCommandParser parser \u003d new DeleteCardCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCardCommand(INDEX_FIRST_CARD));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void parse_blankArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "truongthanh2606": 10,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteDeckCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.DeleteDeckCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class DeleteDeckCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private DeleteDeckCommandParser parser \u003d new DeleteDeckCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteDeckCommand(INDEX_FIRST_DECK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void parse_blankArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 6,
      "truongthanh2606": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCardParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CARD_ANSWER_ARGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CARD_QUESTION_ARGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CARD_ANSWER_ARGS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CARD_QUESTION_ARGS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_A;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_B;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_CARD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.EditCardCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.EditCardCommand.EditCardDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Question;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class EditCardParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private EditCardCommandParser parser \u003d new EditCardCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_A, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCardCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"-5\" + VALID_CARD_QUESTION_ARGS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"0\" + VALID_CARD_QUESTION_ARGS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // All tests involve valid indices"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CARD_QUESTION_ARGS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            Question.MESSAGE_QUESTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // invalid question followed by valid answer"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CARD_QUESTION_ARGS + VALID_CARD_ANSWER_ARGS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            Question.MESSAGE_QUESTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // valid question followed by invalid question. The test case for invalid question followed by valid question"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"1\" + VALID_CARD_QUESTION_ARGS + \" \" + INVALID_CARD_QUESTION_ARGS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            Question.MESSAGE_QUESTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CARD_QUESTION_ARGS + INVALID_CARD_ANSWER_ARGS,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            Question.MESSAGE_QUESTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + VALID_CARD_QUESTION_ARGS + VALID_CARD_ANSWER_ARGS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_A)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .withAnswer(VALID_ANSWER_A).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // Question"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CARD;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + VALID_CARD_QUESTION_ARGS;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_A).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // Answer"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + VALID_CARD_ANSWER_ARGS;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        descriptor \u003d new EditCardDescriptorBuilder().withAnswer(VALID_ANSWER_A).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \"\" + VALID_CARD_QUESTION_ARGS + \" \" + PREFIX_QUESTION"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            + VALID_QUESTION_B + VALID_CARD_ANSWER_ARGS + \" \" + PREFIX_ANSWER + VALID_ANSWER_B;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .withQuestion(VALID_QUESTION_B).withAnswer(VALID_ANSWER_B)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \"\" + INVALID_CARD_QUESTION_ARGS + VALID_CARD_QUESTION_ARGS;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .withQuestion(VALID_QUESTION_A).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \"\" + INVALID_CARD_QUESTION_ARGS + VALID_CARD_ANSWER_ARGS"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            + VALID_CARD_QUESTION_ARGS;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        descriptor \u003d new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .withQuestion(VALID_QUESTION_A)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .withAnswer(VALID_ANSWER_A)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 15,
      "truongthanh2606": 17,
      "lessthanfree": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditDeckParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DECK_NOT_EDITED;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DECK_NAME_ARGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_NAME_A_ARGS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_NAME_B_ARGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DECK_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DECK_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.EditDeckCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.EditDeckCommand.EditDeckDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.testutil.EditDeckDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class EditDeckParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditDeckCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private EditDeckCommandParser parser \u003d new EditDeckCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_DECK_A, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_DECK_NOT_EDITED);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"-5\" + VALID_DECK_NAME_A_ARGS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"0\" + VALID_DECK_NAME_A_ARGS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DECK_NAME_ARGS, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_repeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + VALID_DECK_NAME_A_ARGS + VALID_DECK_NAME_B_ARGS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditDeckDescriptor descriptor \u003d new EditDeckDescriptorBuilder()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .withName(VALID_NAME_DECK_B).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditDeckCommand expectedCommand \u003d new EditDeckCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DECK_NAME_ARGS + VALID_DECK_NAME_B_ARGS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditDeckDescriptor descriptor \u003d new EditDeckDescriptorBuilder()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .withName(VALID_NAME_DECK_B).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        EditDeckCommand expectedCommand \u003d new EditDeckCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 12,
      "truongthanh2606": 7,
      "lessthanfree": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExportDeckCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.ExportDeckCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * outside of the ExportDeckCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * same path through the ExportDeckCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "public class ExportDeckCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private ExportDeckCommandParser parser \u003d new ExportDeckCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ExportDeckCommand(INDEX_FIRST_DECK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_blankArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ImportDeckCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DECK_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.ImportDeckCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "public class ImportDeckCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private ImportDeckCommandParser parser \u003d new ImportDeckCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // clean"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseSuccess(parser, VALID_NAME_DECK_A,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            new ImportDeckCommand(VALID_NAME_DECK_A));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_NAME_DECK_A,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            new ImportDeckCommand(VALID_NAME_DECK_A));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            ImportDeckCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // No argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //        // invalid name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //            ImportDeckCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //        assertParseFailure(parser, \"n/\" + INVALID_DECK_NAME_ARGS, expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //        // non-empty preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //        assertParseFailure(parser, PREAMBLE_NON_EMPTY + VALID_NAME_DECK_A,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //            String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //                ImportDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/NewCardCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUESTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CARD_A_ARGS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_A;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.NewCardCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class NewCardCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private NewCardCommandParser parser \u003d new NewCardCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Card expectedCard \u003d new CardBuilder().withQuestion(VALID_QUESTION_A).withAnswer(VALID_ANSWER_A).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // clean"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        System.out.println(\"Valid args: \" + VALID_CARD_A_ARGS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseSuccess(parser, VALID_CARD_A_ARGS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            new NewCardCommand(expectedCard));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_CARD_A_ARGS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            new NewCardCommand(expectedCard));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            NewCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // No question"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, PREFIX_ANSWER + VALID_ANSWER_A, expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // No answer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, PREFIX_QUESTION + VALID_QUESTION_A, expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // No space between args"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, PREFIX_QUESTION + VALID_QUESTION_A + PREFIX_QUESTION + VALID_QUESTION_A,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // No argument"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // Blank"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_WHITESPACE, expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            NewCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, PREFIX_QUESTION + INVALID_QUESTION, expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // invalid answer"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, PREFIX_ANSWER + INVALID_ANSWER, expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + VALID_CARD_A_ARGS, expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 14,
      "truongthanh2606": 7,
      "lessthanfree": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/NewDeckCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DECK_NAME_ARGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_NAME_A_ARGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DECK_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.NewDeckCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class NewDeckCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private NewDeckCommandParser parser \u003d new NewDeckCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck expectedDeck \u003d new DeckBuilder().withName(VALID_NAME_DECK_A).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // clean"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertParseSuccess(parser, VALID_DECK_NAME_A_ARGS,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            new NewDeckCommand(expectedDeck));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_DECK_NAME_A_ARGS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            new NewDeckCommand(expectedDeck));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            NewDeckCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // No argument"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // Blank name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertParseFailure(parser, PREFIX_NAME + \"\", expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            NewDeckCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertParseFailure(parser, \"n/\" + INVALID_DECK_NAME_ARGS, expectedMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + VALID_NAME_DECK_A,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                NewDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 12,
      "truongthanh2606": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CARD_A_ARGS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_NAME_A_ARGS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DECK_A;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_A;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.ChangeDeckCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.ClassifyCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.DeleteDeckCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.EditCardCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.EditDeckCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.EditDeckCommand.EditDeckDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.EndReviewCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.ExportDeckCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.FlipCardCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.ImportDeckCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.NewCardCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.NewDeckCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.NextCardCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.PreviousCardCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.ReviewCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.DeckNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Performance;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.testutil.EditDeckDescriptorBuilder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private final Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_newDeck() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Deck deck \u003d new DeckBuilder().withName(VALID_NAME_DECK_A).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        NewDeckCommand command \u003d (NewDeckCommand) parser"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .parseCommand(NewDeckCommand.COMMAND_WORD + VALID_DECK_NAME_A_ARGS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(new NewDeckCommand(deck), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_editDeck() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditDeckDescriptor descriptor \u003d new EditDeckDescriptorBuilder().withName(VALID_NAME_DECK_A).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditDeckCommand command \u003d (EditDeckCommand) parser.parseCommand(EditDeckCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            + INDEX_FIRST_DECK.getOneBased() + \" \" + VALID_DECK_NAME_A_ARGS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(new EditDeckCommand(INDEX_FIRST_DECK, descriptor), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_deleteDeck() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        DeleteDeckCommand command \u003d (DeleteDeckCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            DeleteDeckCommand.COMMAND_WORD + \" \" + INDEX_FIRST_DECK.getOneBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(new DeleteDeckCommand(INDEX_FIRST_DECK), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_newCard() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Card card \u003d new CardBuilder().withQuestion(VALID_QUESTION_A).withAnswer(VALID_ANSWER_A).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        NewCardCommand command \u003d (NewCardCommand) parser.parseCommand(NewCardCommand.COMMAND_WORD + VALID_CARD_A_ARGS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(new NewCardCommand(card), command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_editCard() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_A)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .withAnswer(VALID_ANSWER_A).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EditCardCommand command \u003d (EditCardCommand) parser.parseCommand(EditCardCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            + INDEX_FIRST_CARD.getOneBased() + \" \" + VALID_CARD_A_ARGS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(new EditCardCommand(INDEX_FIRST_CARD, descriptor), command);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_deleteCard() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        DeleteCardCommand command \u003d (DeleteCardCommand) parser.parseCommand("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            DeleteCardCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(new DeleteCardCommand(INDEX_FIRST_CARD), command);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(new FindCommand(new DeckNameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_changeDeck() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ChangeDeckCommand command \u003d (ChangeDeckCommand) parser.parseCommand("
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            ChangeDeckCommand.COMMAND_WORD + \" \" + INDEX_FIRST_DECK.getOneBased());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(new ChangeDeckCommand(INDEX_FIRST_DECK), command);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_exportDeck() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ExportDeckCommand command \u003d (ExportDeckCommand) parser.parseCommand("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            ExportDeckCommand.COMMAND_WORD + \" \" + INDEX_FIRST_DECK.getOneBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(new ExportDeckCommand(INDEX_FIRST_DECK), command);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_importDeck() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ImportDeckCommand command \u003d (ImportDeckCommand) parser.parseCommand("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            ImportDeckCommand.COMMAND_WORD + \" \" + VALID_NAME_DECK_A);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(new ImportDeckCommand(VALID_NAME_DECK_A), command);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_changeDeckExit() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ChangeDeckCommand command \u003d (ChangeDeckCommand) parser.parseCommand("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            ChangeDeckCommand.COMMAND_WORD + ChangeDeckCommand.EXIT_DECK_ARGS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(new ChangeDeckCommand(), command);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_review() throws Exception {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ReviewCommand command \u003d (ReviewCommand) parser.parseCommand("
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            ReviewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_DECK.getOneBased());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(new ReviewCommand(INDEX_FIRST_DECK), command);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_endReview() throws Exception {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        EndReviewCommand command \u003d (EndReviewCommand) parser.parseCommand(EndReviewCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(command instanceof EndReviewCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_nextCard() throws Exception {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        NextCardCommand command \u003d (NextCardCommand) parser.parseCommand(NextCardCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(command instanceof NextCardCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_prevCard() throws Exception {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        PreviousCardCommand command \u003d (PreviousCardCommand) parser.parseCommand(PreviousCardCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(command instanceof PreviousCardCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_flipCard() throws Exception {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        FlipCardCommand command \u003d (FlipCardCommand) parser.parseCommand(FlipCardCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(command instanceof FlipCardCommand);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_classify() throws Exception {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        ClassifyCommand command \u003d (ClassifyCommand) parser"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            .parseCommand(ClassifyCommand.COMMAND_WORD + \" \" + String.valueOf(Performance.EASY));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(new ClassifyCommand(Performance.EASY), command);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 250
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Answer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Performance;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Question;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static final String INVALID_PERFORMANCE_STRING \u003d \"tough\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static final Performance VALID_PERFORMANCE \u003d Performance.HARD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static final String VALID_PERFORMANCE_STRING \u003d VALID_PERFORMANCE.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static final String VALID_PERFORMANCE_STRING_MIXED_CASE \u003d \"hArD\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(INDEX_FIRST_DECK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(INDEX_FIRST_DECK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseQuestion_validValueWithoutWhitespace_returnsQuestion() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Question expectedQuestion \u003d new Question(VALID_QUESTION_A);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(VALID_QUESTION_A));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseQuestion_validValueWithWhitespace_returnsTrimmedQuestion() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String questionWithWhitespace \u003d WHITESPACE + VALID_QUESTION_A + WHITESPACE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Question expectedQuestion \u003d new Question(VALID_QUESTION_A);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(questionWithWhitespace));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseQuestion_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseQuestion(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseQuestion_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseQuestion(INVALID_QUESTION));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseAnswer_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAnswer(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseAnswer_validValueWithoutWhitespace_returnsAnswer() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Answer expectedAnswer \u003d new Answer(VALID_ANSWER_A);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(expectedAnswer, ParserUtil.parseAnswer(VALID_ANSWER_A));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseAnswer_validValueWithWhitespace_returnsTrimmedAnswer() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ANSWER_A + WHITESPACE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Answer expectedAnswer \u003d new Answer(VALID_ANSWER_A);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(expectedAnswer, ParserUtil.parseAnswer(addressWithWhitespace));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parseAnswer_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAnswer(INVALID_ANSWER));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void parsePerformance_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePerformance(null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void parsePerformance_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePerformance(INVALID_PERFORMANCE_STRING));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void parsePerformance_validValueWithoutWhitespace_returnsPerformance() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(VALID_PERFORMANCE, ParserUtil.parsePerformance(VALID_PERFORMANCE_STRING));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void parsePerformance_validValueWithWhitespace_returnsTrimmedPerformance() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        String performanceWithWhitespace \u003d WHITESPACE + VALID_PERFORMANCE_STRING + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(VALID_PERFORMANCE, ParserUtil.parsePerformance(performanceWithWhitespace));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void parsePerformance_validValueWithMixedCase_returnsTrimmedPerformance() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(VALID_PERFORMANCE, ParserUtil.parsePerformance(VALID_PERFORMANCE_STRING_MIXED_CASE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 11,
      "lessthanfree": 41,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ReviewCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.commands.ReviewCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.logic.commands.ReviewCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "public class ReviewCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private ReviewCommandParser parser \u003d new ReviewCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_validArgs_returnsCdCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ReviewCommand(INDEX_FIRST_DECK));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_blankArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AnakinTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CARD_LIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakin;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class AnakinTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final Anakin anakin \u003d new Anakin();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertEquals(Collections.emptyList(), anakin.getDeckList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        anakin.resetData(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void resetData_withValidAnakinReadOnlyAnakin_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Anakin newData \u003d getTypicalAnakin();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        anakin.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertEquals(newData, anakin);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void resetData_withDuplicateDecks_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // Two decks with the same identity field"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Deck editedDeckA \u003d new DeckBuilder(DECK_A).withCards(VALID_CARD_LIST).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        List\u003cDeck\u003e newDecks \u003d Arrays.asList(DECK_A, editedDeckA);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        AnakinStub newData \u003d new AnakinStub(newDecks);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(DuplicateDeckException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        anakin.resetData(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void hasDeck_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        anakin.hasDeck(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void hasDeck_deckNotInAnakin_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(anakin.hasDeck(DECK_A));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void hasDeck_deckInAnakin_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        anakin.addDeck(DECK_A);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(anakin.hasDeck(DECK_A));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void hasDeck_deckWithSameIdentityFieldsInAnakin_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        anakin.addDeck(DECK_A);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Deck editedDeckA \u003d new DeckBuilder(DECK_A).withCards(VALID_CARD_LIST).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(anakin.hasDeck(editedDeckA));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void getDeckList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        anakin.getDeckList().remove(0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * A stub ReadOnlyAnakin whose decks list can violate interface constraints."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private static class AnakinStub implements ReadOnlyAnakin {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        private final ObservableList\u003cDeck\u003e decks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        private final ObservableList\u003cCard\u003e cards \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        AnakinStub(Collection\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            this.decks.setAll(decks);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public ObservableList\u003cDeck\u003e getDeckList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return decks;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public ObservableList\u003cCard\u003e getCardList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return cards;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        public boolean isInsideDeck() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        public boolean isReviewingDeck() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public String getLastCommand() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 9,
      "truongthanh2606": 106,
      "lessthanfree": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.DeckNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.AnakinBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void hasDeck_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        modelManager.hasDeck(null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void hasDeck_deckNotInAnakin_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(modelManager.hasDeck(DECK_A));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void hasDeck_deckInAnakin_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        modelManager.addDeck(DECK_A);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(modelManager.hasDeck(DECK_A));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void getFilteredDeckList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        modelManager.getFilteredDeckList().remove(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Anakin anakin \u003d new AnakinBuilder().withDeck(DECK_A).withDeck(DECK_B).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Anakin differentAnakin \u003d new Anakin();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        modelManager \u003d new ModelManager(anakin, userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(anakin, userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // different anakin -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAnakin, userPrefs)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String[] keywords \u003d DECK_A.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        modelManager.updateFilteredDeckList(new DeckNameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(anakin, userPrefs)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        modelManager.updateFilteredDeckList(Model.PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        differentUserPrefs.setAnakinFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(anakin, differentUserPrefs)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 2,
      "truongthanh2606": 23,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedAnakinTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_C;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.AnakinBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class VersionedAnakinTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private static final String DEFAULT_COMMIT_MESSAGE \u003d \"Default commit message\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private final ReadOnlyAnakin anakinWithDeckA \u003d new AnakinBuilder().withDeck(DECK_A).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private final ReadOnlyAnakin anakinWithDeckB \u003d new AnakinBuilder().withDeck(DECK_B).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private final ReadOnlyAnakin anakinWithDeckC \u003d new AnakinBuilder().withDeck(DECK_C).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final ReadOnlyAnakin emptyAnakin \u003d new AnakinBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void commit_singleAnakin_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d prepareAnakinList(emptyAnakin);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        versionedAnakin.commit(DEFAULT_COMMIT_MESSAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertAnakinListStatus(versionedAnakin,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            Collections.singletonList(emptyAnakin),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            emptyAnakin,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void commit_multipleAnakinPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d prepareAnakinList("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            emptyAnakin, anakinWithDeckA, anakinWithDeckB);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        versionedAnakin.commit(DEFAULT_COMMIT_MESSAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertAnakinListStatus(versionedAnakin,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            Arrays.asList(emptyAnakin, anakinWithDeckA, anakinWithDeckB),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            anakinWithDeckB,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void commit_multipleAnakinPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d prepareAnakinList("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            emptyAnakin, anakinWithDeckA, anakinWithDeckB);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAnakin, 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        versionedAnakin.commit(DEFAULT_COMMIT_MESSAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertAnakinListStatus(versionedAnakin,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            Collections.singletonList(emptyAnakin),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            emptyAnakin,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void canUndo_multipleAnakinPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d prepareAnakinList("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            emptyAnakin, anakinWithDeckA, anakinWithDeckB);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(versionedAnakin.canUndo());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void canUndo_multipleAnakinPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d prepareAnakinList("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            emptyAnakin, anakinWithDeckA, anakinWithDeckB);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAnakin, 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(versionedAnakin.canUndo());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void canUndo_singleAnakin_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d prepareAnakinList(emptyAnakin);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(versionedAnakin.canUndo());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void canUndo_multipleAnakinPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d prepareAnakinList("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            emptyAnakin, anakinWithDeckA, anakinWithDeckB);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAnakin, 2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(versionedAnakin.canUndo());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void canRedo_multipleAnakinPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d prepareAnakinList("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            emptyAnakin, anakinWithDeckA, anakinWithDeckB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAnakin, 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(versionedAnakin.canRedo());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void canRedo_multipleAnakinPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d prepareAnakinList("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            emptyAnakin, anakinWithDeckA, anakinWithDeckB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAnakin, 2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(versionedAnakin.canRedo());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void canRedo_singleAnakin_returnsFalse() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d prepareAnakinList(emptyAnakin);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(versionedAnakin.canRedo());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void canRedo_multipleAnakinPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d prepareAnakinList("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            emptyAnakin, anakinWithDeckA, anakinWithDeckB);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(versionedAnakin.canRedo());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void undo_multipleAnakinPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d prepareAnakinList("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            emptyAnakin, anakinWithDeckA, anakinWithDeckB);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        versionedAnakin.undo();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertAnakinListStatus(versionedAnakin,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            Collections.singletonList(emptyAnakin),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            anakinWithDeckA,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            Collections.singletonList(anakinWithDeckB));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void undo_multipleAnakinPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d prepareAnakinList("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            emptyAnakin, anakinWithDeckA, anakinWithDeckB);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAnakin, 1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        versionedAnakin.undo();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertAnakinListStatus(versionedAnakin,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            Collections.emptyList(),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            emptyAnakin,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            Arrays.asList(anakinWithDeckA, anakinWithDeckB));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void undo_singleAnakin_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d prepareAnakinList(emptyAnakin);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertThrows(VersionedAnakin.NoUndoableStateException.class, versionedAnakin::undo);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void undo_multipleAnakinPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d prepareAnakinList("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            emptyAnakin, anakinWithDeckA, anakinWithDeckB);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAnakin, 2);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertThrows(VersionedAnakin.NoUndoableStateException.class, versionedAnakin::undo);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void redo_multipleAnakinPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d prepareAnakinList("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            emptyAnakin, anakinWithDeckA, anakinWithDeckB);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAnakin, 1);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        versionedAnakin.redo();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertAnakinListStatus(versionedAnakin,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            Arrays.asList(emptyAnakin, anakinWithDeckA),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            anakinWithDeckB,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void redo_multipleAnakinPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d prepareAnakinList("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            emptyAnakin, anakinWithDeckA, anakinWithDeckB);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAnakin, 2);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        versionedAnakin.redo();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertAnakinListStatus(versionedAnakin,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            Collections.singletonList(emptyAnakin),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            anakinWithDeckA,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            Collections.singletonList(anakinWithDeckB));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void redo_singleAnakin_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d prepareAnakinList(emptyAnakin);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertThrows(VersionedAnakin.NoRedoableStateException.class, versionedAnakin::redo);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void redo_multipleAnakinPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d prepareAnakinList("
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            emptyAnakin, anakinWithDeckA, anakinWithDeckB);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertThrows(VersionedAnakin.NoRedoableStateException.class, versionedAnakin::redo);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d prepareAnakinList(anakinWithDeckA, anakinWithDeckB);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        VersionedAnakin copy \u003d prepareAnakinList(anakinWithDeckA, anakinWithDeckB);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(versionedAnakin.equals(copy));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(versionedAnakin.equals(versionedAnakin));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(versionedAnakin.equals(null));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(versionedAnakin.equals(1));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        VersionedAnakin differentAnakinList \u003d prepareAnakinList(anakinWithDeckB, anakinWithDeckC);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(versionedAnakin.equals(differentAnakinList));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin differentCurrentStatePointer \u003d prepareAnakinList("
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            anakinWithDeckA, anakinWithDeckB);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAnakin, 1);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(versionedAnakin.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Asserts that {@code versionedAnakin} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * states before {@code versionedAnakin#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * and states after {@code versionedAnakin#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private void assertAnakinListStatus(VersionedAnakin versionedAnakin,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cReadOnlyAnakin\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ReadOnlyAnakin expectedCurrentState,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cReadOnlyAnakin\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertEquals(new Anakin(versionedAnakin), expectedCurrentState);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        while (versionedAnakin.canUndo()) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            versionedAnakin.undo();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        for (ReadOnlyAnakin expectedAnakin : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            assertEquals(expectedAnakin, new Anakin(versionedAnakin));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            versionedAnakin.redo();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        for (ReadOnlyAnakin expectedAnakin : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            versionedAnakin.redo();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            assertEquals(expectedAnakin, new Anakin(versionedAnakin));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(versionedAnakin.canRedo());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAnakin.undo());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Creates and returns a {@code VersionedAnakin} with the {@code anakinStates} added into it, and the"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * {@code VersionedAnakin#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private VersionedAnakin prepareAnakinList(ReadOnlyAnakin... anakinStates) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(anakinStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        VersionedAnakin versionedAnakin \u003d new VersionedAnakin(anakinStates[0]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        for (int i \u003d 1; i \u003c anakinStates.length; i++) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            versionedAnakin.resetData(anakinStates[i]);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            versionedAnakin.commit(DEFAULT_COMMIT_MESSAGE);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return versionedAnakin;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Shifts the {@code versionedAnakin#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedAnakin versionedAnakin, int count) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            versionedAnakin.undo();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truongthanh2606": 269,
      "lessthanfree": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/AnswerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class AnswerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Answer(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void constructor_invalidAnswer_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String invalidAnswer \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Answer(invalidAnswer));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void isValidAnswer() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // null answer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Answer.isValidAnswer(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // invalid answer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // valid answer"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"mr awesome\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"what the 1st\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"John Snow\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"King in the north and dragonass 2nd time\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "truongthanh2606": 36,
      "lessthanfree": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/CardPerformanceMatchesPerformancesTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": "public class CardPerformanceMatchesPerformancesTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private Set\u003cPerformance\u003e hardPerformanceSet \u003d Set.of(Performance.HARD);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private Set\u003cPerformance\u003e easyHardPerformancesSet \u003d Set.of(Performance.HARD, Performance.EASY);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private Set\u003cPerformance\u003e hardEasyPerformancesSet \u003d Set.of(Performance.EASY, Performance.HARD);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private Set\u003cPerformance\u003e allPerformancesSet \u003d Set.of(Performance.values());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private CardPerformanceMatchesPerformancesPredicate hardPerformancesPredicate \u003d new"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            CardPerformanceMatchesPerformancesPredicate(hardPerformanceSet);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private CardPerformanceMatchesPerformancesPredicate easyHardPerformancesPredicate \u003d new"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            CardPerformanceMatchesPerformancesPredicate(easyHardPerformancesSet);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private CardPerformanceMatchesPerformancesPredicate hardEasyPerformancesPredicate \u003d new"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            CardPerformanceMatchesPerformancesPredicate(hardEasyPerformancesSet);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private CardPerformanceMatchesPerformancesPredicate allPerformanecsPredicate \u003d new"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            CardPerformanceMatchesPerformancesPredicate(allPerformancesSet);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private Card easyCard \u003d new CardBuilder().withPerformance(Performance.EASY).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private Card normalCard \u003d new CardBuilder().withPerformance(Performance.NORMAL).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private Card hardCard \u003d new CardBuilder().withPerformance(Performance.HARD).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(easyHardPerformancesPredicate, hardEasyPerformancesPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(allPerformanecsPredicate, allPerformanecsPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertNotEquals(easyHardPerformancesPredicate, hardPerformancesPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void matchingPerformance_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertTrue(hardPerformancesPredicate.test(hardCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertTrue(easyHardPerformancesPredicate.test(easyCard));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertTrue(easyHardPerformancesPredicate.test(hardCard));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertTrue(allPerformanecsPredicate.test(easyCard));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertTrue(allPerformanecsPredicate.test(normalCard));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertTrue(allPerformanecsPredicate.test(hardCard));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void notMatchingPerformance_returnsFalse() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertFalse(hardPerformancesPredicate.test(normalCard));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertFalse(easyHardPerformancesPredicate.test(normalCard));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tomforge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/CardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERFORMANCE_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class CardTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void isSameCard() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(CARD_A.isSameCard(CARD_A));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(CARD_A.isSameCard(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Card editedCardA \u003d new CardBuilder(CARD_A).withQuestion(VALID_QUESTION_A).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertFalse(CARD_A.isSameCard(editedCardA));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // same question, different answers -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        editedCardA \u003d new CardBuilder(CARD_A).withAnswer(VALID_ANSWER_A).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertTrue(CARD_A.isSameCard(editedCardA));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        // same question, different performanec -\u003e retruns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        editedCardA \u003d new CardBuilder(CARD_A).withPerformance(VALID_PERFORMANCE_A).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertTrue(CARD_A.isSameCard(editedCardA));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card cardCopy \u003d new CardBuilder(CARD_A).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(CARD_A.equals(cardCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(CARD_A.equals(CARD_A));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(CARD_A.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(CARD_A.equals(5));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(CARD_A.equals(CARD_B));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 3,
      "tomforge": 9,
      "truongthanh2606": 47,
      "lessthanfree": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/DeckNameContainsKeywordPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class DeckNameContainsKeywordPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        DeckNameContainsKeywordsPredicate firstPredicate \u003d new DeckNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        DeckNameContainsKeywordsPredicate secondPredicate \u003d new DeckNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        DeckNameContainsKeywordsPredicate firstPredicateCopy \u003d new DeckNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        DeckNameContainsKeywordsPredicate predicate \u003d new DeckNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(predicate.test(new DeckBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        predicate \u003d new DeckNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(predicate.test(new DeckBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        predicate \u003d new DeckNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(predicate.test(new DeckBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        predicate \u003d new DeckNameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(predicate.test(new DeckBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        DeckNameContainsKeywordsPredicate predicate \u003d new DeckNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(predicate.test(new DeckBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        predicate \u003d new DeckNameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(predicate.test(new DeckBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "truongthanh2606": 63,
      "lessthanfree": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/DeckTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CARD_LIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DECK_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class DeckTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void isSameDeck() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(DECK_A.isSameDeck(DECK_A));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(DECK_A.isSameDeck(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Deck editedDeckA \u003d new DeckBuilder(DECK_A).withName(VALID_NAME_DECK_A).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertFalse(DECK_A.isSameDeck(editedDeckA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // same name, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        editedDeckA \u003d new DeckBuilder(DECK_A).withCards(VALID_CARD_LIST).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(DECK_A.isSameDeck(editedDeckA));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck aliceCopy \u003d new DeckBuilder(DECK_A).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(DECK_A.equals(aliceCopy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(DECK_A.equals(DECK_A));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(DECK_A.equals(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(DECK_A.equals(5));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // different deck -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(DECK_A.equals(DECK_B));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Deck editedDeckA \u003d new DeckBuilder(DECK_A).withName(VALID_NAME_DECK_A).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertFalse(DECK_A.equals(editedDeckA));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // same name, different cardList -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        editedDeckA \u003d new DeckBuilder(DECK_A).withCards(VALID_CARD_LIST).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(DECK_A.equals(editedDeckA));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 3,
      "truongthanh2606": 48,
      "lessthanfree": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(Name.isValidName(\"what*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(Name.isValidName(\"are you with me\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(Name.isValidName(\"ankin the second\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(Name.isValidName(\"HEYYYYY\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(Name.isValidName(\"Why are you reading this test\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "truongthanh2606": 5,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/PerformanceTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": "public class PerformanceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final String INVALID_PERFORMANCE_STRING \u003d \"tough\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final Performance VALID_PERFORMANCE \u003d Performance.HARD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final String VALID_PERFORMANCE_STRING \u003d \"hard\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final String VALID_PERFORMANCE_STRING_MIXED_CASE \u003d \"hArD\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void type_validPerformanceToString_returnsPerformance() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Performance expectedPerformance \u003d Performance.HARD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Performance actualPerformance \u003d Performance.type(expectedPerformance.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(expectedPerformance, actualPerformance);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void type_validPerformanceString_returnsPerformance() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(VALID_PERFORMANCE, Performance.type(VALID_PERFORMANCE_STRING));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void type_validPerformanceStringMixedCase_returnsPerformance() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(VALID_PERFORMANCE, Performance.type(VALID_PERFORMANCE_STRING_MIXED_CASE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void type_invalidPerformanceString_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e Performance.type(INVALID_PERFORMANCE_STRING));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void type_nullString_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Performance.type(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tomforge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/QuestionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class QuestionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Question(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void constructor_invalidQuestion_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String invalidQuestion \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Question(invalidQuestion));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void isValidQuestion() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // null question"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Question.isValidQuestion(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(Question.isValidQuestion(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(Question.isValidQuestion(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        // valid question"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"mr awesome\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"abcdefg the 1st\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"Who is the king in the North\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"King in the north and dragonass 1st time\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "truongthanh2606": 37,
      "lessthanfree": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/UniqueCardListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class UniqueCardListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final UniqueCardList uniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void contains_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.contains(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void contains_cardNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(uniqueCardList.contains(CARD_A));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void contains_cardInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.add(CARD_A);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(uniqueCardList.contains(CARD_A));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void contains_cardWithSameIdentityFieldsInList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.add(CARD_A);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Card editedCardA \u003d new CardBuilder(CARD_A).withAnswer(VALID_ANSWER_A).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(uniqueCardList.contains(editedCardA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void add_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.add(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void add_duplicateCard_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.add(CARD_A);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(DuplicateCardException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.add(CARD_A);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setCard_nullTargetCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.setCard(null, CARD_A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setCard_nullEditedCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.setCard(CARD_A, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setCard_targetCardNotInList_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(CardNotFoundException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.setCard(CARD_B, CARD_B);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setCard_editedCardIsSameCard_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.add(CARD_A);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.setCard(CARD_A, CARD_A);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedUniqueCardList.add(CARD_A);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setCard_editedCardHasSameIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.add(CARD_A);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Card editedCardA \u003d new CardBuilder(CARD_A).withAnswer(VALID_ANSWER_A).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        uniqueCardList.setCard(CARD_A, editedCardA);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        expectedUniqueCardList.add(editedCardA);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setCard_editedCardHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.add(CARD_A);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.setCard(CARD_A, CARD_B);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedUniqueCardList.add(CARD_B);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setCard_editedCardHasNonUniqueIdentity_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.add(CARD_A);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.add(CARD_B);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(DuplicateCardException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.setCard(CARD_A, CARD_B);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void remove_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.remove(null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void remove_cardDoesNotExist_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(CardNotFoundException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.remove(CARD_A);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void remove_existingCard_removesCard() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.add(CARD_A);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.remove(CARD_A);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setCards_nullUniqueCardList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.setCards((UniqueCardList) null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setCards_uniqueCardList_replacesOwnListWithProvidedUniqueCardList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.add(CARD_A);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedUniqueCardList.add(CARD_B);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.setCards(expectedUniqueCardList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setCards_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.setCards((List\u003cCard\u003e) null);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setCards_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.add(CARD_A);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cCard\u003e cardList \u003d Collections.singletonList(CARD_B);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.setCards(cardList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedUniqueCardList.add(CARD_B);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setCards_listWithDuplicateCards_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cCard\u003e listWithDuplicateCards \u003d Arrays.asList(CARD_A, CARD_A);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(DuplicateCardException.class);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.setCards(listWithDuplicateCards);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 4,
      "truongthanh2606": 170,
      "lessthanfree": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/UniqueDeckListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CARD_LIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class UniqueDeckListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private final UniqueDeckList uniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void contains_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.contains(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void contains_deckNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertFalse(uniqueDeckList.contains(DECK_A));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void contains_deckInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertTrue(uniqueDeckList.contains(DECK_A));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void contains_deckWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Deck editedDeckA \u003d new DeckBuilder(DECK_A).withCards(VALID_CARD_LIST).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertTrue(uniqueDeckList.contains(editedDeckA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void add_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.add(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void add_duplicateDeck_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(DuplicateDeckException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setDeck_nullTargetDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.setDeck(null, DECK_A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setDeck_nullEditedDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.setDeck(DECK_A, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setDeck_targetDeckNotInList_throwsDeckNotFoundException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(DeckNotFoundException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.setDeck(DECK_B, DECK_B);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setDeck_editedDeckIsSameDeck_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.setDeck(DECK_A, DECK_A);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedUniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setDeck_editedDeckHasSameIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Deck editedDeckA \u003d new DeckBuilder(DECK_A).withCards(VALID_CARD_LIST).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        uniqueDeckList.setDeck(DECK_A, editedDeckA);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        expectedUniqueDeckList.add(editedDeckA);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setDeck_editedDeckHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.setDeck(DECK_A, DECK_B);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedUniqueDeckList.add(DECK_B);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setDeck_editedDeckHasNonUniqueIdentity_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.add(DECK_B);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(DuplicateDeckException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.setDeck(DECK_A, DECK_B);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void remove_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.remove(null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void remove_deckDoesNotExist_throwsDeckNotFoundException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(DeckNotFoundException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.remove(DECK_A);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void remove_existingDeck_removesDeck() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.remove(DECK_A);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setDecks_nullUniqueDeckList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.setDecks((UniqueDeckList) null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setDecks_uniqueDeckList_replacesOwnListWithProvidedUniqueDeckList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedUniqueDeckList.add(DECK_B);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.setDecks(expectedUniqueDeckList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setDecks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.setDecks((List\u003cDeck\u003e) null);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setDecks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cDeck\u003e deckList \u003d Collections.singletonList(DECK_B);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.setDecks(deckList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedUniqueDeckList.add(DECK_B);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void setDecks_listWithDuplicateDecks_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cDeck\u003e listWithDuplicateDecks \u003d Arrays.asList(DECK_A, DECK_A);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(DuplicateDeckException.class);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.setDecks(listWithDuplicateDecks);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueDeckList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 4,
      "truongthanh2606": 172,
      "lessthanfree": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/SampleDataUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getSampleAnakin;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.ReadOnlyAnakin;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.Answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": "public class SampleDataUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final Card SAMPLE_CARD_1 \u003d new Card(new Question(\"What is always coming, but never arrives?\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            new Answer(\"Tomorrow\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final Card SAMPLE_CARD_2 \u003d new Card(new Question(\"What can be broken, but is never held?\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            new Answer(\"A promise\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final Card SAMPLE_CARD_3 \u003d new Card(new Question(\"What is it that lives if it is fed, and dies if \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            + \"you give it a drink?\"), new Answer(\"Fire\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final Card SAMPLE_CARD_4 \u003d new Card(new Question(\"What can one catch that is not thrown?\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            new Answer(\"A cold\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final Card SAMPLE_CARD_5 \u003d new Card(new Question(\"What is it that if you have, you want to share \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            + \"me, and if you share, you do not have?\"), new Answer(\"A secret\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final Card SAMPLE_CARD_6 \u003d new Card(new Question(\"If it takes eight men ten hours to build a wall, \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            + \"how long would it take four men?\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            new Answer(\"No time, because the wall is already built\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": "                    + \".\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final Deck SAMPLE_DECK \u003d new Deck(new Name(\"Asking Questions\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void getSampleAnakin_returnsSampleAnakin() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Anakin expectedAnakin \u003d new Anakin();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        expectedAnakin.addDeck(SAMPLE_DECK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        expectedAnakin.getIntoDeck(SAMPLE_DECK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        expectedAnakin.addCard(SAMPLE_CARD_1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        expectedAnakin.addCard(SAMPLE_CARD_2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        expectedAnakin.addCard(SAMPLE_CARD_3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        expectedAnakin.addCard(SAMPLE_CARD_4);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        expectedAnakin.addCard(SAMPLE_CARD_5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        expectedAnakin.addCard(SAMPLE_CARD_6);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        ReadOnlyAnakin actualAnakin \u003d getSampleAnakin();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(expectedAnakin, actualAnakin);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tomforge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        userPrefs.setAnakinFilePath(Paths.get(\"anakin.xml\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/PortManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FILEPATH_INVALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_IMPORTED_DECK_INVALID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_WITH_CARDS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.anakinexceptions.DeckImportException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.storage.portmanager.PortManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "public class PortManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"PortManagerTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static final PortManager portManager \u003d new PortManager(TEST_DATA_FOLDER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private List\u003cCard\u003e cardList \u003d DECK_WITH_CARDS.getCards().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private Deck testDeck \u003d new DeckBuilder().withName(\"Valid Exported Deck\").withCards(cardList).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void exportDeck_success() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        portManager.exportDeck(testDeck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void exportImportDeck_success() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String deckName \u003d testDeck.getName().fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        portManager.exportDeck(testDeck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String testFilePath \u003d deckName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Deck importedDeck \u003d portManager.importDeck(testFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(testDeck, importedDeck);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void importDeckBadFilePath_failure() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String badFile \u003d \"NAN\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String badFilePath \u003d makeFilePath(badFile).toAbsolutePath().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        thrown.expect(DeckImportException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_FILEPATH_INVALID, badFilePath));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        portManager.importDeck(badFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void importDeckCorruptedFile_failure() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String badFilePath \u003d \"InvalidDeck\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        thrown.expect(DeckImportException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        thrown.expectMessage(MESSAGE_IMPORTED_DECK_INVALID);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        portManager.importDeck(badFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Converts a string to a full Path."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private Path makeFilePath(String name) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Path baseFilePath \u003d Paths.get(portManager.getBfp());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        if (name.length() \u003e 4 \u0026\u0026 name.substring(name.length() - 4).equals(\".xml\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return baseFilePath.resolve(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "            return baseFilePath.resolve(name + \".xml\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakin;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.commons.events.model.AnakinChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ReadOnlyAnakin;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        XmlAnakinStorage anakinStorage \u003d new XmlAnakinStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        storageManager \u003d new StorageManager(anakinStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void anakinReadSave() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "         * {@link XmlAnakinStorage} class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAnakinStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Anakin original \u003d getTypicalAnakin();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        storageManager.saveAnakin(original);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ReadOnlyAnakin retrieved \u003d storageManager.readAnakin().get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(original, new Anakin(retrieved));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void getAnakinFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertNotNull(storageManager.getAnakinFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void handleAnakinChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Storage anakinStorageSwap \u003d new StorageManager(new XmlAnakinStorageExceptionThrowingStub(Paths.get"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            (\"dummy\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        anakinStorageSwap.handleAnakinChangedEvent(new AnakinChangedEvent(new Anakin()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    class XmlAnakinStorageExceptionThrowingStub extends XmlAnakinStorage {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public XmlAnakinStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        public void saveAnakin(ReadOnlyAnakin anakin, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 13,
      "truongthanh2606": 11,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static seedu.address.storage.XmlAdaptedCard.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CARD_A_WITH_META;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.Performance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": "public class XmlAdaptedCardTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final String INVALID_ANSWER \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final String INVALID_PERFORMANCE \u003d \"tough\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final String VALID_QUESTION \u003d CARD_A_WITH_META.getQuestion().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final String VALID_ANSWER \u003d CARD_A_WITH_META.getAnswer().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final String VALID_PERFORMANCE \u003d CARD_A_WITH_META.getPerformance().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void toModelType_validCardDetails_returnsCard() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlAdaptedCard card \u003d new XmlAdaptedCard(CARD_A_WITH_META);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Card actualCard \u003d card.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(CARD_A_WITH_META, actualCard);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        // Check for equality of metadata too"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(CARD_A_WITH_META.getPerformance(), actualCard.getPerformance());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(CARD_A_WITH_META.getTimesReviewed(), actualCard.getTimesReviewed());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void toModelType_validCardDetailsNoMeta_returnsCardDefaultMeta() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlAdaptedCard card \u003d new XmlAdaptedCard(VALID_QUESTION, VALID_ANSWER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Card actualCard \u003d card.toModelType();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(CARD_A_WITH_META, actualCard);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(Performance.NORMAL, actualCard.getPerformance());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(0, actualCard.getTimesReviewed());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void toModelType_invalidQuestion_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlAdaptedCard card \u003d new XmlAdaptedCard(INVALID_QUESTION, VALID_ANSWER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d Question.MESSAGE_QUESTION_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void toModelType_nullQuestion_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlAdaptedCard card \u003d new XmlAdaptedCard(null, VALID_ANSWER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void toModelType_invalidAnswer_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlAdaptedCard card \u003d new XmlAdaptedCard(VALID_QUESTION, INVALID_ANSWER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d Answer.MESSAGE_ANSWER_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void toModelType_nullAnswer_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlAdaptedCard card \u003d new XmlAdaptedCard(VALID_QUESTION, null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void toModelType_invalidPerformance_returnsCard() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlAdaptedCard card \u003d new XmlAdaptedCard(VALID_QUESTION, VALID_ANSWER, INVALID_PERFORMANCE, 0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Card actualCard \u003d card.toModelType();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(CARD_A_WITH_META, actualCard);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void toModelType_validPerformance_returnsCard() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlAdaptedCard card \u003d new XmlAdaptedCard(VALID_QUESTION, VALID_ANSWER, VALID_PERFORMANCE, 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Card actualCard \u003d card.toModelType();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(CARD_A_WITH_META, actualCard);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(CARD_A_WITH_META.getPerformance(), actualCard.getPerformance());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tomforge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 79,
      "yujiatay": 2,
      "truongthanh2606": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedDeckTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static seedu.address.storage.XmlAdaptedDeck.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": "public class XmlAdaptedDeckTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final String INVALID_NAME \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final String VALID_NAME \u003d DECK_A.getName().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final List\u003cXmlAdaptedCard\u003e VALID_CARDS \u003d DECK_A.getCards()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        .internalList.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        .map(XmlAdaptedCard::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void toModelType_validDeckDetails_returnsDeck() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlAdaptedDeck deck \u003d new XmlAdaptedDeck(DECK_A);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(DECK_A, deck.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlAdaptedDeck deck \u003d new XmlAdaptedDeck(INVALID_NAME, VALID_CARDS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, deck::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlAdaptedDeck deck \u003d new XmlAdaptedDeck(null, VALID_CARDS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, deck::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tomforge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 41,
      "yujiatay": 1,
      "truongthanh2606": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAnakinStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_F;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_G;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalAnakin;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.ReadOnlyAnakin;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class XmlAnakinStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlAnakinStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAnakin\u003e readAnakin(String filePath) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return new XmlAnakinStorage(Paths.get(filePath)).readAnakin(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void readAnakin_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        readAnakin(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertFalse(readAnakin(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        readAnakin(\"NotXmlFormatAnakin.xml\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void readAnakin_invalidDeckAnakin_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        readAnakin(\"invalidDeckAnakin.xml\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void readAnakin_invalidAndValidDeckAnakin_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        readAnakin(\"invalidAndValidDeckAnakin.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void readAndSaveAnakin_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAnakin.xml\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Anakin original \u003d getTypicalAnakin();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        XmlAnakinStorage xmlAnakinStorage \u003d new XmlAnakinStorage(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        xmlAnakinStorage.saveAnakin(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ReadOnlyAnakin readBack \u003d xmlAnakinStorage.readAnakin(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(original, new Anakin(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        original.addDeck(DECK_F);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        original.removeDeck(DECK_A);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        xmlAnakinStorage.saveAnakin(original, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        readBack \u003d xmlAnakinStorage.readAnakin(filePath).get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(original, new Anakin(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        original.addDeck(DECK_G);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        xmlAnakinStorage.saveAnakin(original); //file path not specified"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        readBack \u003d xmlAnakinStorage.readAnakin().get(); //file path not specified"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(original, new Anakin(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Saves {@code anakin} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private void saveAnakin(ReadOnlyAnakin anakin, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            new XmlAnakinStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tomforge"
        },
        "content": "                .saveAnakin(anakin, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void saveAnakin_nullAnakin_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        saveAnakin(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void saveAnakin_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        saveAnakin(new Anakin(), null);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tomforge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 105,
      "truongthanh2606": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlExportableDeckTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.storage.XmlExportableDeck.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "public class XmlExportableDeckTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static final String INVALID_NAME \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static final String VALID_NAME \u003d DECK_A.getName().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private static final List\u003cXmlAdaptedCard\u003e VALID_CARDS \u003d DECK_A.getCards()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        .internalList.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        .map(XmlAdaptedCard::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void toModelType_validDeckDetails_returnsDeck() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        XmlExportableDeck deck \u003d new XmlExportableDeck(DECK_A);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        assertEquals(DECK_A, deck.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        XmlExportableDeck deck \u003d new XmlExportableDeck(INVALID_NAME, VALID_CARDS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, deck::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        XmlExportableDeck deck \u003d new XmlExportableDeck(null, VALID_CARDS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, deck::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableAnakinTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tomforge"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.TypicalDecks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "public class XmlSerializableAnakinTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        \"XmlSerializableAnakinTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final Path TYPICAL_DECKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalDecksAnakin.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final Path INVALID_DECK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidDeckAnakin.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private static final Path DUPLICATE_DECK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateDeckAnakin.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void toModelType_typicalDecksFile_success() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlSerializableAnakin dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_DECKS_FILE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            XmlSerializableAnakin.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        Anakin anakinFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Anakin typicalDecksAnakin \u003d TypicalDecks.getTypicalAnakin();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        assertEquals(anakinFromFile, typicalDecksAnakin);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void toModelType_invalidDecksFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlSerializableAnakin dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_DECK_FILE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            XmlSerializableAnakin.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public void toModelType_duplicateDecksFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlSerializableAnakin dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_DECK_FILE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            XmlSerializableAnakin.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        thrown.expectMessage(XmlSerializableAnakin.MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tomforge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tomforge": 49,
      "truongthanh2606": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AnakinBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * A utility class to help with building Anakin objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * {@code Anakin ak \u003d new AnakinBuilder().withDeck(DECK_A).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class AnakinBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private Anakin anakin;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public AnakinBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        anakin \u003d new Anakin();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public AnakinBuilder(Anakin anakin) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this.anakin \u003d anakin;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Adds a new {@code Deck} to the {@code Anakin} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public AnakinBuilder withDeck(Deck deck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        anakin.addDeck(deck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Anakin build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return anakin;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "truongthanh2606": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CardBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Answer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.Performance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Question;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * A utility class to help with building Card objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class CardBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String DEFAULT_QUESTION \u003d \"This is a default question\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String DEFAULT_ANSWER \u003d \"Default answer for default question lmao\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final Performance DEFAULT_PERFORMANCE \u003d Performance.NORMAL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final int DEFAULT_TIMES_REVIEWED \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final int DEFAULT_REVIEW_SCORE \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final LocalDateTime DEFAULT_NEXT_REVIEW \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private Answer answer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private Performance performance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    private int timesReviewed;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private double reviewScore;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private LocalDateTime nextReview;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public CardBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        question \u003d new Question(DEFAULT_QUESTION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        answer \u003d new Answer(DEFAULT_ANSWER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        performance \u003d DEFAULT_PERFORMANCE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        timesReviewed \u003d DEFAULT_TIMES_REVIEWED;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        reviewScore \u003d DEFAULT_REVIEW_SCORE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        nextReview \u003d DEFAULT_NEXT_REVIEW;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Initializes the CardBuilder with the data of {@code cardToCopy}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public CardBuilder(Card cardToCopy) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        question \u003d cardToCopy.getQuestion();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        answer \u003d cardToCopy.getAnswer();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        performance \u003d cardToCopy.getPerformance();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        timesReviewed \u003d cardToCopy.getTimesReviewed();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Sets the {@code Question} of the {@code Card} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public CardBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this.question \u003d new Question(question);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Sets the {@code Answer} of the {@code Card} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public CardBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this.answer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Sets the {@code Performance} of the {@code Card} that we are building"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public CardBuilder withPerformance(Performance performance) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.performance \u003d performance;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     * Sets the {@code timesReviewed} of the {@code Card} that we are building"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tomforge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public CardBuilder withTimesReviewed(int timesReviewed) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        this.timesReviewed \u003d timesReviewed;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Sets the {@code reviewScore} of the {@code Card} that we are building"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public CardBuilder withReviewScore(double reviewScore) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        this.reviewScore \u003d reviewScore;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Sets the {@code nextReviewDate} of the {@code Card} that we are building"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public CardBuilder withNextReviewDate(LocalDateTime nextReviewDate) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        this.nextReview \u003d nextReviewDate;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Card build() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return new Card(question, answer, performance, timesReviewed, reviewScore, nextReview);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 29,
      "yujiatay": 3,
      "tomforge": 25,
      "truongthanh2606": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeckBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.UniqueCardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * A utility class to help with building Deck objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class DeckBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"My Deck\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private UniqueCardList cards;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public DeckBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        cards \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Initializes the DeckBuilder with the data of {@code deckToCopy}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public DeckBuilder(Deck deckToCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        name \u003d deckToCopy.getName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        cards \u003d deckToCopy.getCards();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Sets the {@code Name} of the {@code Deck} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public DeckBuilder withName(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Sets the {@code UniqueCardList} of the {@code Deck} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public DeckBuilder withCards(List\u003cCard\u003e cardlist) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        UniqueCardList uniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.setCards(cardlist);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        this.cards \u003d uniqueCardList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public Deck build() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return new Deck(name, cards.internalList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 4,
      "truongthanh2606": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeckUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.NewDeckCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " * A utility class for Deck."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "public class DeckUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Returns a new deck command string for adding the {@code deck}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static String getNewDeckCommand(Deck deck) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return NewDeckCommand.COMMAND_WORD + \" \" + getDeckDetails(deck);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Returns the part of command string for the given {@code deck}\u0027s details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static String getDeckDetails(Deck deck) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        sb.append(PREFIX_NAME + deck.getName().fullName + \" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditCardDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.EditCardCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.EditCardCommand.EditCardDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Answer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * A utility class to help with building EditCardDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "public class EditCardDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private EditCardDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public EditCardDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        descriptor \u003d new EditCardDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public EditCardDescriptorBuilder(EditCardDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        this.descriptor \u003d new EditCardDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Returns an {@code EditCardDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public EditCardDescriptorBuilder(Card card) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        descriptor \u003d new EditCardCommand.EditCardDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        descriptor.setQuestion(card.getQuestion());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        descriptor.setAnswer(card.getAnswer());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Sets the {@code Answer} of the {@code EditCardDescriptor} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public EditCardDescriptorBuilder withAnswer(String ans) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        descriptor.setAnswer(new Answer(ans));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Sets the {@code Question} of the {@code EditCardDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public EditCardDescriptorBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        descriptor.setQuestion(new Question(question));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public EditCardDescriptor build() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 5,
      "truongthanh2606": 4,
      "lessthanfree": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditDeckDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.EditDeckCommand.EditDeckDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.UniqueCardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " * A utility class to help with building EditDeckDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "public class EditDeckDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private EditDeckDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public EditDeckDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        descriptor \u003d new EditDeckDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public EditDeckDescriptorBuilder(EditDeckDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        this.descriptor \u003d new EditDeckDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Returns an {@code EditDeckDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public EditDeckDescriptorBuilder(Deck deck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        descriptor \u003d new EditDeckDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        descriptor.setName(deck.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * Sets the {@code Name} of the {@code EditDeckDescriptor} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public EditDeckDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Sets the {@code Cards} of the {@code EditDeckDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public EditDeckDescriptorBuilder withCards(List\u003cCard\u003e cardlist) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        UniqueCardList uniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        uniqueCardList.setCards(cardlist);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public EditDeckDescriptor build() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 9,
      "yujiatay": 5,
      "truongthanh2606": 4,
      "lessthanfree": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Returns the middle index of the deck in the {@code model}\u0027s deck list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static Index getMidIndexDeck(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return Index.fromOneBased(model.getFilteredDeckList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Returns the middle index of the card in the {@code model}\u0027s card list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static Index getMidIndexCard(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCardList().size() / 2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Returns the last index of the deck in the {@code model}\u0027s deck list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static Index getLastIndexDeck(Model model) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return Index.fromOneBased(model.getFilteredDeckList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Returns the last index of the card in the {@code model}\u0027s card list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static Index getLastIndexCard(Model model) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCardList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Returns the deck in the {@code model}\u0027s deck list at {@code index}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static Deck getDeck(Model model, Index index) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return model.getFilteredDeckList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "truongthanh2606": 23,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalCards.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.model.deck.Performance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * A utility class containing a list of {@code Card} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class TypicalCards {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final Card CARD_A \u003d new CardBuilder().withQuestion(\"An\").withAnswer(\"Empty\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            .withReviewScore(4.0).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final Card CARD_B \u003d new CardBuilder().withQuestion(\"Street\").withAnswer(\"An\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            .withReviewScore(5.0).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final Card CARD_C \u003d new CardBuilder().withQuestion(\"Empty\").withAnswer(\"House\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            .withReviewScore(3.0).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final Card CARD_D \u003d new CardBuilder().withQuestion(\"A\").withAnswer(\"Hole\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final Card CARD_E \u003d new CardBuilder().withQuestion(\"Inside\").withAnswer(\"My\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final Card CARD_F \u003d new CardBuilder().withQuestion(\"Heart\").withAnswer(\"I am\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final Card CARD_G \u003d new CardBuilder().withQuestion(\"All\").withAnswer(\"Alone\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Card MILLION \u003d new CardBuilder().withQuestion(\"A million\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Card IS \u003d new CardBuilder().withQuestion(\"dreams is\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Card ALL \u003d new CardBuilder().withQuestion(\"all it\u0027s gonna take\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final Card CARD_EASY \u003d new CardBuilder().withQuestion(\"An easy card\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            .withPerformance(Performance.EASY).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final Card CARD_HARD \u003d new CardBuilder().withQuestion(\"A hard card\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            .withPerformance(Performance.HARD).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tomforge"
        },
        "content": "    public static final Card CARD_A_WITH_META \u003d new CardBuilder().withQuestion(\"An\").withAnswer(\"Empty\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            .withPerformance(Performance.EASY).withTimesReviewed(5).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tomforge"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private TypicalCards() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Returns a {@code Deck} with all the typical cards."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static Deck getTypicalDeck() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck ad \u003d new Deck(new Name(\"HEYYY\"), getTypicalCards());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return ad;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static List\u003cCard\u003e getTypicalCards() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CARD_A, CARD_B, CARD_C, CARD_D, CARD_E, CARD_F, CARD_G,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tomforge"
        },
        "content": "                CARD_EASY, CARD_HARD,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                MILLION, IS, ALL));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 6,
      "yujiatay": 3,
      "tomforge": 10,
      "truongthanh2606": 29,
      "lessthanfree": 2,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalDecks.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * A utility class containing a list of {@code Deck} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "public class TypicalDecks {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final Deck DECK_A \u003d new DeckBuilder().withName(\"Algebra\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final Deck DECK_B \u003d new DeckBuilder().withName(\"Bacon Salad Recipe\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final Deck DECK_C \u003d new DeckBuilder().withName(\"Calculus\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final Deck DECK_D \u003d new DeckBuilder().withName(\"Darwinian Studies\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final Deck DECK_E \u003d new DeckBuilder().withName(\"Epistemology\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final Deck DECK_WITH_CARDS \u003d TypicalCards.getTypicalDeck();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final Deck DECK_F \u003d new DeckBuilder().withName(\"Finance\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final Deck DECK_G \u003d new DeckBuilder().withName(\"Geometry\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final Deck DECK_H \u003d new DeckBuilder().withName(\"John GraphQL\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final Deck DECK_I \u003d new DeckBuilder().withName(\"John History\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Deck THERE \u003d new DeckBuilder().withName(\"Baby there\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withCards(TypicalCards.getTypicalCards()).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Deck NOTHING \u003d new DeckBuilder().withName(\"is nothing\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Deck HOLDING \u003d new DeckBuilder().withName(\"holding me back\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final String KEYWORD_MATCHING_JOHN \u003d \"John\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private TypicalDecks() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Returns an {@code Anakin} with all the typical decks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static Anakin getTypicalAnakin() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Anakin ak \u003d new Anakin();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        for (Deck deck : getTypicalDecks()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            ak.addDeck(deck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return ak;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Returns an {@code Anakin} with all typical decks and inside deck B."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static Anakin getTypicalAnakinInDeck() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Anakin ak \u003d new Anakin();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        for (Deck deck : getTypicalDecks()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            ak.addDeck(deck);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ak.getIntoDeck(DECK_WITH_CARDS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        return ak;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns an {@code Anakin} with all typical decks and is already reviewing DECK_WITH_CARDS."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static Anakin getTypicalAnakinInDeckReview() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Anakin ak \u003d new Anakin();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        for (Deck deck : getTypicalDecks()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            ak.addDeck(deck);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        ak.getIntoDeck(DECK_WITH_CARDS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        ak.startReview();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return ak;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static List\u003cDeck\u003e getTypicalDecks() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DECK_WITH_CARDS, DECK_A,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                DECK_B, DECK_C, DECK_D, DECK_E, THERE, NOTHING, HOLDING));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 7,
      "yujiatay": 15,
      "truongthanh2606": 53,
      "lessthanfree": 2,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final Index INDEX_FIRST_DECK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final Index INDEX_SECOND_DECK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public static final Index INDEX_THIRD_DECK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final Index INDEX_FIRST_CARD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final Index INDEX_SECOND_CARD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static final Index INDEX_THIRD_CARD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 3,
      "truongthanh2606": 4,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CardCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardCardDisplaysCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import guitests.guihandles.CardCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class CardCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card card \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        CardCard uiCard \u003d new CardCard(card, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        uiPartRule.setUiPart(uiCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCardDisplay(uiCard, card, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card card \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        CardCard uiCard \u003d new CardCard(card, 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // same card, same index -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        CardCard copy \u003d new CardCard(card, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertTrue(uiCard.equals(copy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertTrue(uiCard.equals(uiCard));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertFalse(uiCard.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertFalse(uiCard.equals(0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // different card, same index -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Card differentCard \u003d new CardBuilder().withQuestion(\"differentQuestion\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            .withAnswer(\"differentAnswer\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertFalse(uiCard.equals(new CardCard(differentCard, 0)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // same card, different index -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertFalse(uiCard.equals(new CardCard(card, 1)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Asserts that {@code uiCard} displays the details of {@code expectedCard} correctly and matches"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private void assertCardDisplay(CardCard uiCard, Card expectedCard, int expectedId) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        CardCardHandle cardCardHandle \u003d new CardCardHandle(uiCard.getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", cardCardHandle.getId());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // verify card details are displayed correctly"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCardCardDisplaysCard(expectedCard, cardCardHandle);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 62,
      "truongthanh2606": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CardListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalCards;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardCardDisplaysCard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import guitests.guihandles.CardCardHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import guitests.guihandles.CardListPanelHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.storage.XmlSerializableAnakin;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class CardListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private static final ObservableList\u003cCard\u003e TYPICAL_CARDS \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        FXCollections.observableList(getTypicalCards());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_CARD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private CardListPanelHandle cardListPanelHandle;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        initUi(TYPICAL_CARDS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_CARDS.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            cardListPanelHandle.navigateToCard(TYPICAL_CARDS.get(i));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            Card expectedCard \u003d TYPICAL_CARDS.get(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            CardCardHandle actualCard \u003d cardListPanelHandle.getCardCardHandle(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            assertCardCardDisplaysCard(expectedCard, actualCard);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        initUi(TYPICAL_CARDS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        CardCardHandle expectedCard \u003d cardListPanelHandle.getCardCardHandle(INDEX_SECOND_CARD.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        CardCardHandle selectedDeck \u003d cardListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCardCardEquals(expectedCard, selectedDeck);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Verifies that creating and deleting large number of decks in {@code DeckListPanel} requires lesser than"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ObservableList\u003cCard\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }, \"Creation and deletion of deck cards exceeded time limit\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns a list of decks containing {@code deckCount} decks that is used to populate the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * {@code DeckListPanel}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private ObservableList\u003cCard\u003e createBackingList(int cardCount) throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithDeckWithCards(cardCount);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlSerializableAnakin xmlAnakin \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            XmlUtil.getDataFromFile(xmlFile, XmlSerializableAnakin.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        List\u003cCard\u003e cardList \u003d xmlAnakin.toModelType().getDeckList().get(0).getCards().internalList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return FXCollections.observableArrayList(cardList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns a .xml file containing {@code deckCount} decks. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private Path createXmlFileWithDeckWithCards(int cardCount) throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        builder.append(\"\u003canakin\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        builder.append(\"\u003cdecks\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        builder.append(\"\u003cname\u003e\").append(\"Sample Deck\").append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        for (int i \u003d 0; i \u003c cardCount; i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            builder.append(\"\u003ccards\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            builder.append(\"\u003cquestion\u003e\").append(i).append(\"a\u003c/question\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            builder.append(\"\u003canswer\u003e\").append(i).append(\"a\u003c/answer\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            builder.append(\"\u003c/cards\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        builder.append(\"\u003c/decks\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        builder.append(\"\u003c/anakin\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Path manyDecksFile \u003d TEST_DATA_FOLDER.resolve(\"manyDecks.xml\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        FileUtil.createFile(manyDecksFile);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        FileUtil.writeToFile(manyDecksFile, builder.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        manyDecksFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return manyDecksFile;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Initializes {@code deckListPanelHandle} with a {@code DeckListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code DeckListPanel}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private void initUi(ObservableList\u003cCard\u003e backingList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        CardListPanel cardListPanel \u003d new CardListPanel(backingList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        uiPartRule.setUiPart(cardListPanel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        cardListPanelHandle \u003d new CardListPanelHandle(getChildNode(cardListPanel.getRoot(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            CardListPanelHandle.CARD_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 115,
      "tomforge": 3,
      "truongthanh2606": 8,
      "lessthanfree": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d SortCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        String thirdCommand \u003d \"sort\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertInputHistory(KeyCode.TAB, \"cd 1\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        final String expectedAutocompletion \u003d \"newcard q/ What does Socrates know? a/ Nothing\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        String thirdCommand \u003d \"sort\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        // check tab completion"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        String fourthCommand \u003d \"newc\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        commandBoxHandle.run(fourthCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertInputHistory(KeyCode.TAB, expectedAutocompletion);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 13,
      "yujiatay": 1,
      "truongthanh2606": 1,
      "-": 153
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/DeckCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalDeck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertDeckCardDisplaysDeck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import guitests.guihandles.DeckCardHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class DeckCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckWithNoCards \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        DeckCard deckCard \u003d new DeckCard(deckWithNoCards, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        uiPartRule.setUiPart(deckCard);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCardDisplay(deckCard, deckWithNoCards, 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // with cards"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deckWithCards \u003d getTypicalDeck();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        deckCard \u003d new DeckCard(deckWithCards, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        uiPartRule.setUiPart(deckCard);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCardDisplay(deckCard, deckWithCards, 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck deck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        DeckCard deckCard \u003d new DeckCard(deck, 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // same deck, same index -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        DeckCard copy \u003d new DeckCard(deck, 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertTrue(deckCard.equals(copy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertTrue(deckCard.equals(deckCard));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertFalse(deckCard.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertFalse(deckCard.equals(0));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // different deck, same index -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Deck differentDeck \u003d new DeckBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertFalse(deckCard.equals(new DeckCard(differentDeck, 0)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // same deck, different index -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertFalse(deckCard.equals(new DeckCard(deck, 1)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Asserts that {@code deckCard} displays the details of {@code expectedDeck} correctly and matches"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private void assertCardDisplay(DeckCard deckCard, Deck expectedDeck, int expectedId) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        DeckCardHandle deckCardHandle \u003d new DeckCardHandle(deckCard.getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", deckCardHandle.getId());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // verify deck details are displayed correctly"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertDeckCardDisplaysDeck(expectedDeck, deckCardHandle);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 67,
      "truongthanh2606": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/DeckListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalDecks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_DECK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertDeckCardDisplaysDeck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertDeckCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import guitests.guihandles.DeckCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import guitests.guihandles.DeckListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tomforge"
        },
        "content": "import seedu.address.storage.XmlSerializableAnakin;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class DeckListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private static final ObservableList\u003cDeck\u003e TYPICAL_DECKS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        FXCollections.observableList(getTypicalDecks());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_DECK);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private DeckListPanelHandle deckListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        initUi(TYPICAL_DECKS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_DECKS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            deckListPanelHandle.navigateToCard(TYPICAL_DECKS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "            Deck expectedDeck \u003d TYPICAL_DECKS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            DeckCardHandle actualCard \u003d deckListPanelHandle.getDeckCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            assertDeckCardDisplaysDeck(expectedDeck, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        initUi(TYPICAL_DECKS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        DeckCardHandle expectedDeck \u003d deckListPanelHandle.getDeckCardHandle(INDEX_SECOND_DECK.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        DeckCardHandle selectedDeck \u003d deckListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertDeckCardEquals(expectedDeck, selectedDeck);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Verifies that creating and deleting large number of decks in {@code DeckListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        ObservableList\u003cDeck\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }, \"Creation and deletion of deck cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns a list of decks containing {@code deckCount} decks that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * {@code DeckListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private ObservableList\u003cDeck\u003e createBackingList(int deckCount) throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithDecks(deckCount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tomforge"
        },
        "content": "        XmlSerializableAnakin xmlAnakin \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tomforge"
        },
        "content": "            XmlUtil.getDataFromFile(xmlFile, XmlSerializableAnakin.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return FXCollections.observableArrayList(xmlAnakin.toModelType().getDeckList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Returns a .xml file containing {@code deckCount} decks. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private Path createXmlFileWithDecks(int deckCount) throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        builder.append(\"\u003canakin\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        for (int i \u003d 0; i \u003c deckCount; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            builder.append(\"\u003cdecks\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            builder.append(\"\u003c/decks\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        builder.append(\"\u003c/anakin\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Path manyDecksFile \u003d TEST_DATA_FOLDER.resolve(\"manyDecks.xml\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        FileUtil.createFile(manyDecksFile);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        FileUtil.writeToFile(manyDecksFile, builder.toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        manyDecksFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return manyDecksFile;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Initializes {@code deckListPanelHandle} with a {@code DeckListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code DeckListPanel}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private void initUi(ObservableList\u003cDeck\u003e backingList) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        DeckListPanel deckListPanel \u003d new DeckListPanel(backingList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        uiPartRule.setUiPart(deckListPanel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        deckListPanelHandle \u003d new DeckListPanelHandle(getChildNode(deckListPanel.getRoot(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            DeckListPanelHandle.DECK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 110,
      "tomforge": 3,
      "truongthanh2606": 7,
      "lessthanfree": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/DeckReviewCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertDeckReviewCardDisplaysCard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import guitests.guihandles.DeckReviewCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "public class DeckReviewCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Card card \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // question card"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        DeckReviewCard uiCardQuestion \u003d new DeckReviewCard(card, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        uiPartRule.setUiPart(uiCardQuestion);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCardDisplay(uiCardQuestion, card, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // answer card"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        DeckReviewCard uiCardAnswer \u003d new DeckReviewCard(card, true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        uiPartRule.setUiPart(uiCardAnswer);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCardDisplay(uiCardAnswer, card, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Card card \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        DeckReviewCard uiCard \u003d new DeckReviewCard(card, false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertTrue(uiCard.equals(uiCard));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertFalse(uiCard.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertFalse(uiCard.equals(0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Card differentCard \u003d new CardBuilder().withQuestion(\"differentQuestion\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                .withAnswer(\"differentAnswer\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertFalse(uiCard.equals(new DeckReviewCard(differentCard, false)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Asserts that {@code uiCard} displays the details of {@code expectedCard} correctly and matches"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private void assertCardDisplay(DeckReviewCard uiCard, Card expectedCard, boolean showAnswer) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        DeckReviewCardHandle deckReviewCardHandle \u003d new DeckReviewCardHandle(uiCard.getRoot(), showAnswer);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        // verify card details are displayed correctly"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertDeckReviewCardDisplaysCard(expectedCard, deckReviewCardHandle, showAnswer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " * A GUI unit test class for Anakin."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new Config(), new UserPrefs(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "                new LogicManager(new ModelManager()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(mainWindow.getRoot().getScene());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 1,
      "truongthanh2606": 1,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.commons.events.model.AnakinChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    private static final AnakinChangedEvent EVENT_STUB \u003d new AnakinChangedEvent(new Anakin());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 3,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import guitests.guihandles.CardCardHandle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import guitests.guihandles.CardListPanelHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import guitests.guihandles.DeckCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import guitests.guihandles.DeckListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import guitests.guihandles.DeckReviewCardHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Asserts that {@code actualDeckCard} displays the same values as {@code expectedDeckCard}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static void assertDeckCardEquals(DeckCardHandle expectedDeckCard, DeckCardHandle actualDeckCard) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertEquals(expectedDeckCard.getId(), actualDeckCard.getId());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertEquals(expectedDeckCard.getName(), actualDeckCard.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Asserts that {@code actualDeckCard} displays the details of {@code expectedDeck}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static void assertDeckCardDisplaysDeck(Deck expectedDeck, DeckCardHandle actualCard) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertEquals(expectedDeck.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Asserts that the list in {@code deckListPanelHandle} displays the details of {@code decks} correctly and"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static void assertDeckListMatching(DeckListPanelHandle deckListPanelHandle, Deck... decks) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        for (int i \u003d 0; i \u003c decks.length; i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            deckListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            assertDeckCardDisplaysDeck(decks[i], deckListPanelHandle.getDeckCardHandle(i));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Asserts that the list in {@code deckListPanelHandle} displays the details of {@code decks} correctly and"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static void assertDeckListMatching(DeckListPanelHandle deckListPanelHandle, List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertDeckListMatching(deckListPanelHandle, decks.toArray(new Deck[0]));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Asserts the size of the list in {@code deckListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static void assertDeckListSize(DeckListPanelHandle deckListPanelHandle, int size) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        int numberOfDecks \u003d deckListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertEquals(size, numberOfDecks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Asserts that {@code actualCardCard} displays the same values as {@code expectedCardCard}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static void assertCardCardEquals(CardCardHandle expectedCard, CardCardHandle actualCard) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertEquals(expectedCard.getQuestion(), actualCard.getQuestion());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Asserts that {@code actualCardCard} displays the details of {@code expectedCard}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static void assertCardCardDisplaysCard(Card expectedCard, CardCardHandle actualCard) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertEquals(expectedCard.getQuestion().fullQuestion, actualCard.getQuestion());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Asserts that the list in {@code cardListPanelHandle} displays the details of {@code cards} correctly and"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static void assertCardListMatching(CardListPanelHandle cardListPanelHandle, Card... cards) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.length; i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            cardListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            assertCardCardDisplaysCard(cards[i], cardListPanelHandle.getCardCardHandle(i));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Asserts that the list in {@code cardListPanelHandle} displays the details of {@code cards} correctly and"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static void assertCardListMatching(CardListPanelHandle cardListPanelHandle, List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        assertCardListMatching(cardListPanelHandle, cards.toArray(new Card[0]));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Asserts the size of the list in {@code cardListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static void assertCardListSize(CardListPanelHandle cardListPanelHandle, int size) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        int numberOfCards \u003d cardListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertEquals(size, numberOfCards);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Asserts that {@code actualDeckReviewCard} displays the details of {@code expectedDeckReviewCard}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    public static void assertDeckReviewCardDisplaysCard(Card expectedCard, DeckReviewCardHandle actualCard,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                                                        boolean showAnswer) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        if (showAnswer) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            assertEquals(\"A: \" + expectedCard.getAnswer().fullAnswer, actualCard.getText());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            assertEquals(\"Q: \" + expectedCard.getQuestion().fullQuestion, actualCard.getText());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 72,
      "truongthanh2606": 8,
      "-": 43
    }
  },
  {
    "path": "src/test/java/systemtests/AnakinSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertDeckListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import guitests.guihandles.DeckListPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.testutil.TypicalDecks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " * A system test class for Anakin, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "public abstract class AnakinSystemTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    protected Anakin getInitialData() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return TypicalDecks.getTypicalAnakin();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public DeckListPanelHandle getDeckListPanel() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return mainWindowHandle.getDeckListPanel();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    //     * Displays all persons in the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    //    protected void showAllDecks() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    //        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    //      assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Displays all decks with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    protected void showDecksWithName(String keyword) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertTrue(getModel().getFilteredDeckList().size() \u003c getModel().getAnakin().getDeckList().size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    //     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    //    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    //        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    //        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Deletes all decks in the address book."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    protected void deleteAllDecks() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertEquals(0, getModel().getAnakin().getDeckList().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same Deck objects as {@code expectedAnakinModel}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * and the Deck list panel displays the Deck in the model correctly."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            Model expectedAnakinModel) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertEquals(new Anakin(expectedAnakinModel.getAnakin()), testApp.readStorageAnakin());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertDeckListMatching(getDeckListPanel(), expectedAnakinModel.getFilteredDeckList());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Calls {@code DeckListPanelHandle} and {@code StatusBarFooterHandle} to remember their current state."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        getDeckListPanel().rememberSelectedDeckCard();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " details"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertFalse(getDeckListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @see DeckListPanelHandle#isSelectedDeckCardChanged()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        getDeckListPanel().navigateToCard(getDeckListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getDeckListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @see DeckListPanelHandle#isSelectedDeckCardChanged()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertFalse(getDeckListPanel().isSelectedDeckCardChanged());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertDeckListMatching(getDeckListPanel(), getModel().getFilteredDeckList());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 44,
      "yujiatay": 2,
      "-": 213
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.KEYWORD_MATCHING_JOHN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "public class ClearCommandSystemTest extends AnakinSystemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /* Case: clear non-empty anakin, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS + ClearCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS + ClearCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /* Case: filters the deck list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        showDecksWithName(KEYWORD_MATCHING_JOHN);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * {@code AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @see AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * {@code AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @see AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 5,
      "yujiatay": 4,
      "truongthanh2606": 2,
      "-": 82
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 2,
      "-": 56
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.logic.commands.DeleteDeckCommand.MESSAGE_DELETE_DECK_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.testutil.TestUtil.getDeck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndexDeck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.DeleteDeckCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "//import static seedu.address.testutil.TypicalDecks.KEYWORD_MATCHING_JOHN;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "public class DeleteCommandSystemTest extends AnakinSystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteDeckCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " -------------------- */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /* Case: delete the first deck in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        String command \u003d \"     \" + DeleteDeckCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_DECK.getOneBased() + \" \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Deck deletedDeck \u003d removeDeck(expectedModel, INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_DECK_SUCCESS, deletedDeck);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /* Case: delete the last deck in the list -\u003e deleted */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Model anakinModelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        Index lastDeckIndex \u003d getLastIndexDeck(anakinModelBeforeDeletingLast);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCommandSuccess(lastDeckIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /* Case: undo deleting the last deck in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS + DeleteDeckCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCommandSuccess(command, anakinModelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* Case: redo deleting the last Deck in the list -\u003e last deck deleted again */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        removeDeck(anakinModelBeforeDeletingLast, lastDeckIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS + DeleteDeckCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandSuccess(command, anakinModelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        //     /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted*/"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        //        showDecksWithName(KEYWORD_MATCHING_JOHN);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        //        Index index \u003d INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        //        assertTrue(index.getZeroBased() \u003c getModel().getFilteredDeckList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        //        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        //        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        //        list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        //         * -\u003e rejected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        //         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        //        showDecksWithName(KEYWORD_MATCHING_JOHN);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        //        int invalidIndex \u003d getModel().getAnakin().getDeckList().size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        //        command \u003d DeleteDeckCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        //        assertCommandFailure(command, MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /* --------------------- Performing delete operation while a person card is selected"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujiatay"
        },
        "content": " ------------------------ */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        //         /* Case: delete the selected deck -\u003e deck list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        //                showAllDecks();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        //                expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        //                Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        //                Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        //                selectDeck(selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        //                command \u003d DeleteDeckCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        //                deletedDeck \u003d removeDeck(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        //                expectedResultMessage \u003d String.format(MESSAGE_DELETE_DECK_SUCCESS, deletedDeck);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        //                assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        //                /* --------------------------------- Performing invalid delete operation"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        //         ------------------------------------ */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        command \u003d DeleteDeckCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        command \u003d DeleteDeckCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                getModel().getAnakin().getDeckList().size() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        command \u003d DeleteDeckCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCommandFailure(DeleteDeckCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertCommandFailure(DeleteDeckCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "                MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Removes the {@code Deck} at the specified {@code index} in {@code anakinModel}\u0027s address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private Deck removeDeck(Model anakinModel, Index index) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Deck targetDeck \u003d getDeck(anakinModel, index);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        anakinModel.deleteDeck(targetDeck);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        return targetDeck;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Deck deletedDeck \u003d removeDeck(expectedModel, toDelete);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_DECK_SUCCESS, deletedDeck);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                DeleteDeckCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                expectedResultMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * {@code AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @see AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " the browser url"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @see AnakinSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * {@code AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @see AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 40,
      "yujiatay": 51,
      "truongthanh2606": 1,
      "-": 107
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_NAME_A_ARGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_NAME_B_ARGS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DECKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.KEYWORD_MATCHING_JOHN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.EditDeckCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.testutil.DeckUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "public class EditCommandSystemTest extends AnakinSystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Model addressbookModel \u003d getModel();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " ---------------------- */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* Case: edit deck, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Index index \u003d INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        String command \u003d \" \" + EditDeckCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                + VALID_DECK_NAME_B_ARGS + \"  \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Deck editedDeck \u003d new DeckBuilder(VALID_DECK_B).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandSuccess(command, index, editedDeck);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* Case: undo editing the last deck in the list -\u003e last deck restored */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS + EditDeckCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandSuccess(command, addressbookModel, expectedResultMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* Case: redo editing the last deck in the list -\u003e last deck edited again */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS + EditDeckCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        addressbookModel.updateDeck("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                getModel().getFilteredDeckList().get(INDEX_FIRST_DECK.getZeroBased()), editedDeck);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandSuccess(command, addressbookModel, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* Case: edit a deck with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        command \u003d EditDeckCommand.COMMAND_WORD + \" \" + index.getOneBased() + VALID_DECK_NAME_B_ARGS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandSuccess(command, index, VALID_DECK_B);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        index \u003d INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Deck deckToEdit \u003d getModel().getFilteredDeckList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        editedDeck \u003d new DeckBuilder(deckToEdit).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " ------------------------ */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* Case: filtered deck list, edit index within bounds of address book but out of bounds of deck list"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        showDecksWithName(KEYWORD_MATCHING_JOHN);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        int invalidIndex \u003d getModel().getAnakin().getDeckList().size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandFailure(EditDeckCommand.COMMAND_WORD + \" \" + invalidIndex + VALID_DECK_NAME_B_ARGS,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " -------------------------------------- */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandFailure(EditDeckCommand.COMMAND_WORD + \" 0\" + VALID_DECK_NAME_B_ARGS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandFailure(EditDeckCommand.COMMAND_WORD + \" -1\" + VALID_DECK_NAME_B_ARGS,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredDeckList().size() + 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandFailure(EditDeckCommand.COMMAND_WORD + \" \" + invalidIndex + VALID_DECK_NAME_B_ARGS,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandFailure(EditDeckCommand.COMMAND_WORD + VALID_DECK_NAME_B_ARGS,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandFailure(EditDeckCommand.COMMAND_WORD + \" \" + INDEX_FIRST_DECK.getOneBased(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                Messages.MESSAGE_DECK_NOT_EDITED);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* Case: edit a deck with new values same as another deck\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        executeCommand(DeckUtil.getNewDeckCommand(VALID_DECK_A));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertTrue(getModel().getAnakin().getDeckList().contains(VALID_DECK_A));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        index \u003d INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertFalse(getModel().getFilteredDeckList().get(index.getZeroBased()).equals(VALID_DECK_A));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        command \u003d EditDeckCommand.COMMAND_WORD + \" \" + index.getOneBased() + VALID_DECK_NAME_A_ARGS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Deck, Index)} except that"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Deck, Index)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Deck editedDeck) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedDeck, null);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditDeckCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the deck at index {@code toEdit} being"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * updated to values specified {@code editedDeck}.\u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Deck editedDeck,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        expectedModel.updateDeck(expectedModel.getFilteredDeckList().get(toEdit.getZeroBased()), editedDeck);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        expectedModel.updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                String.format(EditDeckCommand.MESSAGE_EDIT_DECK_SUCCESS, editedDeck), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " except that the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * {@code AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @see AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @see AnakinSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            expectedResultMessage, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        expectedModel.updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * {@code AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @see AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 85,
      "-": 108
    }
  },
  {
    "path": "src/test/java/systemtests/ErrorDialogGuiTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postLater;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.AlertDialogHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "public class ErrorDialogGuiTest extends AnakinSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorDialogs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            alertDialog.getContentText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 1,
      "yujiatay": 1,
      "-": 32
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DECKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_C;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_D;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_G;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_H;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.KEYWORD_MATCHING_JOHN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.DeleteDeckCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "public class FindCommandSystemTest extends AnakinSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /* Case: find multiple decks in Anakin, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "         * -\u003e 2 decks found"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_JOHN + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        ModelHelper.setFilteredDeckList(expectedModel, DECK_G, DECK_H); // first names of Deck_G and Deck_H are John"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /* Case: repeat previous find command where deck list is displaying the decks we are finding"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "         * -\u003e 2 decks found"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_JOHN;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /* Case: find deck where deck list is not displaying the deck we are finding -\u003e 1 deck found */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Calculus\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        ModelHelper.setFilteredDeckList(expectedModel, DECK_C);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /* Case: find multiple decks in Anakin, 2 keywords -\u003e 2 decks found */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Bacon Calculus\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        ModelHelper.setFilteredDeckList(expectedModel, DECK_B, DECK_C);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /* Case: find multiple decks in Anakin, 2 keywords in reversed order -\u003e 2 decks found */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Calculus Bacon\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /* Case: find multiple decks in Anakin, 2 keywords with 1 repeat -\u003e 2 decks found */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Calculus Bacon Calculus\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /* Case: find multiple decks in Anakin, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "         * -\u003e 2 decks found"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Calculus Bacon NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /* Case: find same decks in Anakin after deleting 1 of them -\u003e 1 deck found */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        executeCommand(DeleteDeckCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertFalse(getModel().getAnakin().getDeckList().contains(DECK_G));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_JOHN;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        ModelHelper.setFilteredDeckList(expectedModel, DECK_H);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /* Case: find deck in Anakin, keyword is same as name but of different case -\u003e 1 decks found */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" JoHn\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /* Case: find decks in Anakin, keyword is substring of name -\u003e 0 decks found */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Joh\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        ModelHelper.setFilteredDeckList(expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /* Case: find decks in Anakin, name is substring of keyword -\u003e 0 decks found */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Johnny\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        ModelHelper.setFilteredDeckList(expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /* Case: find decks not in Anakin -\u003e 0 decks found */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Julius\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        // TODO: Write Card level checks for find"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        //        /* Case: find phone number of decks in Anakin -\u003e 0 decks found */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        //        command \u003d FindCommand.COMMAND_WORD + \" \" + DECK_D.getPhone().value;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        //"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        //        /* Case: find address of decks in Anakin -\u003e 0 decks found */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        //        command \u003d FindCommand.COMMAND_WORD + \" \" + DECK_D.getAddress().value;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        //"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        //        /* Case: find email of decks in Anakin -\u003e 0 decks found */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        //        command \u003d FindCommand.COMMAND_WORD + \" \" + DECK_D.getEmail().value;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        //"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        //        /* Case: find tags of decks in Anakin -\u003e 0 decks found */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        //        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        //        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        /* Case: find decks in empty Anakin -\u003e 0 decks found */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        deleteAllDecks();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_JOHN;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        ModelHelper.setFilteredDeckList(expectedModel, DECK_D);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * box displays {@code Messages#MESSAGE_DECKS_LISTED_OVERVIEW} with the number of deck in the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * filtered list,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * {@code AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @see AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "                MESSAGE_DECKS_LISTED_OVERVIEW, expectedModel.getFilteredDeckList().size());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * {@code AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @see AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 21,
      "yujiatay": 49,
      "lessthanfree": 9,
      "-": 110
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_F;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertDeckListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.DeleteDeckCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.logic.commands.NewDeckCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "public class HelpCommandSystemTest extends AnakinSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        getDeckListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        executeCommand(NewDeckCommand.COMMAND_WORD + \" \" + PREFIX_NAME + DECK_F);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        assertDeckListMatching(getDeckListPanel(), getModel().getFilteredDeckList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        executeCommand(DeleteDeckCommand.COMMAND_WORD + \" \" + PREFIX_NAME + DECK_F);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 1,
      "yujiatay": 9,
      "-": 92
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": " * Contains helper methods to set up {@code AddressbookModel} for testing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private static final Predicate\u003cDeck\u003e PREDICATE_MATCHING_NO_DECKS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private static final Predicate\u003cCard\u003e PREDICATE_MATCHING_NO_CARDS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static void setFilteredDeckList(Model model, List\u003cDeck\u003e decksToDisplay) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Optional\u003cPredicate\u003cDeck\u003e\u003e deckPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            decksToDisplay.stream().map(ModelHelper::getPredicateMatchingDecks).reduce(Predicate::or);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        model.updateFilteredDeckList(deckPredicate.orElse(PREDICATE_MATCHING_NO_DECKS));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "     * @see ModelHelper#setFilteredDeckList(Model, List)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    public static void setFilteredDeckList(Model model, Deck... toDisplay) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "        setFilteredDeckList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static void setFilteredCardList(Model model, List\u003cCard\u003e cardsToDisplay) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "        Optional\u003cPredicate\u003cCard\u003e\u003e cardPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "            cardsToDisplay.stream().map(ModelHelper::getPredicateMatchingCards).reduce(Predicate::or);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        model.updateFilteredCardList(cardPredicate.orElse(PREDICATE_MATCHING_NO_CARDS));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * @see ModelHelper#setFilteredCardList(Model, List)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    public static void setFilteredCardList(Model model, Card... toDisplay) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        setFilteredCardList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujiatay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Deck} equals to {@code other}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private static Predicate\u003cDeck\u003e getPredicateMatchingDecks(Deck other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return deck -\u003e deck.equals(other);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Deck} equals to {@code other}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truongthanh2606"
        },
        "content": "    private static Predicate\u003cCard\u003e getPredicateMatchingCards(Card other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujiatay"
        },
        "content": "        return card -\u003e card.equals(other);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujiatay": 18,
      "truongthanh2606": 13,
      "lessthanfree": 4,
      "-": 30
    }
  },
  {
    "path": "src/test/java/systemtests/NewCardCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import static seedu.address.testutil.TypicalDecks.DECK_A;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import static seedu.address.testutil.TypicalDecks.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import static seedu.address.testutil.TypicalDecks.DECK_B;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import static seedu.address.testutil.TypicalDecks.DECK_C;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import static seedu.address.testutil.TypicalDecks.DECK_D;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import static seedu.address.testutil.TypicalDecks.IDA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import static seedu.address.testutil.TypicalDecks.KEYWORD_MATCHING_JOHN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import seedu.address.logic.commands.NewDeckCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import seedu.address.logic.commands.NewCardCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "public class NewCardCommandSystemTest extends AnakinSystemTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//    public void add() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        Model addressbookModel \u003d getModel();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        /* ------------------------ Perform add operations on the shown unfiltered list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "// ----------------------------- */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        /* Case: add a Deck without cards to a non-empty anakin, command with leading spaces and trailing"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "// spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//         * -\u003e added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        Deck toAdd \u003d DECK_A;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        String command \u003d \"   \" + NewDeckCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        assertCommandSuccess(command, addressbookModel, expectedResultMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        /* Case: redo adding Deck_A to the list -\u003e Deck_A added again */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        addressbookModel.addDeck(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        assertCommandSuccess(command, addressbookModel, expectedResultMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        /* Case: add a deck with all fields same as another person in the anakin except name -\u003e added */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        toAdd \u003d new DeckBuilder(DECK_A).withName(DECK_B).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        command \u003d NewDeckCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        /* Case: add a person with all fields same as another person in the anakin except phone and email"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//         * -\u003e added"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        toAdd \u003d new DeckBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        command \u003d TestUtil.getNewCardCommand(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        /* Case: add to empty anakin -\u003e added */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        deleteAllDecks();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        command \u003d NewCardCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        /* -------------------------- Perform add operation on the shown filtered list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "// ------------------------------ */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        showDecksWithName(KEYWORD_MATCHING_JOHN);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        /* ------------------------ Perform add operation while a person card is selected"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "// --------------------------- */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        /* Case: selects first card in the deck list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        selectDeck(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        /* ----------------------------------- Perform invalid add operations"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "// --------------------------------------- */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        command \u003d TestUtil.getNewCardCommand(HOON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        assertCommandFailure(command, NewCardCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        /* Case: add a duplicate person except with different cards -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        toAdd \u003d new DeckBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        command \u003d TestUtil.getNewCardCommand(toAdd);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        assertCommandFailure(command, NewCardCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        /* Case: add a duplicate deck except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        toAdd \u003d new DeckBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        command \u003d TestUtil.getNewCardCommand(toAdd);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        assertCommandFailure(command, NewCardCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        toAdd \u003d new DeckBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        command \u003d TestUtil.getNewCardCommand(toAdd);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        assertCommandFailure(command, NewCardCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        command \u003d TestUtil.getNewCardCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        assertCommandFailure(command, NewCardCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        command \u003d NewCardCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, NewCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        command \u003d NewCardCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, NewCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        command \u003d NewCardCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, NewCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        command \u003d NewCardCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, NewCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        command \u003d \"newcards \" + TestUtil.getDeckDetails(toAdd);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        assertCommandFailure(command, AddressbookMessages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        command \u003d NewCardCommand.COMMAND_WORD + INVALID_NAME_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//     * Executes the {@code NewCardCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//     * 3. Result display box displays the success message of executing {@code NewCardCommand} with the details of"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//     * 4. {@code Storage} and {@code DeckListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//     * {@code AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//     * @see AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//    private void assertCommandSuccess(Deck toAdd) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        assertCommandSuccess(TestUtil.getNewCardCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess(Deck)}. Executes {@code command}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//     * instead."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//     * @see NewCardCommandSystemTest#assertCommandSuccess(Deck)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//    private void assertCommandSuccess(String command, Deck toAdd) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        expectedModel.addDeck(toAdd);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        String expectedResultMessage \u003d String.format(NewCardCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess(String, Deck)} except asserts that"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//     * 2. {@code Storage} and {@code DeckListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//     * @see NewCardCommandSystemTest#assertCommandSuccess(String, Deck)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//    private void assertCommandSuccess(String command, Model expectedModel, String"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//            expectedResultMessage) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//     * 4. {@code Storage} and {@code DeckListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//     * {@code AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//     * @see AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 103,
      "lessthanfree": 119,
      "-": 2
    }
  },
  {
    "path": "src/test/java/systemtests/NewDeckCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DECK_NAME_ARGS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_NAME_A_ARGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_NAME_B_ARGS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DECK_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DECK_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_A;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_I;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.KEYWORD_MATCHING_JOHN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.NewDeckCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.testutil.DeckUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "public class NewDeckCommandSystemTest extends AnakinSystemTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public void newdeck() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " ----------------------------- */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* Case: add a deck to Anakin, command with leading spaces and trailing"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": " spaces"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "         */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Deck toAdd \u003d new DeckBuilder(DECK_A).withName(VALID_NAME_DECK_A).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        String command \u003d \"   \" + NewDeckCommand.COMMAND_WORD + \"  \" + PREFIX_NAME + VALID_NAME_DECK_A + \"  \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* Case: undo adding DECK_A to the list -\u003e Deck_A deleted */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS + NewDeckCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* Case: redo adding DECK_A to the list -\u003e Deck_A added again */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        model.addDeck(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS + NewDeckCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* Case: add a Deck with a different name -\u003e added */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        toAdd \u003d new DeckBuilder(DECK_A).withName(VALID_NAME_DECK_B).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        command \u003d NewDeckCommand.COMMAND_WORD + VALID_DECK_NAME_B_ARGS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* Case: add to empty anakin -\u003e added */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        deleteAllDecks();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandSuccess(DECK_A);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* Case: add a Deck, use two name prefixes, both valid -\u003e last prefix added */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        command \u003d NewDeckCommand.COMMAND_WORD + VALID_DECK_NAME_A_ARGS + VALID_DECK_NAME_B_ARGS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertFalse(getModel().getAnakin().getDeckList().contains(VALID_NAME_DECK_A));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* Case: filters the Deck list before adding -\u003e added */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        showDecksWithName(KEYWORD_MATCHING_JOHN);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandSuccess(DECK_I);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations--------------------------------------- */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* Case: add a duplicate Deck -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        command \u003d NewDeckCommand.COMMAND_WORD + VALID_DECK_NAME_B_ARGS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        command \u003d NewDeckCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, NewDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        command \u003d \"newdecks \" + VALID_DECK_NAME_B_ARGS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        command \u003d NewDeckCommand.COMMAND_WORD + INVALID_DECK_NAME_ARGS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Executes the {@code NewDeckCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code NewDeckCommand} with the details of"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * 4. {@code Storage} and {@code DeckListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * {@code AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @see AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private void assertCommandSuccess(Deck toAdd) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandSuccess(DeckUtil.getNewDeckCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Deck)}. Executes {@code command}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @see NewDeckCommandSystemTest#assertCommandSuccess(Deck)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private void assertCommandSuccess(String command, Deck toAdd) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        expectedModel.addDeck(toAdd);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        String expectedResultMessage \u003d String.format(NewDeckCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Deck)} except asserts that"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * 2. {@code Storage} and {@code DeckListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @see NewDeckCommandSystemTest#assertCommandSuccess(String, Deck)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * 4. {@code Storage} and {@code DeckListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * {@code AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     * @see AnakinSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 160
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.Anakin;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "public class SampleDataTest extends AnakinSystemTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    protected Anakin getInitialData() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 3,
      "-": 38
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "import seedu.address.model.ReadOnlyAnakin;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyAnakin\u003e anakin, Path saveFileLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyjjoel"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(anakin, saveFileLocation));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyjjoel": 3,
      "-": 70
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "    World!"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 3,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml\" type\u003d\"seedu.address.ui.TestFxmlObject\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lessthanfree"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lessthanfree": 3,
      "-": 4
    }
  }
]
