[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d reInsurance"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2103JAN2018-T11-B3/main[image:https://travis-ci.org/CS2103JAN2018-T11-B3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/CS2103JAN2018-T11-B3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-T11-B3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "* With the increase in the number of insurance plans handle by a particular insurance agent, he/she will find that"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " managing client\u0027s data and profile are getting increasingly difficult, thus the need for reInsurance"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "* reInsurance is a desktop application that serves as an client tracking book for insurance agents to use to manage information about their clients."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* reInsurance provides revolutionary technology that not only aims to organize the clutter of the agent\u0027s address book"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "but also to simplify tedious tasks of calculating important information."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 3,
      "-": 30
    }
  },
  {
    "path": "collated/functional/Sebry9.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Sebry9"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "###### /resources/view/DarkTheme.css"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` css"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .purple {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: purple;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .grey {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "###### /resources/view/DarkTheme.css"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "``` css"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "#insurances {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "#insurances .label {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 1 1 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "###### /resources/view/PersonListCard.fxml"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "``` fxml"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"commission\" prefHeight\u003d\"38.0\" prefWidth\u003d\"205.0\" text\u003d\"\\$commission\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"8\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"30.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     \u003cLabel fx:id\u003d\"group\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$group\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"6\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cLabel fx:id\u003d\"appointment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$appointment\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cLabel fx:id\u003d\"birthday\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$birthday\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"insurances\" GridPane.rowIndex\u003d\"7\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cRowConstraints percentHeight\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cRowConstraints minHeight\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cRowConstraints minHeight\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cRowConstraints minHeight\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cRowConstraints minHeight\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cRowConstraints minHeight\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cRowConstraints minHeight\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cRowConstraints minHeight\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cGroup /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/ui/PersonCard.java"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private String getTagColorStyleFor(String tag) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        switch(tag) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"friends\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"friend\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"family\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return TAG_COLOR_STYLES[0]; //yellow"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"teacher\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"classmates\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"husband\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return TAG_COLOR_STYLES[1]; //blue"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"enemy\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"owesMoney\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return TAG_COLOR_STYLES[2]; //red"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"grandparent\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"neighbours\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return TAG_COLOR_STYLES[5]; //purple"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"colleagues\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return TAG_COLOR_STYLES[4]; //orange"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return TAG_COLOR_STYLES[6];"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Creates the tag labels for {@code person}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private void startTag(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        });"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/storage/XmlAdaptedInsurance.java"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * JAXB-friendly version of the Insurance."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "public class XmlAdaptedInsurance {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private String insuranceName;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Constructs an XmlAdaptedInsurance."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public XmlAdaptedInsurance() {}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Constructs a {@code XmlAdaptedInsurance} with the given {@code insuranceName}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public XmlAdaptedInsurance(String insuranceName) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.insuranceName \u003d insuranceName;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Converts a given Insurance into this class for JAXB use."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public XmlAdaptedInsurance(Insurance source) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        insuranceName \u003d source.insuranceName;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Converts this jaxb-friendly adapted insurance object into the model\u0027s Insurance object."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Insurance toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (!Insurance.isValidInsurance(insuranceName)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            throw new IllegalValueException(Insurance.MESSAGE_INSURANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return new Insurance(insuranceName);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (!(other instanceof XmlAdaptedInsurance)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return insuranceName.equals(((XmlAdaptedInsurance) other).insuranceName);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/person/Person.java"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Birthday birthday;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Appointment appointment;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Group group;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private final String totalCommission;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private final UniqueInsuranceList insurance;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Birthday birthday,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            Appointment appointment, Group group, Set\u003cInsurance\u003e insurance) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, birthday);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        this.group \u003d group;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.insurance \u003d new UniqueInsuranceList(insurance);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.totalCommission \u003d calculateTotalCommission(insurance);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d new UniqueTagList(tags);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    public Birthday getBirthday() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        return birthday;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    public Appointment getAppointment() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        return appointment;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Group getGroup() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return group;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public String getTotalCommission() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return totalCommission;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/person/Person.java"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Calculate the total commission based on the number of plan this person/client have."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public String calculateTotalCommission(Set\u003cInsurance\u003e insurances) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        int commission \u003d 0;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Insurance[] insuranceList \u003d insurances.toArray(new Insurance[insurances.size()]);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        for (int i \u003d 0; i \u003c insurances.size(); i++) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            Commission plans \u003d new Commission(insuranceList[i]);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            commission +\u003d parseInt(plans.getCommission());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return Integer.toString(commission);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Set\u003cInsurance\u003e getInsurance() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return Collections.unmodifiableSet(insurance.toSet());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /* public String getCommission() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return commission;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags.toSet());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(this.getName())"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getBirthday().equals(this.getBirthday())"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getGroup().equals(this.getGroup());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags, birthday, appointment, group, insurance/*, commission*/);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/Insurance/Commission.java"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * Represents the commission recieved from a insurance plan in reInsurance."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "public class Commission {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private final String commission;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Commission(Insurance insurance) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        requireNonNull(insurance);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        String insuranceName \u003d insurance.toString();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        String commission \u003d new String(\"0\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Pattern p1 \u003d Pattern.compile(\"\\\\{(.*?)\\\\}\");"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Matcher m1 \u003d p1.matcher(insuranceName);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Pattern p2 \u003d Pattern.compile(\"\\\\[(.*?)\\\\]\");"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Matcher m2 \u003d p2.matcher(insuranceName);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        while (m1.find()) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            if (commission.equals(\"0\")) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                commission \u003d m1.group().substring(1, m1.group().length() - 1);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        while (m2.find()) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            if (commission.equals(\"0\")) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                commission \u003d m2.group().substring(1, m2.group().length() - 1);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.commission \u003d commission;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public String getCommission() {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return commission;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (!(other instanceof Commission)) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Commission otherCommission \u003d (Commission) other;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return otherCommission.getCommission().equals(this.getCommission());"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return Objects.hash(commission);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        builder.append(getCommission());"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/Insurance/UniqueInsuranceList.java"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * A list of insurance that enforces no nulls and uniqueness between its elements."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " *"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * Supports minimal set of list operations for the reInsurance\u0027s features."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " *"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * @see Insurance#equals(Object)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " */"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "public class UniqueInsuranceList implements Iterable\u003cInsurance\u003e {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private final ObservableList\u003cInsurance\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Constructs empty InsuranceList."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public UniqueInsuranceList() {}"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Creates a UniqueInsuranceList using given insurances."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Enforces no nulls."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public UniqueInsuranceList(Set\u003cInsurance\u003e insurance) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        requireAllNonNull(insurance);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        internalList.addAll(insurance);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Returns all insurance in this list as a Set."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "     * This set is mutable and change-insulated against the internal list."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Set\u003cInsurance\u003e toSet() {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(internalList);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Replaces the Insurance in this list with those in the argument insurance list."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void setInsurances(Set\u003cInsurance\u003e insurance) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        requireAllNonNull(insurance);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        internalList.setAll(insurance);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Ensures every insurance in the argument list exists in this object."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void mergeFrom(UniqueInsuranceList from) {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        final Set\u003cInsurance\u003e alreadyInside \u003d this.toSet();"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        from.internalList.stream()"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .filter(insurance -\u003e !alreadyInside.contains(insurance))"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(internalList::add);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Returns true if the list contains an equivalent Insurance as the given argument."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public boolean contains(Insurance toCheck) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Adds a Insurance to the list."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * @throws DuplicateInsuranceException if the Insuranceto add is a duplicate of an existing Tag in the list."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void add(Insurance toAdd) throws DuplicateInsuranceException {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            throw new DuplicateInsuranceException();"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Iterator\u003cInsurance\u003e iterator() {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public ObservableList\u003cInsurance\u003e asObservableList() {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            || (other instanceof UniqueInsuranceList // instanceof handles nulls"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            \u0026\u0026 this.internalList.equals(((UniqueInsuranceList) other).internalList));"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the element in this list is equal to the elements in {@code other}."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "     * The elements do not have to be in the same order."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public boolean equalsOrderInsensitive(UniqueInsuranceList other) {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(other.internalList);"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static class DuplicateInsuranceException extends DuplicateDataException {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        protected DuplicateInsuranceException() {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            super(\"Operation would result in duplicate insurances\");"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/Insurance/Insurance.java"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * Represents a Insurance plan in reInsurance."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " */"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "public class Insurance {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String MESSAGE_INSURANCE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Insurance should only contain alphanumeric characters and Commission should contain only non negative numbers\";"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"\\\\[\\\\]{|}\";"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String INSURANCE_NAME \u003d \"[\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String COMMISSION_FORMAT \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String INSURANCE_VALIDATION_REGEX \u003d  INSURANCE_NAME + COMMISSION_FORMAT;"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public final String insuranceName;"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * @param insurance A valid insurance."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Insurance(String insurance) {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(insurance);"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        checkArgument(isValidInsurance(insurance), MESSAGE_INSURANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.insuranceName \u003d insurance;"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Returns true if a given string is a valid insurance."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static boolean isValidInsurance(String test) {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return test.matches(INSURANCE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return insuranceName;"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            || (other instanceof Insurance // instanceof handles nulls"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            \u0026\u0026 this.insuranceName.equals(((Insurance) other).insuranceName)); // state check"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return insuranceName.hashCode();"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 284,
      "-": 349
    }
  },
  {
    "path": "collated/functional/limzk1994.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# limzk1994"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/commons/util/EncryptionUtil.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class EncryptionUtil {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "     *The standard version of the JRE/JDK are under export restrictions."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "     *That also includes that some cryptographic algorithms are not allowed to be shipped in the standard version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     *Replace files in library with Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files 8"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String password \u003d \"CS210321CS210321\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EncryptionUtil.class);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encrypts XML file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file path of the file to be encrypted"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if file could not be found"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void encrypt(File file) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Cipher cipher \u003d Cipher.getInstance(\"AES/ECB/PKCS5Padding\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            SecretKey secretKey \u003d generateKey();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            cipher.init(Cipher.ENCRYPT_MODE, secretKey);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            fileToBytes(cipher, file);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (GeneralSecurityException gse) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Cipher or Padding might not be supported \" + gse.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (UnsupportedEncodingException use) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Encoding Unsupported \" + use.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decrypts XML file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file path of the file to be decrypted"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if file could not be found"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void decrypt(File file) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            Cipher cipher \u003d Cipher.getInstance(\"AES/ECB/PKCS5Padding\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            SecretKey secretKey \u003d generateKey();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            cipher.init(Cipher.DECRYPT_MODE, secretKey);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            fileToBytes(cipher, file);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (GeneralSecurityException gse) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Cipher or Padding might not be supported \" + gse.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (UnsupportedEncodingException use) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Encoding Unsupported \" + use.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Processes the given file using the given cipher"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cipher cipher used for encryption or decryption"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file path of the file to be encrypted or decrypted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if file could not be found"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void fileToBytes(Cipher cipher, File file) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        FileInputStream fileInputStream \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        FileOutputStream fileOutputStream \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            fileInputStream \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            byte[] readBytes \u003d new byte[(int) file.length()];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            fileInputStream.read(readBytes);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            byte[] writeBytes \u003d cipher.doFinal(readBytes);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fileOutputStream \u003d new FileOutputStream(file);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            fileOutputStream.write(writeBytes);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (BadPaddingException be) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"File might not decoded/encoded properly due to bad padding \" + be.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalBlockSizeException ibe) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Input length size must be in multiple of 16  \" + ibe.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                if (fileInputStream !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                    fileInputStream.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                if (fileOutputStream !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                    fileOutputStream.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"File streams could not be closed  \" + ioe.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to generate a SecretKey using the password provided"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return SecretKey generated using AES encryption"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static SecretKey generateKey() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        SecretKeySpec secretKeySpec \u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            MessageDigest digester \u003d MessageDigest.getInstance(\"SHA-256\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            digester.update(password.getBytes(\"UTF-8\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            byte[] key \u003d digester.digest();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            secretKeySpec \u003d new SecretKeySpec(key , 0 , 16 ,  \"AES\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchAlgorithmException nae) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Algorithm Unsupported \" + nae.getMessage());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (UnsupportedEncodingException use) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Encoding Unsupported \" + use.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return secretKeySpec;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/parser/GroupCommandParser.java"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "public class GroupCommandParser implements Parser\u003cGroupCommand\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GroupCommand"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an GroupCommand object for execution."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public GroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String[]groupKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GroupCommand(new PersonContainsGroupsPredicate(Arrays.asList(groupKeywords)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/parser/PasswordCommandParser.java"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses the inputs and create a PasswordCommand object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "public class PasswordCommandParser implements Parser\u003cPasswordCommand\u003e {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public PasswordCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SET, PREFIX_CHANGE, PREFIX_REMOVE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (arePrefixesPresent(argumentMultimap, PREFIX_SET)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return new PasswordCommand(new PasswordCommand.setPassword(argumentMultimap.getValue(PREFIX_SET).get()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (arePrefixesPresent(argumentMultimap, PREFIX_REMOVE)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return new PasswordCommand(new PasswordCommand.clearPassword("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                    argumentMultimap.getValue(PREFIX_REMOVE).get()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (arePrefixesPresent(argumentMultimap, PREFIX_CHANGE)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            final String newPassword \u003d argumentMultimap.getValue(PREFIX_CHANGE).get();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(newPassword);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newPassword.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(\"Password cannot be blank!\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            return new PasswordCommand(new PasswordCommand.changePassword(newPassword));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/commands/SortCommand.java"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "public class SortCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted all clients!\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public SortCommand(){"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e shownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        if (shownList.isEmpty()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_PERSON_LIST_EMPTY);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        model.sortFilteredPersonList(shownList);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/commands/PasswordCommand.java"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " * Contain methods to modify the password"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "public class PasswordCommand extends Command {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"password\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"pw\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Set, change or remove password\\n\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Set Password Parameters:\" + COMMAND_WORD + \" set/yourchosenpassword\\n\""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Change Password Parameters:\" + COMMAND_WORD + \" change/yournewpassword\\n\""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Remove Password Parameters: \" + COMMAND_WORD + \" remove/youroldpassword\\n\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Password set!\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PASSWORD_CHANGE \u003d \"Password successfully changed!\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PASSWORD_EXISTS \u003d \"Password already exists!\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PASSWORD_REMOVE \u003d \"Password removed!\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_PASSWORD_EXISTS \u003d \"No password!\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_WRONG_PASSWORD \u003d \"Wrong password!\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PasswordMode mode;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an PasswordCommand"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public PasswordCommand(PasswordMode mode) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            return mode.execute();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Password File not found\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set password if it does not exists"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class setPassword extends PasswordMode {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        public setPassword(String password) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            super(password);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        public CommandResult execute() throws IOException, CommandException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            if (passExists()) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(MESSAGE_PASSWORD_EXISTS);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                PasswordManger.savePassword(getPass());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes password if it exists"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class clearPassword extends PasswordMode {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        public clearPassword(String password) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            super(password);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        public CommandResult execute() throws IOException, CommandException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            if (passExists()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                    PasswordManger.removePassword(getPass());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (WrongPasswordException e) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new CommandException(MESSAGE_WRONG_PASSWORD);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(MESSAGE_PASSWORD_REMOVE);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(MESSAGE_NO_PASSWORD_EXISTS);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * Changes password if it exists"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class changePassword extends PasswordMode {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        private String newPass;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        public changePassword(String newPassword) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            super(newPassword);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            newPass \u003d newPassword;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        public CommandResult execute() throws IOException {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            if (passExists()) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "                PasswordManger.savePassword(newPass);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(MESSAGE_PASSWORD_CHANGE);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(MESSAGE_NO_PASSWORD_EXISTS);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/commands/GroupCommand.java"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "public class GroupCommand extends Command {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"group\";"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"g\";"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Groups listed!\";"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Group all persons whose group attribute is\""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Priority\";"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PersonContainsGroupsPredicate predicate;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    public GroupCommand(PersonContainsGroupsPredicate predicate) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof GroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((GroupCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/storage/PasswordManger.java"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": " * Accesses the password file stored on the hard disk"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "public class PasswordManger {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param password user\u0027s password"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if file could not be found or created"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void savePassword(String password) throws IOException {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        File file \u003d new File(getFilePath());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(file);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(file, password);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        EncryptionUtil.encrypt(file);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "     * Check whether to unlock the program"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param password"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean verifyPassword(String password) throws IOException {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean unlock \u003d passwordCheck(password);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        if (unlock) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "            EventsCenter.getInstance().post(new PasswordAcceptedEvent());"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        return unlock;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes existing password if user input the correct password"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param password oldpassword to be checked"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if file does not exists"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void removePassword(String password) throws IOException, WrongPasswordException {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        File file \u003d new File(getFilePath());"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        if (passwordCheck(password) \u0026\u0026 FileUtil.isFileExists(file)) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new WrongPasswordException();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "     * Check if password is correct"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param password to be checked against records"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if password exists, vice-versa"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean passwordCheck(String password) throws IOException {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        String storedPassword \u003d getPassword();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        return storedPassword.equals(password);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "     * Check if the password exists"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if password exists, vice-versa"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean passwordExists() {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        File file \u003d new File(getFilePath());"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        return FileUtil.isFileExists(file);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to get the password"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return password"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if file could not be found"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPassword() throws IOException {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        File file \u003d new File(getFilePath());"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        EncryptionUtil.decrypt(file);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        String password \u003d FileUtil.readFromFile(file);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "        EncryptionUtil.encrypt(file);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to get the file path of password"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return file path"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getFilePath() {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        String filePath \u003d userPrefs.getPasswordFilePath();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/person/PersonContainsGroupsPredicate.java"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonContainsGroupsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonContainsGroupsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getGroup().groupName, keyword));"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof PersonContainsGroupsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((PersonContainsGroupsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/person/ReadOnlyPersonComparator.java"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "public class ReadOnlyPersonComparator implements Comparator\u003cPerson\u003e {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compare(Person personA, Person personB) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        return personA.getName().compareTo(personB.getName());"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/person/Group.java"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "public class Group {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_GROUP_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Person group should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String GROUP_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String groupName;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param group A valid group."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "    public Group(String group) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidGroup(group), MESSAGE_GROUP_CONSTRAINTS);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "        this.groupName \u003d group;"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid group."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidGroup(String test) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return test.matches(GROUP_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return groupName;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Group // instanceof handles nulls"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.groupName.equals(((Group) other).groupName)); // state check"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return groupName.hashCode();"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/person/UniqueGroupList.java"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniqueGroupList implements Iterable\u003cGroup\u003e {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cGroup\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs empty Group List."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public UniqueGroupList() {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a UniqueGroupList using given tags."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "     * Enforces no nulls."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniqueGroupList(Group groups) {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(groups);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.addAll(groups);"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the Groups in this list with those in the argument group list."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGroups(UniqueGroupList groups) {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(groups);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(groups.internalList);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGroups(List\u003c? extends Group\u003e groups) throws DuplicateGroupException {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "        final UniqueGroupList replacement \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "        for (final Group group : groups) {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "            replacement.add(group);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "        setGroups(replacement);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures every tag in the argument list exists in this object."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "    public void mergeFrom(UniqueGroupList from) {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "        final UniqueGroupList alreadyInside \u003d this;"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "        from.internalList.stream()"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(group -\u003e !alreadyInside.contains(group))"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(internalList::add);"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent Group as the given argument."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Group toCheck) {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a Tag to the list."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicateGroupException if the Group to add is a duplicate of an existing Tag in the list."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Group toAdd) throws DuplicateGroupException {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cGroup\u003e iterator() {"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cGroup\u003e asObservableList() {"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniqueGroupList // instanceof handles nulls"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueGroupList) other).internalList));"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class DuplicateGroupException extends DuplicateDataException {"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        protected DuplicateGroupException() {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        super(\"Operation would result in duplicate groups\");"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 13,
      "-": 613
    }
  },
  {
    "path": "collated/test/Sebry9.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Sebry9"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/ui/PersonCardTest.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        // with default color Tags"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personWithDefaultColorTag \u003d new PersonBuilder().withTags(\"default\").build();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        personCard \u003d new PersonCard(personWithDefaultColorTag, 3);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithDefaultColorTag, 3);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard copy \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(copy));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(personCard));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person, same index -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, different index -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(person, 1)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify person details are displayed correctly"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplaysPerson(expectedPerson, personCardHandle);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/ui/testutil/GuiTestAssert.java"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Phone: \" + expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Email: \" + expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Address: \" + expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Group: \" + expectedPerson.getGroup().groupName, actualCard.getGroup());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTagsEqual(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/ui/testutil/GuiTestAssert.java"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Return the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * @see PersonCard#getTagColorStyleFor(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        switch(tagName) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"friends\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"friend\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"family\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return \"yellow\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"teacher\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"classmates\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"husband\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return \"blue\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"enemy\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"owesMoney\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return \"red\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"grandparent\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"neighbours\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"purple\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"colleagues\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"orange\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"grey\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Assert that the tags in {@code actualCard} is aligned with {@code expectedPerson}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertEquals(expectedTags, actualCard.getTags());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        expectedTags.forEach(tag -\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagColorStyleFor(tag)),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                    actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/parser/EditCommandParserTest.java"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // birthday"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withBirthday(VALID_BIRTHDAY_AMY).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // appointment"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + APPOINTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAppointment(VALID_APPOINTMENT_AMY).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // group"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + GROUP_DESC_AMY;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withGroup(VALID_GROUP_AMY).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // insurance"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INSURANCE_DESC_AMY;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withInsurances(VALID_INSURANCE_AMY).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/parser/AddressBookParserTest.java"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommandAlias_add() throws Exception {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommandWithAlias(person));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/parser/AddressBookParserTest.java"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommandAlias_clear() throws Exception {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/parser/AddressBookParserTest.java"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommandAlias_delete() throws Exception {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/parser/AddressBookParserTest.java"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommandAlias_edit() throws Exception {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD_ALIAS + \" \""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/parser/AddressBookParserTest.java"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommandAlias_find() throws Exception {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/parser/AddressBookParserTest.java"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_fingTag() throws Exception {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"friends\", \"oweMoney\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        FindTagCommand command \u003d (FindTagCommand) parser.parseCommand("
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            FindTagCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindTagCommand(new PersonContainsTagsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/parser/AddressBookParserTest.java"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommandAlias_help() throws Exception {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD_ALIAS) instanceof HelpCommand);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/parser/AddressBookParserTest.java"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommandAlias_history() throws Exception {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/parser/AddressBookParserTest.java"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_count() throws Exception {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(CountCommand.COMMAND_WORD) instanceof  CountCommand);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/parser/AddressBookParserTest.java"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommandAlias_select() throws Exception {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/parser/AddressBookParserTest.java"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommandAlias_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD_ALIAS) instanceof RedoCommand);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/parser/AddressBookParserTest.java"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommandAlias_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD_ALIAS) instanceof UndoCommand);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/parser/AddCommandParserTest.java"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parse_optionalInsurancesMissing_success() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // zero insurances"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .withGroup(VALID_GROUP_AMY).withInsurance().build();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "            + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/parser/AddCommandParserTest.java"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB,"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB,"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB,"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB,"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // missing birthday prefix"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                    + VALID_BIRTHDAY_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB,"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // missing group prefix"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + VALID_GROUP_BOB + INSURANCE_DESC_BOB,"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + VALID_BIRTHDAY_BOB + VALID_APPOINTMENT_BOB + VALID_GROUP_BOB + VALID_INSURANCE_BOB,"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // invalid commission"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INVALID_COMMISSION_DESC,"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            Insurance.MESSAGE_INSURANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // invalid insurance"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INVALID_INSURANCE_DESC,"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            Insurance.MESSAGE_INSURANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB,"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/commands/SortCommandTest.java"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for SortCommand."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_sortByName_success() throws Exception {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "        SortCommand sortCommand \u003d prepareCommand(model);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d SortCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.sortFilteredPersonList(model.getFilteredPersonList());"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(sortCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_sortTwoPersonsList_success() throws Exception {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d PREFIX_NAME;"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBookBuilder().withPerson(getTypicalPersons().get(1))"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPerson(getTypicalPersons().get(0)).build();"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelWithTwoPersons \u003d new ModelManager(ab, new UserPrefs());"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "        SortCommand sortCommand \u003d prepareCommand(modelWithTwoPersons);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d SortCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(modelWithTwoPersons.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.sortFilteredPersonList(model.getFilteredPersonList());"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(sortCommand, modelWithTwoPersons, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_sortEmptyList_throwsCommandException() {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d PREFIX_EMAIL;"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "        Model emptyModel \u003d new ModelManager(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_PERSON_LIST_EMPTY;"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(prepareCommand(emptyModel), model, expectedMessage);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a new {@code SortCommand} with the Model and prefix given."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "    private SortCommand prepareCommand(Model model) {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand();"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "        sortCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "        return sortCommand;"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/storage/XmlAdaptedPersonTest.java"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidInsurances_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedInsurance\u003e invalidInsurances \u003d new ArrayList\u003c\u003e(VALID_INSURANCE);"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidInsurances.add(new XmlAdaptedInsurance(INVALID_INSURANCE));"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "            new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_BIRTHDAY,"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_APPOINTMENT, VALID_GROUP, invalidInsurances);"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/storage/XmlSerializableAddressBookTest.java"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidInsuranceFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_INSURANCE_FILE,"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/UniqueInsuranceListTest.java"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "public class UniqueInsuranceListTest {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        UniqueInsuranceList uniqueInsuranceList \u003d new UniqueInsuranceList();"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        uniqueInsuranceList.asObservableList().remove(0);"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/AddressBookTest.java"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getGroupList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getGroupList().remove(0);"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/AddressBookTest.java"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getInsuranceList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getInsuranceList().remove(0);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons, tags lists and insurances list can violate interface constraints."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cGroup\u003e groups \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cInsurance\u003e insurances \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags,"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "                        Collection\u003c? extends Insurance\u003e insurances) {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags.setAll(tags);"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "            this.insurances.setAll(insurances);"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "            return tags;"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cGroup\u003e getGroupList() {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "            return groups;"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cInsurance\u003e getInsuranceList() {"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "            return insurances;"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/Insurance/InsuranceTest.java"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "public class InsuranceTest {"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Insurance(null));"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidInsuranceName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidInsuranceName \u003d \"@Health\";"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Insurance(invalidInsuranceName));"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void isValidInsurance() {"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        //null insurance name"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Insurance.isValidInsurance(null));"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/Insurance/CommissionTest.java"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommissionTest {"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Insurance(null));"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidCommission_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommission \u003d \"Health[-100]\";"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Insurance(invalidCommission));"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/testutil/EditPersonDescriptorBuilder.java"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Insurance} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withInsurance(String... insurances) {"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cInsurance\u003e insuranceSet \u003d Stream.of(insurances).map(Insurance::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setInsurances(insuranceSet);"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withBirthday(String birthday) {"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setBirthday(new Birthday(birthday));"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAppointment(String appointment) {"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAppointment(new Appointment(appointment));"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Group} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withGroup(String group) {"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setGroup(new Group(group));"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code insurances} into a {@code Set\u003cInsurance\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withInsurances(String... insurances) {"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cInsurance\u003e insuranceSet \u003d Stream.of(insurances).map(Insurance::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setInsurances(insuranceSet);"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 84,
      "-": 632
    }
  },
  {
    "path": "collated/unused/Sebry9-unused.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Sebry9-unused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "###### /ProfilePic.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * Represents a Person\u0027s Profile picture in reInsurance."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * Guarantees: immutability and validity."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * Unused reason: Group deem that it is not significant addition to the application and decided to cease it due to"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * deadline being too tighted."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "public class ProfilePic {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String DEFAULT_PHOTO \u003d\"/images/default.png\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ProfilePic.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String MESSAGE_PHOTO_CONSTRAINTS \u003d \"Profile Picture: \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        + \"specified file does not exist.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String MESSAGE_PHOTO_COPY_ERROR \u003d \"Error copying photo to reInsurance\u0027s data directory\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String DEFAULT_SAVE_DIR \u003d \"data\" + File.separator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String ALLOWED_TYPE_JPG \u003d \".jpg\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String ALLOWED_TYPE_JPEG \u003d \".jpeg\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String ALLOWED_TYPE_PNG \u003d \".png\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final int MAX_SIZE \u003d 1000000; // Sets allowable maximum profile picture size to be 1MB"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public final String picture;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Validates given Profile picture."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * @throws IllegalValueException if given profile picture string is invalid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public ProfilePic(String filePath) throws IllegalValueException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (filePath \u003d\u003d null || filePath.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            this.picture \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        } else if (isDefaultPhoto(filePath)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            this.picture \u003d filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            String trimmedPhotoPath \u003d filePath.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            if (!isValidPhoto(trimmedPhotoPath)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                throw new IllegalValueException(MESSAGE_PHOTO_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                File from \u003d new File(trimmedPhotoPath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                this.picture \u003d DEFAULT_SAVE_DIR + from.getName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                Path to \u003d Paths.get(this.picture);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                copyPhotoToDefaultDir(from.toPath(), to);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Return if string give is valid and within size limits"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static boolean isValidPhoto(String test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        File file \u003d new File(test);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return file.exists()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            \u0026\u0026 file.length() \u003c\u003d MAX_SIZE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            \u0026\u0026 (test.endsWith(ALLOWED_TYPE_JPG)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            || test.endsWith(ALLOWED_TYPE_JPEG)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            || test.endsWith(ALLOWED_TYPE_PNG));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Return path to default photo"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static boolean isDefaultPhoto(String filePath) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return filePath.equals(DEFAULT_PHOTO);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Copies the photo from Path {@code from} to Path {@code to}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static void copyPhotoToDefaultDir(Path from, Path to) throws IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            Files.createDirectories(Paths.get(DEFAULT_SAVE_DIR));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            Files.copy(from, to, REPLACE_EXISTING);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            logger.info(\"Display photo error: \" + io.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            throw new IllegalValueException(MESSAGE_PHOTO_COPY_ERROR);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Returns file path for user-specified display photos."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public String getAbsoluteFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (isDefaultPhoto(picture)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return picture;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return \"file://\" + Paths.get(picture).toAbsolutePath().toUri().getPath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return picture;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            || (other instanceof ProfilePic // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            \u0026\u0026 this.picture.equals(((ProfilePic) other).picture)); // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return picture.hashCode();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 103,
      "-": 9
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "reInsurance was developed by the CS2103JAN2018-T11-B3 team. +"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d David John Dalmaso"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::daviddalmaso.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://daviddalmaso.github.io/[homepage]] [https://github.com/CS2103JAN2018-T11-B3/main/blob/master/docs/team/daviddalmaso.adoc[Portfolio]]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Software Engineer +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Kion Shi Rong"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "image::cambioforma.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/cambioforma[github]][https://github.com/CS2103JAN2018-T11-B3/main/blob/master/docs/team/cambioforma.adoc[Portfolio]]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Lim Zheng Kai"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::zhengkai.jpeg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/limzk1994[github]][https://github.com/CS2103JAN2018-T11-B3/main/blob/master/docs/team/ZhengKai.adoc[Portfolio]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Data"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "\u003d\u003d\u003d Jeremy Lee Jun Wei"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "image::Sebry9.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "{empty}[https://github.com/Sebry9[github]][https://github.com/CS2103JAN2018-T11-B3/main/blob/master/docs/team/Sebry9.adoc[Portfolio]]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sebry9": 4,
      "-": 42
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d reInsurance - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `1.8.0_60`* or later"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Having any Java 8 version is not enough. +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with earlier versions of Java 8."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the reInsurance data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicCommandClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the reInsurance data."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the reInsurance data in xml format and read it back."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicCommandClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that are not undoable are implemented this way:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... list logic ..."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "With the extra layer, the commands that are undoable are implemented this way:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UndoableCommand extends Command {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... undo logic ..."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        executeUndoableCommand();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... delete logic ..."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Hard for new developers to understand the template pattern."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Just override `execute()`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Does not involve the template pattern, easier for new developers to understand."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Include all commands."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Might be more intuitive for the user."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use separate stack for undo and redo"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::findtag[]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Find person by tag feature"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "The idea for this features is to allow users to find persons by their tag(s)."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "Some insurance policies are targeted to a certain group of people, e.g married."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "This is so that the user will be able to view persons that belong to certain categories as they will have certain tag(s) which will represent categories of clients."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "The feature can be used via the `findtag` command"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of findtag command (Since v1.3)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice): ** Implementation of findtag as a new command"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Command is easy to use"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Unable to find person by both person tag and person name"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Implementation of findtag as part of the find command"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Able to find person by both person tag and person name"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Takes slightly longer to find a person by tag"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of find command (Coming in v2.0)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice): ** find command can find by name and/or tag(s)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: find command has increased search flexibility"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: find and findtag command has overlapping functionality"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** findtag command can find by name and/or tag(s)"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: findtag command has increased search flexibility"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Less intuitive as findtag is more specific to tags only"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "// end::findtag[]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::appointments[]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Notifications with Clients"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "The idea for this feature is to allow users to receive notifications for matters regarding their clients."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "This is so that the user will be able to be reminded of matters regarding their many clients and not lose track of events."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "A calendar view also provided so that it is easier for the user to have a good overview of the upcoming events as well as events in the month."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "Appointments and Birthdays will be created as a class on it\u0027s own. It is then added as an attribute of the person class."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "The calendar view will then check all persons for any appointments and birthday and display them accordingly."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "It will then trigger a notification when it is the day of the event."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "Appointments prefix \"d/\" has been added to the add command so that users can add appointments with the person."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "Birthday prefix \"b/\" has been added to the add command so that users can add the birthday of clients."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Birthdays (Since v1.5rc)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice): ** Implementation of Birthdays as an attribute of Person"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Birthdays are merged with existing commands as a prefix"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Unable to add more attributes to birthday without breaking current convention"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Implementation of Birthdays as class with Person as an attribute"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Other attributes can be added to birthdays e.g Location"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: A lot of restructuring of existing code required"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Appointments (Since v1.5rc)"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice): ** Implementation of Appointments as an attribute of Person"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Appointments are merged with existing commands as a prefix"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Unable to add more attributes to appointment without breaking current convention"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Implementation of Appointments as class with Person as an attribute"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Other attributes can be added to appointments e.g Location"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: A lot of restructuring of existing code required"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of viewing Appointments (Since v1.5rc)"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice): ** Implementation View as Calendar View"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to have an overview for the current month"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires more display space and limits views by month"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Implementation of View as List"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to integrate with current set up and can view more information in a smaller space"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Have to read each date of each event to get a general feel of the upcoming events"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Notifications (Coming in v2.0)"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice): ** Implementation of Notifications as a side panel"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Notifications are neatly organised and easily reviewed"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Notifications might be missed if user does not review them"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Implementation of Notifications as a Popup Alert"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Requires user interaction therefore it ensures that user has been notified"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Pop ups might be unwelcome as they can interrupt current user tasks"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "// end::appointments[]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::count[]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Count command"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "*Since V1.5*"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "* The count command allows the users to view the current number of clients stored in the reInsurance application."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of CountCommand"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": " *  *Alternative 1 (current)*: Return length of stored `Person` array"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": " ** Pros: Simple implementation. Little room for bugs."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": " ** Cons: Does not allow for easy enhancements to be made to the command"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": " *  *Alternative 2 (coming in V2.0)*: Implementation of a more robust `Statistics` command"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": " ** Pros: Allows the user to specify different statistics to return about the reInsurance data other than just the number of clients"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": " ** Cons: May be a difficult implementation for a feature that could possibly not get very used."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "// end::count[]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::sort[]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Sort command"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "*Since V1.5*"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "The sort command allows the users to sort their clients according to the lexicographical order of their name. It is facilitated by a custom comparator. The sort command would be implemented as an undoable command."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the sortCommand operation works."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "image::sortdia.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "In the sequence diagram, the sortCommand is passed to the AddressBookParser, which executes the parseCommand method. The Model then executes the sortedFilteredPersonList,  which sorts the internalList using a comparator."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose that the user has a list of clients in the application as shown in the diagram below, after executing the command, the list of clients will be as follows."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "image::sortedlist.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of SortCommand"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (Current):** Implementation of SortCommand as a command that is not undoable"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: The SortCommand will be easier for developers to implement this way."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Users that wish to revert the changes made might not be able to do so and this will decrease the usability of the program."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2 (Prospective):** Implementation of SortCommand as a undoable command"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Users that wish to revert the changes made will be able to do so, thus increasing the usability of the program."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: The SortCommand will be harder for developers to implement."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Parameters of the SortCommand"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (Current):** Implementation of SortCommand as a command that only allows users to sort clients according to their names in lexicographical order."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: The SortCommand will be easier for developers to implement as it only needs to sort the names of the internalList."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Usability is low as the client might wish to sort clients according to their commissions earned."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2 (Prospective):** Implementation of SortCommand as a command that allows users to sort clients according to multiple parameters such as commission"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: This will allow the user to have a more organised view of all data in the program."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Although this might increase usability, the usability might actually decrease as the user will need to remember more commands for the SortCommand, which might not be ideal since this is a command line style address book."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "// end::sort[]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::group[]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Group Command"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "*Since V1.5*"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "The Group feature will allow users to group their clients according to a specified group."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "Users will be required to add their clients to a group when adding a new user. Users can change the grouping of their clients later on if they wish to do so."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Group"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "* ** Alternative 1:** Requires users to specify the group of the client when adding a new client"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: It will easier for developers to implement this way."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Users of the application might not know which group to place the clients into when adding a new client."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "* ** Alternative 2:** Allow users to add the group of the client after they have added a new client"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Users will have time to decide how to group their clients after a period of time. i.e If the user wants to group their clients according to their commissions paid, it can only be done so after the client has been with the user for a period of time."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Some clients might not have any groupings. Developer will need an extra command to list those clients without any groupings."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "// end::group[]"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "// tag::insurance1[]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "\u003d\u003d\u003d Insurance with information of commission"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "*Since V1.4*"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "* Insurance is tagged to a person with the format: \"INSURANCE[COMMISSION]\""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "* A particular client is tagged to 0 or more insurance plan, along with each insurance plan, user should input commission inside square bracket (\"[]\")"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "* Total commission yield by a particular client is then caclulated and displayed in the personCard."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Insurance"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "// end::insurance1[]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "image::InsuranceClassInModel.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "// tag::insurance2[]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " *  **Alternative 1(current choice):** Create an Insurance class"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " ** Pros: Distinction between insurance and person, Insurance can exist without person."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " ** Cons: Harder to implement and possibly of a overlapping test cases."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " *  **Alternative 2:** Let insurance be under a special tag class and create subsequent child classes."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " ** Pros: Easier to implement and direct and not distinct objective of a tag/insurance."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " ** Cons: Harder to handle error (unsure of what cause the bug)."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Calculating the total commission per client"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * **Alternative 1(current choice):** Commission is tagged to person, when a insurance is added it will add to existing commission"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " ** Pros: Easier to calculate client based commission"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " ** Cons: May be difficult to get overall total commission"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * **Alternative 2:**Create a storage to keep all commission"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " ** Pros: Easy to calculate overall total commission"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " ** Cons: Difficult to allocate commission to their respective client."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Editing and Removing of Insurance"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "* **Alternative 1(current choice):** Use current edit command and add on the capability to replace the new set of insurance"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "** Pros: Increase usability as user do not need to learn how to use a new function and just make use of existing commands"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "** Cons: User lose the ability to edit individual insurance plan as the current edit implementation simply remove old insurance and add in the new set"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "* **Alternative 2:** Add in another command specifically just for editing of insurance"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "** Pros: Individual insurance plan can now be edited."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "** Cons: User need to know another set of command and may prove to be confusing since it share the same nature as a current command(edit)."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storing Insurance"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "* **Alternative 1(current choice):** An XML file is created for insurance plan to be stored"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "** Pros: Easily managed as the behavior is similar to tag"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "** Cons: Unsure of usage apart from storing the data and checking duplicate."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "// end::insurance2[]"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::encryption[]"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Data Encryption"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "*Since V1.5*"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "Client’s data is stored in an XML file in plain text is not secure, hence the need to encrypt XML data."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "Data is encrypted using a AES-256 bits encryption. File is automatically encrypted when the reInsurance closes and decrypted when the reInsurance is started."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "The current implementation is just a proof of concept and will be improved upon in upcoming version."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "The standard version of the JRE/JDK are under export restrictions. That also includes that some cryptographic algorithms are not allowed to be shipped in the standard version."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "Replace files in library with Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files 8. Download the files http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html[Here]."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of SecretKey"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1(Current):** Using a password based encryption key"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Data Encryption will be easier for developers to implement this way. Secret key will not be exposed."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Password for the key is fixed and predetermined."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2(Prospective):** Use the Java Cryptography Extension KeyStore"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Encryption keys will not be exposed"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Harder for developers to code"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Strength of the encryption"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (Current):** 128-bits encryption"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Using 128-bits encryption will be much faster and requires less computation resources"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Less stronger but still secure encryption"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2 (Prospective):** 256-bits encryption"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: 256-bits provide much stronger encryption"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires more computation resources and might be a tad slower, albeit negligible"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "// end::encryption[]"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::password[]"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Password feature"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "*Since V1.5*"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "As reInsurance contains sensitive client\u0027s data, apart from encrypting the XML data files, we have to keep it away from prying eyes."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "As such, we could implement a password to protect the data. The password will be encrypted and store as a local copy."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "In addition the XML file will be unlocked when the password is entered to allow power users to edit the XML file."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "The password feature will be created as a class of it\u0027s own. There will be no default password for ease of use of the program."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "Users can decide whether to set a password. The current implementation is just a proof of concept and will be improved upon in upcoming version."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram shows how the password command works. In the following diagram, the `password set/123` is executed."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "image::passdia.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Password length and strength"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (Current):** Password will be stored using Strings."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Users will be able to key in alphanumeric password and developers can encoded the Strings easily."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Harder to implement than a purely numerical password"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Password will be numerical"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Developer will be able to code it easily"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Password will be weaker, able to brute force through"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storage of password file"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (Current):** Password will be stored in a encrypted file"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: File will be accessible but encrypted, making it safer"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Developer will need to encrypt the file"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Password will be stored in a plain text file"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easier to store and retrieve password"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Akin to not having a password since it is easily accessible"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "*Coming in V2.0*"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "In the event that the users forget their password, the current implementation does have a way for the users to recover their password."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "In V2.0, the user\u0027s password will be sent to the email that is linked to the user\u0027s calendar if requested."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "Lastly, password will be hashed and salted instead of being encrypted with a key."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "//end:: password[]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::export[]"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exporting"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "The export command allows the user to export the data that is normally stored within the application to an outside, nicely formatted manner."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "The two main pieces of data to export are the information about the persons in the reInsurance application as well as the birthdays and appointments of each person."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "In terms of implementation, the export command works in similar fashion to most commands. The important part is the EXPORT_TYPE field which is discussed in section `3.6.3`."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: Implementation of Export Command"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alternative 1 (Current)*: Accepts and handles individual export types"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Requests can be made without the user needing to craft complicated commands"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Little flexibly in the ability to specify what data is wanted outside of provided export types"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alternative 2*: General `ExportData` class"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Can more flexibly specify export types and what pieces of data to export"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: More cumbersome to make the export request"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: Portfolio export location"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alternative 1 (Current)*: .csv File"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Common file type that can be uploaded to different applications (i.e. Microsoft Excel)"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Ugly file when viewed without application to format the data nicely"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alternative 2*: .pdf File"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Ability to layout the data in a way produce a clean looking report of the portfolio"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Cannot easily edit contents of the file after it has been created"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Calendar export location"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alternative 1 (Current)*: Google Calendar"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: More practical place to store and view calendar events"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Difficulty of set up and room for connectivity errors"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alernative 2*: .ics file"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Can be uploaded to calendar services other than just Google Calendar"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Longer process to get the calendar uploaded (need to go specific service and import the file)"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "// end::export[]"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, reInsurance depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "* is an insurance agent"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* * *` |user |add a new client | track the client"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* * *` |user |add multiple client | track the number of clients I have"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* * *` |user |remove my client | remove entries that I no longer need"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* * *` |user |sort the client based on different category |directly get the type of data I want"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* * *` |user |add my client’s personal detail  |know more about them"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* * *` |user |update my client\u0027s personal detail |keep their information up to date"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* * *` |user |search for a single client |narrow down to the client I am interested in in that time"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* * *` |user |clear the address book |start on a clean slate"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* * *` |user |exit my application |exit the application once I am done with it"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* * *` |user |add remarks of my client |remember my personal comment of the client"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "// tag::sebryStory1[]"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* * *` |user |add the insurance plans that my clients are committed |track what plans he/she has"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* * *` |user |edit my client\u0027s insurance plan |keep the latest plan updated"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* * *` |user |delete my client\u0027s insurance plan |remove undesired plans yet keeping his/her contacts available"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* * *` |user |add in how much commission I am getting off my client’s insurance plan|calculate my commission"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* * *` |user |view the commission I get off a client |see how much I am earning off them"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* * *` |user |edit the commission I get off a client |update how much I am earning off them"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* * *` |user |erase the commission I get off a client |remove the amount I am getting off that insurance plan"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* * *` |user |rank my clients |to serve them better"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "// end::sebryStory1[]"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |group my clients|to manage the different groups differently"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add the birthday date of my client |keep track of my client\u0027s birthday"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |edit the birthday date of my client |update it in case I got their birthday wrong at a earlier date"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add the appointment date I have with my client |schedule a meeting date with a client"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |edit the appointment date I have with my client |make changes to the meeting date with a client"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete the appointment date I have with my client |cancel a meeting date with a client"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |view the appointment date I have with my client |keep track of the next meeting with a client"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* * *` |user |view appointment on the calendar |have a more organized view of my schedule and at the same time plan for future appointment"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* * *` |user |secure my address book by having a password in place| keep my clients data protected"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |export a calendar of my appointments and client birthdays |can use the data on a calendar outside of the application"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* *` |user |receive notification 3 day prior to my client\u0027s appointment date |ensure that I will not miss it"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* *` |user |check the history of my command |know what I have done"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* *` |user |undo the previous command |retrieve lost information caused by accidents"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* *` |user |redo the undo actions |trace what I have undid."
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* *` |user |create a new address book |use it for other purposes"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |export a portfolio of my clients |can use the data of the application elsewhere"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* *` |user |hide some of my client\u0027s information |minimize the leak of my client\u0027s information"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* *` |user |sort persons by name (by default) |view the address book in an organized manner"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* *` |user |receive notification of my client\u0027s birthday |keep in touch with my clients"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* *` |user |add in password access to my address book |be viewed/edited only by allowed users"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* *` |user |change my password |further secure my address book"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "// tag::sebryStory2[]"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`* *` |user |use alias for my commands |increase my efficiency in using the app"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "// end::sebryStory2[]"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "|`*` |user |request access to other address book |seek potential customer from leaving colleague"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `ClientBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "2.  reInsurance shows a list of persons"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "4.  reInsurance deletes the person"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. ClientBook shows an error message."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use case: Add person"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "1. User request to add person by specifying their details"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "2. ClientBook adds the person"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "3. ClientBook shows success message"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. Person already exists in ClientBook."
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "** 2a1. ClientBook shows error message."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given input is invalid."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. ClientBook shows error message."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use case: Edit person"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests to edit person by entering person’s name and new parameter(s)"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "2. ClientBook shows confirm message."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "3. User confirms to edit the Person."
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "4. ClientBook edits the Person’s given parameter(s)."
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "5. ClientBook shows the edited person entry."
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. Person does not exist in the ClientBook."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "** 2a1. ClientBook shows error message."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given input is invalid."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. ClientBook shows error message."
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use case: Add Appointment"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests to add appointment with person by entering person\u0027s name and appointment date and time."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "2. ClientBook adds the appointment."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "3. ClientBook shows the added appointment entry"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. Person does not exist in the ClientBook."
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "** 2a1. ClientBook shows error message."
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given date is invalid."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. ClientBook shows error message."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use case: Delete Appointment"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests to delete appointment with person by entering person\u0027s name."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "2. ClientBook shows list of appointments."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "3. User requests to delete a specific appointment in the list."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "4. ClientBook deletes the appointment."
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. ClientBook shows an error message."
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use case: View Commission from Client"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests to view commission of client by entering person\u0027s name."
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "2. ClientBook shows commission earned from client."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. Person does not exist in the ClientBook."
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "** 2a1. ClientBook shows error message."
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use case: View Total Commission"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests to view total commission."
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "2. AddressBook shows total commission."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should come with open source code."
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to be used with any OS."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should allow the user to not have to use their mouse."
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be secure from users trying to enter malicious commands."
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be intuitive for any user that has experience using an address book (i.e add,delete,sort,list)"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to respond to queries from users within 1 second"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to export portfolio of clients to a .csv file"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to export calendar of appointments and client birthdays to a .ics file"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to assist the user in better managing his client database by providing a dashboard view of his client information"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to work without an internet connection"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "[[User]] User::"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": "An User is defined as the insurance agent"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-OS]] Mainstream OS::"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "A mainstream OS includes Windows, Linux, Unix and OS-X"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "[[client-information]] Clients\u0027s Information::"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": "Client\u0027s Information includes all personal details and metrics"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": ". Closing the program"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": ".. Use the `exit` command"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": ".. Alternatively, move the mouse over the File section of the navigation bar then clicking `exit` +"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Program should finish with exit code 0. Program should be closed."
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: Navigate to the data folder and delete the addressbook.xml file to simulate missing data files"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: Launch the application +"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: reInsurance will launch and populated with the default address book. Add a new entry for the addressbook.xml to be saved in the data directory."
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: Navigate to the data folder and corrupt the addressbook.xml file to simulate corrupted data files"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: Launch the application +"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: reInsurance will launch with an empty address book."
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encryption and Decryption behaviour with and without password"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": ". Encryption behaviour without password"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: Navigate to the data folder and observe the encryption status of the addressbook.xml file"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: Before launching the application +"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: addressbook.xml will be encrypted and not text-editable."
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: Launch the application +"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: addressbook.xml will be decrypted and text-editable."
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: Close the application +"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: addressbook.xml will be encrypted and not text-editable."
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": ". Encryption behaviour with password"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: Navigate to the data folder and observe the encryption status of the addressbook.xml file"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: Before launching the application +"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: addressbook.xml will be encrypted and not text-editable."
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: Launch the application +"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: addressbook.xml will be encrypted and not text-editable."
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: Launch the application and enter the correct password+"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: addressbook.xml will be decrypted and text-editable."
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: Close the application +"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: addressbook.xml will be encrypted and not text-editable."
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exporting data"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": ". Exporting the data in the portfolio to a portfolio.csv file"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: Ensure that there are entries in reInsurance"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `export portfolio` +"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: export the data in the portfolio to a portfolio.csv file in the directory where the application is being run."
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": ". Exporting the data in the portfolio with a specified file name"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: Ensure that there are entries in reInsurance"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `export portfolio mydata` +"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: export the data in the portfolio to a mydata.csv file in the root directory"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": ". Exporting the birthdays and appointments of the clients stored"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: Ensure that there are entries in reInsurance"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `export calendar` +"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: exports the birthdays and appointments to the Google account\u0027s calendar after granting authorization"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 114,
      "-": 1424
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d reInsurance - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ":repoURL: https://github.com/CS2103JAN2018-T11-B3/main"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "By: `T11-B3`      Since: `Jan 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "reInsurance is for those who *prefer to use a desktop app for managing contacts*. More importantly, reInsurance is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, reInsurance can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Having any Java 8 version is not enough. +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with earlier versions of Java 8."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ".  Download the latest `reInsurance.jar` link:https://github.com/CS2103JAN2018-T11-B3/main/releases[here]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your reInsurance application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 b/09-09-1995` : adds a contact named `John Doe` to the reInsurance."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Format: `help`, Alias: `h`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "The help page can be accessed by moving the mouse over `Help` section of the navigation bar then clicking `Help`. The help page can also be accessed by pressing `F1` on the keyboard."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "// tag::alias[]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "\u003d\u003d\u003d Alias of commands [Since V1.2]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "** Most of the common commands that are often used is tagged with an \"Alias: \" note. +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "** If the features do not display any alias, it can be assumed to have none."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Alias feature can be easily used by replacing current command word with the alias"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "* `a n/Jeremy p/82286918 e/sebry9@gmail.com a/427, Yishun Ave 11 b/09-07-1995`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "* `e 1 i/General[200]`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "// end::alias[]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Adds a person to reInsurance +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS b/BIRTHDAY [d/APPOINTMENT] [t/TAG] [i/INSURANCE[COMMISSION]] [g/GROUP] ...` Alias: `a`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags, appointment and insurance plans (including 0) but only one group"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Dates are in the format dd-mm-yyyy"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 b/09-12-1994 d/05-05-2018 g/PRIORITY t/friends i/Health[30]`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 b/29-10-1992 g/friends t/criminal i/General`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "// end::add[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "// tag::insurance[]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an insurance: Prefix: \"i/\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Add one or more insurance to a person +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Format: `i/INSURANCE[COMMISSION]`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "A person can have any number of insurances, to add in the commission of a particular insurance simply put the amount immediately after the insurance name and inside a \u0027[]\u0027 or a \u0027{}\u0027 bracket."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Insurance only accept alpha numeric characters and Commission needs to be non-negative"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " `add n/Jeremy Lee p/82286918 e/sebry9@gmail.com a/311, Clementi Ave 2, #02-25 b/09-12-1994 i/Health[10] i/General{20}`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "// end::insurance[]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "// tag::colorTag[]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "\u003d\u003d\u003d Colour Tag [Since V1.2]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Common tags in reInsurances are colour highlighted. Tags input type is non restrictive and up to the user\u0027s imagination."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "// end::colorTag[]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Shows a list of all persons in reInsurance. +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Format: `list` Alias: `l`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::count[]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d View number of persons : `count`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Returns the number of clients stored in the reInsurance application. +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `count`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "// end::count[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::edit[]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Edits an existing person in the reInsurance. +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [d/APPOINTMENT] [t/TAG] [i/INSURANCE]...` Alias: `e`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "* At least one of the optional fields must be"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "provided."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "* You can remove all the person\u0027s tags or insurance by typing `t/` for tags and \u0027i/\u0027 for insurances without specifying any tags after it."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Clearing the application can also be done by moving the mouse over `File` section of the navigation bar then clicking `Clear`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "// end::edit[]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]` Alias: `f`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::findtag[]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating persons by tag: `findtag`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given tags. +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `findtag KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `friends` will match `Friends`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the tags does not matter. e.g. `Friends Colleagues` will match `Colleagues Friends`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the tag is searched."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Friend` will not match `Friends`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one tag will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Friends` +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having tag `Friends`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Friends Colleagues Neighbours` +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having tags `Friends`, `Colleagues`, or `Neighbours`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "// end::findtag[]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Deletes the specified person from reInsurance. +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Format: `delete INDEX` Alias: `d`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Deletes the 2nd person in the reInsurance."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the last person listing. +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Format: `select INDEX` Alias: `s`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the person and loads the Google search page the person at the specified `INDEX`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Selects the 2nd person in reInsurance."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Restores reInsurance to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Format: `undo` Alias: `u`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Undoable commands: those commands that modify reInsurance\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Format: `redo` Alias: `r`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::sort[]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Sorting all entries : `sort`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Sort all entries from reInsurance by given condition in lexicographical order. +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `sort`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "// end::sort[]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Clears all entries from reInsurance. +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `c` +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "Format: `clear` Alias: `c`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "Clearing all entries from reInsurance can also be done by moving the mouse over `File` section of the navigation bar then clicking `Clear`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::exportData[]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Export data : `export`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "Exports the data from the specified export type: `calendar` or `portfolio` (case insensitive). +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `export EXPORT_TYPE`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "Exports the portfolio to a specified export location. +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Format `export portfolio FILENAME`."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* Coming in v2.0, there will be more options on the types of data to export."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "* As of v1.5, the application handles the command for the portfolio and calendar."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "* Default destination file is at `portfolio.csv` for the `export portfolio` command."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* The default calendar created in Google Calendars is titled `reInsurance Events`, which contains birthdays and appointments."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* Coming in v2.0, the user will be able to specify what the created calendar is called."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "* `export calendar` +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "Exports the birthday and appointment data to Google Calendar"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "** When running this command, you will be prompted to enter your credentials to your Google Account. DO NOT EXIT THE BROWSER. This will stall the application."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "** After entering credentials, you will be asked if reInsurance can access your account at a page as pictured in _Figure 1_. +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "** Hit `ALLOW` to proceed the export or `CANCEL` to deny reInsurance access."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".Authorization Window"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "image::calendar_access.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "* `export portfolio` +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "Exports the data in the portfolio to a `portfolio.csv` file."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "* `export portfolio my_data` +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "Exports the data in the portfolio to a `my_data.csv` file."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "// end::exportData[]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::group[]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Group entries : `group`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "Group all entries under the same group from reInsurance. +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `group` Alias: `g`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* `group friends` +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "All entries under the group friends will be returned to the user as a list."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "// end::group[]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::password[]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Password : `password`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Set a password for reInsurance as desired. No password required to access the program when using for the first time. +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `password`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "* `password set/yourpassword` +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "Password will be set as yourpassword."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "* `password change/yournewpassword` +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "Password will be changed to yournewpassword."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "* `password remove/yourexistingpassword` +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "Password will be removed."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, there are no password recovery mechanism in place."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "* If users forget their password, please delete the password.txt file in the data folder to remove the password."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "* Coming in v2.0, there will be an option to retrieve your lost password via email."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "* Default destination file is at the data folder."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "// end::password[]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "Exiting the application can also be done by moving the mouse over `File` section of the navigation bar then clicking `Exit`."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "reInsurance data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually. Data will be encrypted."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "The standard version of the JRE/JDK are under export restrictions. That also includes that some cryptographic algorithms are not allowed to be shipped in the standard version."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "Replace files in library with Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files 8. Download the files http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html[Here]."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous reInsurance folder."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "// tag::sebryFAQ[]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "*Q*: How do I delete an insurance tagged to a Client? +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "*A*: Use the edit command, e.g `edit 1 i/` It is possible to edit current insurance plan with the same function too."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "*Q*: Are there any restriction for the type of Insurance plan? +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "*A*: No, as the current market have countless type of insurance plan, and a the same time our product aim to be rigid against future addition of insurance plan, insurance type is thus not restricted as long as it is alpha numeric."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "// end::sebryFAQ[]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 b/09-09-1995 t/friend t/colleague i/Health[30]`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "* *Findtag* : `findtag TAG` +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "e.g. `findtag friends`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "* *Count* : `count`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "* *Export* : `export` +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `export portfolio`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "* *Sort* : `sort`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "* *Group* : `group` +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `group priority`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "* *Password* : `password` +"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `password set/123`"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 80,
      "-": 370
    }
  },
  {
    "path": "docs/team/Sebry9.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "\u003d Jeremy Lee - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ":imagesDir: ../images/Sebry9.jpg"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "\u003d\u003d PROJECT: reInsurance"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "---"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "reInsurance is a desktop client tracking application used for insurance agent to keep track of his client\u0027s data. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "* *Major enhancement*: Insurance features"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "** What it does: Allows the user to add in multiple insurance plans that their client have subscribed to. It also allow the commission that the insurance agent receive from the particular insurance to be added in. Afterwhich, the insurance agent can also view the total commission gained from that particular client. User can also modify/delete the insurance or commission of a respective client by editing it directly."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "** Justification: The main purpose of an insurance agent is to gain more client to subscribe for their insurance plan, as the number of client increase, it may get increasing difficult to handle data\u0027s of clients thus the need to organize information. With the use of reInsurance, insurance agent client will be more organized, resulting in more effort spent socializing with both existing clients and potential client so as to further expand their business."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "** Highlights: The implementation of this feature prove to be challenging for the part where multiple component needs to be edited. Mainly the problem faced was to connect everything up together yet not breaking the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "** Credits: Coding forums for the inspiration given and teammate for the support."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "* *Minor enhancement*: Added alias command for most existing commands such as add, edit, redo, undo etc."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "** Justification: To increase the efficiency of using the application, especially for experienced user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "* *Minor enhancement*: Color tagged some associated and common tags for easier grouping while ensuring a default color code for other tags."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103JAN2018-T11-B3/main/blob/master/collated/functional/Sebry9.md[Functional code]] [https://github.com/CS2103JAN2018-T11-B3/main/blob/master/collated/test/Sebry9.md[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "*** Monitoring the documentation status of the project."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "*** Open and close most milestone since the start of the usage of milestones."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "*** Assigned weekly user stories to be completed to milestones."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "*** Organise weekly meeting to distribute workload."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "*** Assign weekly compulsory issue for individual teammate to handle."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "*** Project\u0027s time keeper by ensuring every team member is not lacking behind."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "*** Resolved high priority issue of project test code totally invalid of running : https://github.com/CS2103JAN2018-T11-B3/main/pull/76[#76]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "*** Resolved Code style issues within the project caused by teammates(Including myself) : https://github.com/CS2103JAN2018-T11-B3/main/pull/72/files[#72]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "*** Updating product UI: https://github.com/CS2103JAN2018-T11-B3/main/pull/68[#68] https://github.com/CS2103JAN2018-T11-B3/main/pull/173[#173]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "*** Updated the Tag color scheme (Pull requests https://github.com/CS2103JAN2018-T11-B3/main/pull/6[#6])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "*** Updated UI of the personCard of client."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "include::../UserGuide.adoc[tag\u003dalias]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "include::../UserGuide.adoc[tag\u003dinsurance]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcolorTag]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsebryFAQ]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsebryStory1]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsebryStory2]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dinsurance1]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "image::../InsuranceClassInModel.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dinsurance2]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "---"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sebry9": 66,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.EncryptionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.GoogleCalendarInit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 5, 0, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(getApplicationParameter(\"config\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getApplicationParameter(String parameterName) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return applicationParameters.get(parameterName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Data remains encrypted if a password is set."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                initGoogleCalendar();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            initGoogleCalendar();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            initGoogleCalendar();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        GoogleCalendar googleCalendar \u003d new GoogleCalendar();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            googleCalendar.getCalendarId();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading Id from the file. Will be creating new google calendar\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            initGoogleCalendar();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        File file \u003d new File(userPrefs.getPasswordFilePath());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            if (FileUtil.isPassExists(file)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                File book \u003d new File(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                EncryptionUtil.encrypt(book);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the password file\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(String configFilePath) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        String configFilePathUsed;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    //@@author cambioforma"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * Initialises Google Calendar Settings for {@code BrowserPanel}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private void initGoogleCalendar() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        GoogleCalendar calendar \u003d new GoogleCalendar();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            calendar.getCalendarId();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            calendar.resetCalendar();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            logger.info(\"Reinitialised a new Google Calendar\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                GoogleCalendarInit.init();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            } catch (IOException ex) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                logger.severe(\"Failed to initialise Google Calendar\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            File file \u003d new File(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            EncryptionUtil.encrypt(file);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            logger.warning(\"File not found\" + ioe.getMessage());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        this.stop();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambioforma": 55,
      "-": 208
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/GoogleCalendarException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "//@@author daviddalmaso"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " * Exception to handle all GoogleCalendar related exceptions"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "public class GoogleCalendarException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public GoogleCalendarException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daviddalmaso": 9,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/PortfolioException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "//@@author daviddalmaso"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " * Exception to handle all portfolio related exceptions when exporting"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "public class PortfolioException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public PortfolioException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daviddalmaso": 9,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/EncryptionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.security.MessageDigest;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.crypto.BadPaddingException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.crypto.Cipher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.crypto.IllegalBlockSizeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.crypto.SecretKey;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.crypto.spec.SecretKeySpec;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * A Class that encrypts and decrypts XML files stored on the hard disk."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "//@@author limzk1994"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "public class EncryptionUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     *The standard version of the JRE/JDK are under export restrictions."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     *That also includes that some cryptographic algorithms are not allowed to be shipped in the standard version."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     *Replace files in library with Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files 8"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    private static final String password \u003d \"CS210321CS210321\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EncryptionUtil.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Encrypts XML file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @param file path of the file to be encrypted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @throws IOException if file could not be found"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static void encrypt(File file) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            Cipher cipher \u003d Cipher.getInstance(\"AES/ECB/PKCS5Padding\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            SecretKey secretKey \u003d generateKey();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            cipher.init(Cipher.ENCRYPT_MODE, secretKey);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            fileToBytes(cipher, file);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        } catch (GeneralSecurityException gse) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            logger.severe(\"Cipher or Padding might not be supported \" + gse.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        } catch (UnsupportedEncodingException use) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            logger.info(\"Encoding Unsupported \" + use.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Decrypts XML file"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @param file path of the file to be decrypted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @throws IOException if file could not be found"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static void decrypt(File file) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            Cipher cipher \u003d Cipher.getInstance(\"AES/ECB/PKCS5Padding\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            SecretKey secretKey \u003d generateKey();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            cipher.init(Cipher.DECRYPT_MODE, secretKey);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            fileToBytes(cipher, file);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        } catch (GeneralSecurityException gse) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            logger.severe(\"Cipher or Padding might not be supported \" + gse.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        } catch (UnsupportedEncodingException use) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            logger.info(\"Encoding Unsupported \" + use.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Processes the given file using the given cipher"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @param cipher cipher used for encryption or decryption"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @param file path of the file to be encrypted or decrypted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @throws IOException if file could not be found"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    private static void fileToBytes(Cipher cipher, File file) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        FileInputStream fileInputStream \u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        FileOutputStream fileOutputStream \u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            fileInputStream \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            byte[] readBytes \u003d new byte[(int) file.length()];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            fileInputStream.read(readBytes);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            byte[] writeBytes \u003d cipher.doFinal(readBytes);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            fileOutputStream \u003d new FileOutputStream(file);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            fileOutputStream.write(writeBytes);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        } catch (BadPaddingException be) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            logger.info(\"File might not decoded/encoded properly due to bad padding \" + be.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        } catch (IllegalBlockSizeException ibe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            logger.info(\"Input length size must be in multiple of 16  \" + ibe.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                if (fileInputStream !\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                    fileInputStream.close();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                if (fileOutputStream !\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                    fileOutputStream.close();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                logger.info(\"File streams could not be closed  \" + ioe.getMessage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Method to generate a SecretKey using the password provided"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @return SecretKey generated using AES encryption"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static SecretKey generateKey() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        SecretKeySpec secretKeySpec \u003d null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            MessageDigest digester \u003d MessageDigest.getInstance(\"SHA-256\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            digester.update(password.getBytes(\"UTF-8\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            byte[] key \u003d digester.digest();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            secretKeySpec \u003d new SecretKeySpec(key , 0 , 16 ,  \"AES\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        } catch (NoSuchAlgorithmException nae) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            logger.info(\"Algorithm Unsupported \" + nae.getMessage());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        } catch (UnsupportedEncodingException use) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            logger.info(\"Encoding Unsupported \" + use.getMessage());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return secretKeySpec;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "limzk1994": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INSURANCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_BIRTHDAY + \"BIRTHDAY \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_APPOINTMENT + \"APPOINTMENT \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_BIRTHDAY + \"09-12-1994 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_APPOINTMENT + \"05-05-2018 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_GROUP + \"PRIORITY \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            + PREFIX_INSURANCE + \"Health[50]\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            model.addPerson(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 13,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 3,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CountCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "//@@author daviddalmaso"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " * Return a count of all persons in the ClientBook"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "public class CountCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"count\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \" persons in the address book\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        return new CommandResult(Integer.toString(model.getAddressBook().getPersonList().size()) + MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daviddalmaso": 16,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person personToDelete;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 1,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INSURANCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.Insurance.Insurance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Group;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_APPOINTMENT + \"APPOINTMENT] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_GROUP + \"GROUP]\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            + \"[\" + PREFIX_INSURANCE + \"INSURANCE]...\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person personToEdit;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person editedPerson;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Birthday updatedBirthday \u003d editPersonDescriptor.getBirthday().orElse(personToEdit.getBirthday());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Appointment updatedAppointment \u003d editPersonDescriptor.getAppointment().orElse(personToEdit.getAppointment());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Group updatedGroup \u003d editPersonDescriptor.getGroup().orElse(personToEdit.getGroup());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Set\u003cInsurance\u003e updateInsurances \u003d editPersonDescriptor.getInsurances().orElse(personToEdit.getInsurance());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedBirthday,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                updatedAppointment, updatedGroup, updateInsurances);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        private Birthday birthday;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        private Appointment appointment;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        private Group group;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        private String totalCommission;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        private Set\u003cInsurance\u003e insurances;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            setBirthday(toCopy.birthday);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            setAppointment(toCopy.appointment);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            setGroup(toCopy.group);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            setInsurances(toCopy.insurances);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.birthday, this.appointment, this.insurances, this.group);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setBirthday(Birthday birthday) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cBirthday\u003e getBirthday() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(birthday);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAppointment\u003e getAppointment() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(appointment);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGroup(Group group) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            this.group \u003d group;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cGroup\u003e getGroup() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(group);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        public void setCommission(String commission) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            this.totalCommission \u003d commission;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        public Optional\u003cString\u003e getCommission() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return Optional.ofNullable(totalCommission);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "         * Sets {@code insurances} to this object\u0027s {@code insurances}."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "         * A defensive copy of {@code insurances} is used internally."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "         */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        public void setInsurances(Set\u003cInsurance\u003e insurances) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            this.insurances \u003d (insurances !\u003d null) ? new HashSet\u003c\u003e(insurances) : null;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        public Optional\u003cSet\u003cInsurance\u003e\u003e getInsurances() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return (insurances !\u003d null) ? Optional.of(Collections.unmodifiableSet(insurances)) : Optional.empty();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getBirthday().equals(e.getBirthday())"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                    \u0026\u0026 getGroup().equals(e.getGroup())"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                    \u0026\u0026 getInsurances().equals(e.getInsurances());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 29,
      "-": 286
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.export.ExportType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.export.exceptions.CalendarAccessDeniedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.export.exceptions.ConnectivityIssueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.export.exceptions.InvalidFileNameException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "//@@author daviddalmaso"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " * Export different types of data from the application to the user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "public class ExportCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public static final String CALENDAR_ACCESS_DENIED_MESSAGE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            \"Unable to export calendar: access denied\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public static final String CALENDAR_MESSAGE_SUCCESS \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            \"Successfully exported birthdays and appointments to Google Calendar\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public static final String CONNECTIVITY_ISSUE_MESSAGE \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            \"Unable to export calendar: no internet connection\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public static final String INVALID_FILE_MESSAGE \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            \"Unable to export portfolio: invalid filename\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public static final String PORTFOLIO_MESSAGE_SUCCESS \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            \"Successfully exported portfolio to %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            + \": Exports the specified type of content.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            + \"Parameters: ExportType (must be one of the following - calendar, portfolio)\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" portfolio\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ExportCommand.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public final UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private ExportType typeToExport;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public ExportCommand(ExportType typeToExport) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        this.typeToExport \u003d typeToExport;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        this.filePath \u003d userPrefs.getExportPortfolioFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public ExportCommand(ExportType typeToExport, String filePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        this.typeToExport \u003d typeToExport;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        if (filePath \u003d\u003d null || filePath.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            this.filePath \u003d userPrefs.getExportPortfolioFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    protected CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        requireNonNull(typeToExport);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            if (typeToExport.equals(ExportType.PORTFOLIO)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                model.exportPortfolio(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                logger.info(\"Successfully exported portfolio\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                return new CommandResult(String.format(PORTFOLIO_MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                        filePath));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                model.exportCalendar();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                logger.info(\"Successfully exported calendar\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                return new CommandResult(CALENDAR_MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        } catch (InvalidFileNameException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            logger.info(\"Unable to use \" + filePath + \" for export file path\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            throw new CommandException(INVALID_FILE_MESSAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        } catch (CalendarAccessDeniedException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            logger.info(\"Did not receive authorization for Google Calendar usage\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            throw new CommandException(CALENDAR_ACCESS_DENIED_MESSAGE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        } catch (ConnectivityIssueException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            logger.info(\"Unable to connect to the internet to export calendar\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            throw new CommandException(CONNECTIVITY_ISSUE_MESSAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daviddalmaso": 77,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GroupCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.PersonContainsGroupsPredicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Groups the clients in reInsurance."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "//@@author limzk1994"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "public class GroupCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"group\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"g\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Groups listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Group all persons whose group attribute is\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Priority\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    private final PersonContainsGroupsPredicate predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public GroupCommand(PersonContainsGroupsPredicate predicate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                || (other instanceof GroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((GroupCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "limzk1994": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"his\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PasswordCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.WrongPasswordException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.commandmode.PasswordMode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.PasswordManger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "//@@author limzk1994"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limzk1994"
        },
        "content": " * Contain methods to modify the password"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limzk1994"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "public class PasswordCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"password\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"pw\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Set, change or remove password\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            + \"Set Password Parameters:\" + COMMAND_WORD + \" set/yourchosenpassword\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            + \"Change Password Parameters:\" + COMMAND_WORD + \" change/yournewpassword\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            + \"Remove Password Parameters: \" + COMMAND_WORD + \" remove/youroldpassword\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Password set!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static final String MESSAGE_PASSWORD_CHANGE \u003d \"Password successfully changed!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static final String MESSAGE_PASSWORD_EXISTS \u003d \"Password already exists!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static final String MESSAGE_PASSWORD_REMOVE \u003d \"Password removed!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static final String MESSAGE_NO_PASSWORD_EXISTS \u003d \"No password!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static final String MESSAGE_WRONG_PASSWORD \u003d \"Wrong password!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    private final PasswordMode mode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Creates an PasswordCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public PasswordCommand(PasswordMode mode) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            return mode.execute();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            throw new CommandException(\"Password File not found\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Set password if it does not exists"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static class setPassword extends PasswordMode {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        public setPassword(String password) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            super(password);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        public CommandResult execute() throws IOException, CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            if (passExists()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                throw new CommandException(MESSAGE_PASSWORD_EXISTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                PasswordManger.savePassword(getPass());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Removes password if it exists"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static class clearPassword extends PasswordMode {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        public clearPassword(String password) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            super(password);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        public CommandResult execute() throws IOException, CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            if (passExists()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                    PasswordManger.removePassword(getPass());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                } catch (WrongPasswordException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                    throw new CommandException(MESSAGE_WRONG_PASSWORD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                return new CommandResult(MESSAGE_PASSWORD_REMOVE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                throw new CommandException(MESSAGE_NO_PASSWORD_EXISTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Changes password if it exists"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static class changePassword extends PasswordMode {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        private String newPass;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        public changePassword(String newPassword) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            super(newPassword);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            newPass \u003d newPassword;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        public CommandResult execute() throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            if (passExists()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                PasswordManger.savePassword(newPass);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                return new CommandResult(MESSAGE_PASSWORD_CHANGE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                return new CommandResult(MESSAGE_NO_PASSWORD_EXISTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "limzk1994": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Redo the previously undone command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(model, undoRedoStack);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!undoRedoStack.canRedo()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack.popRedo().redo();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.undoRedoStack \u003d undoRedoStack;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the person identified by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Sorts all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "//@@author limzk1994"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "public class SortCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted all clients!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public SortCommand(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        ObservableList\u003cPerson\u003e shownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        if (shownList.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_PERSON_LIST_EMPTY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        model.sortFilteredPersonList(shownList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "limzk1994": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Undo the previous {@code UndoableCommand}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(model, undoRedoStack);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!undoRedoStack.canUndo()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack.popUndo().undo();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.undoRedoStack \u003d undoRedoStack;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INSURANCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.Insurance.Insurance;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Group;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_GROUP,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                PREFIX_TAG, PREFIX_BIRTHDAY, PREFIX_APPOINTMENT, PREFIX_INSURANCE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_BIRTHDAY,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                PREFIX_GROUP) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Group group \u003d ParserUtil.parseGroup(argMultimap.getValue(PREFIX_GROUP)).get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Birthday birthday \u003d ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY)).get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Appointment appointment \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (argMultimap.getValue(PREFIX_APPOINTMENT).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                appointment \u003d ParserUtil.parseAppointment(argMultimap.getValue(PREFIX_APPOINTMENT)).get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            Set\u003cInsurance\u003e insuranceList \u003d ParserUtil.parseInsurance"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                (argMultimap.getAllValues(PREFIX_INSURANCE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            Person person \u003d new Person(name, phone, email, address,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                tagList, birthday, appointment, group, insuranceList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommand(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 15,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CountCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindTagCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.GroupCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.PasswordCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case AddCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case EditCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case SelectCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case DeleteCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case ClearCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case FindCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case ListCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case CountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CountCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case HistoryCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case HelpCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case UndoCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case RedoCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SortCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        case GroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return new GroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        case PasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return new PasswordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 12,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_APPOINTMENT \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_GROUP \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final Prefix PREFIX_INSURANCE \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_SET \u003d new Prefix(\"set/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_CHANGE \u003d new Prefix(\"change/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_REMOVE \u003d new Prefix(\"remove/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INSURANCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.Insurance.Insurance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                        PREFIX_BIRTHDAY, PREFIX_APPOINTMENT, PREFIX_GROUP, PREFIX_INSURANCE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    .ifPresent(editPersonDescriptor::setBirthday);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            if (argMultimap.getValue(PREFIX_APPOINTMENT).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                ParserUtil.parseAppointment(argMultimap.getValue(PREFIX_APPOINTMENT))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                        .ifPresent(editPersonDescriptor::setAppointment);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseGroup(argMultimap.getValue(PREFIX_GROUP)).ifPresent(editPersonDescriptor::setGroup);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            parseInsuranceForEdit(argMultimap.getAllValues(PREFIX_INSURANCE))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                .ifPresent(editPersonDescriptor::setInsurances);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e insurances} into a {@code Set\u003cInsurance\u003e} if {@code insurances} is non-empty."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * If {@code insurances} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * {@code Set\u003cInsurance\u003e} containing zero insurances."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private Optional\u003cSet\u003cInsurance\u003e\u003e parseInsuranceForEdit(Collection\u003cString\u003e insurances) throws IllegalValueException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assert insurances !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (insurances.isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Collection\u003cString\u003e insuranceSet \u003d insurances.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            \u0026\u0026 insurances.contains(\"\") ? Collections.emptySet() : insurances;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return Optional.of(ParserUtil.parseInsurance(insuranceSet));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 19,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.export.ExportType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.export.exceptions.IncorrectExportTypeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "//@@author daviddalmaso"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " * Parses input for correctly formatted export command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            ExportType typeToExport \u003d ParserUtil.parseExportType(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            if (typeToExport.equals(ExportType.PORTFOLIO)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                String filePath \u003d ParserUtil.parseExportFilePath(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                return new ExportCommand(typeToExport, filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                return new ExportCommand(typeToExport);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        } catch (IncorrectExportTypeException ive) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daviddalmaso": 26,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GroupCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.GroupCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.PersonContainsGroupsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new GroupCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "//@@author limzk1994"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "public class GroupCommandParser implements Parser\u003cGroupCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GroupCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * and returns an GroupCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public GroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        String[]groupKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return new GroupCommand(new PersonContainsGroupsPredicate(Arrays.asList(groupKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "limzk1994": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.Insurance.Insurance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.export.ExportType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.export.exceptions.IncorrectExportTypeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Group;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Optional} return value inside {@code ParserUtil} methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws IllegalValueException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws IllegalValueException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws IllegalValueException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e group} into an {@code Optional\u003cGroup\u003e} if {@code group} is present."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cGroup\u003e parseGroup (Optional\u003cString\u003e group) throws IllegalValueException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return group.isPresent() ? Optional.of(new Group (group.get())) : Optional.empty();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String birthday} into a {@code Birthday}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code birthday} is invalid."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Birthday parseBirthday(String birthday) throws IllegalValueException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(birthday);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedBirthday \u003d birthday.trim();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Birthday.isValidBirthday(trimmedBirthday)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Birthday(trimmedBirthday);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e birthday} into an {@code Optional\u003cBirthday\u003e} if {@code birthday} is present."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cBirthday\u003e parseBirthday(Optional\u003cString\u003e birthday) throws IllegalValueException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(birthday);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return birthday.isPresent() ? Optional.of(parseBirthday(birthday.get())) : Optional.empty();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Parses a {@code String insurance} into a {@code Insurance}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * @throws IllegalValueException if the given {@code insurance} is invalid."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static Insurance parseInsurance(String insurance) throws IllegalValueException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        requireNonNull(insurance);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        String trimmedInsurance \u003d insurance.trim();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (!Insurance.isValidInsurance(trimmedInsurance)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            throw new IllegalValueException(Insurance.MESSAGE_INSURANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return new Insurance(trimmedInsurance);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e insurances} into a {@code Set\u003cInsurance\u003e}."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static Set\u003cInsurance\u003e parseInsurance(Collection\u003cString\u003e insurances) throws IllegalValueException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        requireNonNull(insurances);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        final Set\u003cInsurance\u003e insuranceSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        for (String insuranceName : insurances) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            insuranceSet.add(parseInsurance(insuranceName));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return insuranceSet;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e appointment} into an {@code Optional\u003cAppointment\u003e} if {@code appointment}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * is present."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cAppointment\u003e parseAppointment(Optional\u003cString\u003e appointment) throws IllegalValueException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        return appointment.isPresent() ? Optional.of(parseAppointment(appointment.get())) : Optional.empty();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String appointment} into a {@code Appointment}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code appointment} is invalid."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Appointment parseAppointment(String appointment) throws IllegalValueException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAppointment \u003d appointment.trim();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Appointment.isValidAppointment(trimmedAppointment)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Appointment.MESSAGE_APPOINTMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Appointment(trimmedAppointment);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    //@@author daviddalmaso"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @param exportType"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @return the corresponding ExportType"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @throws IllegalArgumentException"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public static ExportType parseExportType(String exportType) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        requireNonNull(exportType);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        String trimmedExportType \u003d exportType.trim().toUpperCase();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        String[] allArgs \u003d trimmedExportType.split(\" \");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        String checkExportType \u003d allArgs[0];"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        if (!ExportType.isValidExportType(checkExportType)) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            throw new IncorrectExportTypeException();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        return ExportType.valueOf(checkExportType);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @param args args of a valid export portfolio command"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @return the file path if specified, otherwise null"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @throws IllegalArgumentException"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public static String parseExportFilePath(String args) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        String trimmedArgs \u003d args.trim().toLowerCase();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        String[] pathArgs \u003d trimmedArgs.split(\"portfolio\", 2);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        if (pathArgs.length \u003c 2) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        String filePath \u003d pathArgs[1].trim();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        if (filePath \u003d\u003d null || filePath.isEmpty()) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        return filePath + \".csv\";"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 30,
      "daviddalmaso": 37,
      "-": 227
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PasswordCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CHANGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMOVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SET;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.PasswordCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "//@@author limzk1994"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limzk1994"
        },
        "content": " * Parses the inputs and create a PasswordCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limzk1994"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "public class PasswordCommandParser implements Parser\u003cPasswordCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public PasswordCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SET, PREFIX_CHANGE, PREFIX_REMOVE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        if (arePrefixesPresent(argumentMultimap, PREFIX_SET)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            return new PasswordCommand(new PasswordCommand.setPassword(argumentMultimap.getValue(PREFIX_SET).get()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        } else if (arePrefixesPresent(argumentMultimap, PREFIX_REMOVE)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            return new PasswordCommand(new PasswordCommand.clearPassword("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                    argumentMultimap.getValue(PREFIX_REMOVE).get()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        } else if (arePrefixesPresent(argumentMultimap, PREFIX_CHANGE)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            final String newPassword \u003d argumentMultimap.getValue(PREFIX_CHANGE).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            requireNonNull(newPassword);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            if (newPassword.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                throw new ParseException(\"Password cannot be blank!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            return new PasswordCommand(new PasswordCommand.changePassword(newPassword));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "limzk1994": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.Insurance.Insurance;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.Insurance.UniqueInsuranceList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.export.exceptions.CalendarAccessDeniedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.export.exceptions.ConnectivityIssueException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.export.exceptions.InvalidFileNameException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Group;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniqueGroupList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.GoogleCalendarClient;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .equals comparison)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueGroupList groups;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private final UniqueInsuranceList insurances;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        groups \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        insurances \u003d new UniqueInsuranceList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * empty constructor"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getAddressBookSize() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.persons.asObservableList().size();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.setTags(tags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void setGroups(List\u003cGroup\u003e persons) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.groups.setGroups(groups);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void setInsurances(Set\u003cInsurance\u003e insurances) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.insurances.setInsurances(insurances);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        setTags(new HashSet\u003c\u003e(newData.getTagList()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        setInsurances(new HashSet\u003c\u003e(newData.getInsuranceList()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(this::syncWithMasterTagList)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            setPersons(syncedPersonList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * and updates the Tag objects in the person to point to those in {@link #tags}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if an equivalent person already exists."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d syncWithMasterTagList(p);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(person);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     *      another existing person in the list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #syncWithMasterTagList(Person)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, syncedEditedPerson);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     *  Updates the master tag list to include tags in {@code person} that are not in the list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     *  list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person syncWithMasterTagList(Person person) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.mergeFrom(personTags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create map with values \u003d tag object references in the master list"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // used for checking person tag references"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // Rebuild the list of person tags to point to the relevant tags in the master tag list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), correctTagReferences,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                person.getBirthday(), person.getAppointment(), person.getGroup(), person.getInsurance());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean removePerson(Person key) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        if (persons.remove(key)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    //// tag-level operations"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.add(t);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /// insurance-level operations"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void addInsurance(Insurance i) throws UniqueInsuranceList.DuplicateInsuranceException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        insurances.add(i);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    //// export-level operations"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    //@@author daviddalmaso"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * Transfers persons in reInsurance data to portfolio data"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @return a String representing the portfolio as a csv"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private String portfolioToString() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        sb.append(\"Name,Phone,Email,Address,Group,Total Commission,Insurances,Tags\\n\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            String group \u003d \"\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            String insurance \u003d \"\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            String tags \u003d \"\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            if (person.getGroup() !\u003d null) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                group \u003d person.getGroup().toString();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            if (person.getInsurance() !\u003d null) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                insurance \u003d person.getInsurance().toString();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            if (person.getTags() !\u003d null) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                tags \u003d person.getTags().toString();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            sb.append(\"\\\"\" + person.getName().toString() + \"\\\",\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            sb.append(\"\\\"\" + person.getPhone().toString() + \"\\\",\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            sb.append(\"\\\"\" + person.getEmail().toString() + \"\\\",\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            sb.append(\"\\\"\" + person.getAddress().toString() + \"\\\",\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            sb.append(\"\\\"\" + group + \"\\\",\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            sb.append(\"\\\"\" + person.getTotalCommission() + \"\\\",\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            sb.append(\"\\\"\" + insurance + \"\\\",\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            sb.append(\"\\\"\" + tags + \"\\\",\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * Exports the current reInsurance data to the specified file path"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @param filePath the file path to export the portfolio to"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public void exportPortfolio(String filePath) throws InvalidFileNameException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(new File(filePath));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            String portfolioAsString \u003d portfolioToString();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            pw.write(portfolioAsString);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            throw new InvalidFileNameException();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * Exports the calendar events to the user\u0027s Google Calendar"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public void exportCalendar() throws CalendarAccessDeniedException, ConnectivityIssueException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        GoogleCalendarClient.insertCalendar(persons);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asObservableList();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags.asObservableList();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public ObservableList\u003cInsurance\u003e getInsuranceList() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return insurances.asObservableList();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cGroup\u003e getGroupList() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        return groups.asObservableList();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                \u0026\u0026 this.insurances.equalsOrderInsensitive(((AddressBook) other).insurances));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(persons, tags);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sorts all persons from the address book."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sortedPersonsList() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.sortPersons();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 33,
      "daviddalmaso": 57,
      "-": 217
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Insurance/Commission.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "package seedu.address.model.Insurance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "//@@author Sebry9"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * Represents the commission recieved from a insurance plan in reInsurance."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "public class Commission {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private final String commission;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Commission(Insurance insurance) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        requireNonNull(insurance);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        String insuranceName \u003d insurance.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        String commission \u003d new String(\"0\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Pattern p1 \u003d Pattern.compile(\"\\\\{(.*?)\\\\}\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Matcher m1 \u003d p1.matcher(insuranceName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Pattern p2 \u003d Pattern.compile(\"\\\\[(.*?)\\\\]\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Matcher m2 \u003d p2.matcher(insuranceName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        while (m1.find()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            if (commission.equals(\"0\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                commission \u003d m1.group().substring(1, m1.group().length() - 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        while (m2.find()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            if (commission.equals(\"0\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                commission \u003d m2.group().substring(1, m2.group().length() - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.commission \u003d commission;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public String getCommission() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return commission;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (!(other instanceof Commission)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Commission otherCommission \u003d (Commission) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return otherCommission.getCommission().equals(this.getCommission());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return Objects.hash(commission);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        builder.append(getCommission());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 70,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Insurance/Insurance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "package seedu.address.model.Insurance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "//@@author Sebry9"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * Represents a Insurance plan in reInsurance."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "public class Insurance {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String MESSAGE_INSURANCE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        \"Insurance should only contain alphanumeric characters and Commission should contain only non negative numbers\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"\\\\[\\\\]{|}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String INSURANCE_NAME \u003d \"[\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String COMMISSION_FORMAT \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String INSURANCE_VALIDATION_REGEX \u003d  INSURANCE_NAME + COMMISSION_FORMAT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public final String insuranceName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * @param insurance A valid insurance."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Insurance(String insurance) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        requireNonNull(insurance);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        checkArgument(isValidInsurance(insurance), MESSAGE_INSURANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.insuranceName \u003d insurance;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Returns true if a given string is a valid insurance."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static boolean isValidInsurance(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return test.matches(INSURANCE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return insuranceName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            || (other instanceof Insurance // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            \u0026\u0026 this.insuranceName.equals(((Insurance) other).insuranceName)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return insuranceName.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 62,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Insurance/UniqueInsuranceList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "package seedu.address.model.Insurance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DuplicateDataException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "//@@author Sebry9"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * A list of insurance that enforces no nulls and uniqueness between its elements."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * Supports minimal set of list operations for the reInsurance\u0027s features."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * @see Insurance#equals(Object)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "public class UniqueInsuranceList implements Iterable\u003cInsurance\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private final ObservableList\u003cInsurance\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Constructs empty InsuranceList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public UniqueInsuranceList() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Creates a UniqueInsuranceList using given insurances."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Enforces no nulls."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public UniqueInsuranceList(Set\u003cInsurance\u003e insurance) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        requireAllNonNull(insurance);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        internalList.addAll(insurance);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Returns all insurance in this list as a Set."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * This set is mutable and change-insulated against the internal list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Set\u003cInsurance\u003e toSet() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return new HashSet\u003c\u003e(internalList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Replaces the Insurance in this list with those in the argument insurance list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void setInsurances(Set\u003cInsurance\u003e insurance) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        requireAllNonNull(insurance);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        internalList.setAll(insurance);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Ensures every insurance in the argument list exists in this object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void mergeFrom(UniqueInsuranceList from) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        final Set\u003cInsurance\u003e alreadyInside \u003d this.toSet();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        from.internalList.stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .filter(insurance -\u003e !alreadyInside.contains(insurance))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .forEach(internalList::add);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Returns true if the list contains an equivalent Insurance as the given argument."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public boolean contains(Insurance toCheck) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Adds a Insurance to the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * @throws DuplicateInsuranceException if the Insuranceto add is a duplicate of an existing Tag in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void add(Insurance toAdd) throws DuplicateInsuranceException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            throw new DuplicateInsuranceException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Iterator\u003cInsurance\u003e iterator() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public ObservableList\u003cInsurance\u003e asObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            || (other instanceof UniqueInsuranceList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            \u0026\u0026 this.internalList.equals(((UniqueInsuranceList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Returns true if the element in this list is equal to the elements in {@code other}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * The elements do not have to be in the same order."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public boolean equalsOrderInsensitive(UniqueInsuranceList other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(other.internalList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static class DuplicateInsuranceException extends DuplicateDataException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        protected DuplicateInsuranceException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            super(\"Operation would result in duplicate insurances\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sebry9": 146,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.handleCalendarViewChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.export.exceptions.CalendarAccessDeniedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.export.exceptions.ConnectivityIssueException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.export.exceptions.InvalidFileNameException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * All changes to any model should be synchronized."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GoogleCalendar calendar \u003d new GoogleCalendar();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.resetCalendar();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new handleCalendarViewChangedEvent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(addressBook));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.removePersonFromCalendar(target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new handleCalendarViewChangedEvent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.addPersonToCalendar(person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new handleCalendarViewChangedEvent());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.updatePersonToCalendar(target, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new handleCalendarViewChangedEvent());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    //@@author daviddalmaso"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public void exportCalendar() throws CalendarAccessDeniedException, ConnectivityIssueException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        addressBook.exportCalendar();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public void exportPortfolio(String filePath) throws InvalidFileNameException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        addressBook.exportPortfolio(filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code addressBook}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e sortFilteredPersonList(ObservableList\u003cPerson\u003e personsList) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.sortedPersonsList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return personsList;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daviddalmaso": 12,
      "-": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.Insurance.Insurance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Group;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the tags list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate tags."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cTag\u003e getTagList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the groups list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate groups."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cGroup\u003e getGroupList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Returns an unmodifiable view of the Insurance list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * This list will not contain any duplicate insurance."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    ObservableList\u003cInsurance\u003e getInsuranceList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 7,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private String addressBookFilePath \u003d \"data/addressbook.xml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String addressBookName \u003d \"reInsurance\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private String exportPortfolioFilePath \u003d \"portfolio.csv\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private String calendarIdFilePath \u003d \"data/calendarId.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private String passwordFilePath \u003d \"data/password.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddressBookFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(String addressBookFilePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddressBookName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookName(String addressBookName) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookName \u003d addressBookName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    //@@author daviddalmaso"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public String getExportPortfolioFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        return exportPortfolioFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public void setExportPortfolioFilePath(String exportPortfolioFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        this.exportPortfolioFilePath \u003d exportPortfolioFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getCalendarIdFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return calendarIdFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCalendarIdFilePath(String calendarIdFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.calendarIdFilePath \u003d calendarIdFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPasswordFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return passwordFilePath;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPasswordFilePath(String passwordFilePath) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.passwordFilePath \u003d passwordFilePath;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(calendarIdFilePath, o.calendarIdFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, addressBookName, calendarIdFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nAddressBook name : \" + addressBookName);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nGoogle Calendar ID file location : \" + calendarIdFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daviddalmaso": 9,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/GoogleCalendar.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.client.util.DateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.services.calendar.Calendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.services.calendar.model.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.services.calendar.model.EventDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.services.calendar.model.EventReminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.services.calendar.model.Events;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "//@@author cambioforma"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambioforma"
        },
        "content": " * Class to handle insert, update and delete operations to Google Calendar"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambioforma"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "public class GoogleCalendar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(GoogleCalendar.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private static final String APPOINTMENT_DESCRIPTION \u003d \"Appointment\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private static final String BIRTHDAY_DESCRIPTION \u003d \"Birthday\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private Person data;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    public String getCalendarId() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        byte[] encoded \u003d Files.readAllBytes(Paths.get(userPrefs.getCalendarIdFilePath()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        return new String(encoded, \"UTF-8\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * Adds the appointment of a {@code Person} to the Google Calendar"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @param data {@code Person} to be added to the Google Calendar"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    public void addPersonToCalendar(Person data) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            addBirthdayEvent();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            if (data.getAppointment() !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                addAppointmentEvent();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            logger.warning(\"Unable to add Event\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * Adds an appointment {@code Event} to the Google Calendar"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @throws IOException Unable to create calendarId from file"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private void addAppointmentEvent() throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Event event \u003d createAppointmentEvent();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Calendar service \u003d GoogleCalendarApiAuthentication.getCalendarService();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        String calendarId \u003d this.getCalendarId();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        event \u003d service.events().insert(calendarId, event).execute();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        logger.info(\"Event created: \" + event.getHtmlLink());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * Creates a Google Calendar Event for appointment"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @return Returns an {@code Event} of appointment of {@code Person}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private Event createAppointmentEvent() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Event event \u003d new Event()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            .setSummary(data.getName().fullName)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            .setDescription(APPOINTMENT_DESCRIPTION);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        String startDateString \u003d getAppointmentDateFromPerson();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        DateTime startDateTime \u003d new DateTime(startDateString);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        EventDateTime start \u003d new EventDateTime().setDate(startDateTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        event.setStart(start);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        event.setEnd(start);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        EventReminder[] reminderOverrides \u003d new EventReminder[] {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            new EventReminder().setMethod(\"popup\").setMinutes(24 * 60)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        };"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Event.Reminders reminders \u003d new Event.Reminders()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            .setUseDefault(false)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            .setOverrides(Arrays.asList(reminderOverrides));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        event.setReminders(reminders);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * Adds an appointment {@code Event} to the Google Calendar"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @throws IOException Unable to create calendarId from file"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private void addBirthdayEvent() throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Event event \u003d createBirthdayEvent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Calendar service \u003d GoogleCalendarApiAuthentication.getCalendarService();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        String calendarId \u003d this.getCalendarId();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        event \u003d service.events().insert(calendarId, event).execute();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        logger.info(\"Event created: \" + event.getHtmlLink());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * Creates a Google Calendar Event for birthday"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @return Returns an {@code Event} of birthday of {@code Person}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private Event createBirthdayEvent() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Event event \u003d new Event()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                .setSummary(data.getName().fullName)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                .setDescription(BIRTHDAY_DESCRIPTION);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        String startDateString \u003d getBirthdayDateFromPerson();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        DateTime startDateTime \u003d new DateTime(startDateString);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        EventDateTime start \u003d new EventDateTime().setDate(startDateTime);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        event.setStart(start);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        event.setEnd(start);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        EventReminder[] reminderOverrides \u003d new EventReminder[] {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                new EventReminder().setMethod(\"popup\").setMinutes(24 * 60)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        };"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Event.Reminders reminders \u003d new Event.Reminders()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                .setUseDefault(false)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                .setOverrides(Arrays.asList(reminderOverrides));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        event.setReminders(reminders);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        String[] recurrence \u003d new String[] {\"RRULE:FREQ\u003dYEARLY;\"};"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        event.setRecurrence(Arrays.asList(recurrence));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private String getAppointmentDateFromPerson() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            String startDateString \u003d data.getAppointment().value;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            SimpleDateFormat originalFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            SimpleDateFormat requiredFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            startDateString \u003d requiredFormat.format(originalFormat.parse(startDateString));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            return startDateString;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            logger.warning(\"Unable to convert date format for appointment\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private String getBirthdayDateFromPerson() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            String startDateString \u003d data.getBirthday().value;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            SimpleDateFormat originalFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            SimpleDateFormat requiredFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            startDateString \u003d requiredFormat.format(originalFormat.parse(startDateString));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            return startDateString;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            logger.warning(\"Unable to convert date format for birthday\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * Clear all events from the Google Calendar"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @throws IOException Unable to read calendarId from file"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    public void resetCalendar() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            Calendar service \u003d GoogleCalendarApiAuthentication.getCalendarService();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            String calendarId \u003d this.getCalendarId();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            service.calendars().delete(calendarId).execute();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            GoogleCalendarInit.init();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            logger.warning(\"Unable to delete calendar\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * Deletes the appointment of a {@code Person} from the Google Calendar"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @param data {@code Person} to be deleted from the Google Calendar"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    public void removePersonFromCalendar(Person data) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            deleteBirthdayEvent();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            if (data.getAppointment() !\u003d null) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                deleteAppointmentEvent();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            logger.warning(\"Deleting appointment event failed\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * Deletes an appoinement {@code Event} from the Google Calendar"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @throws IOException Deleting appointment event failed"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private void deleteAppointmentEvent() throws IOException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Calendar service \u003d GoogleCalendarApiAuthentication.getCalendarService();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        // Iterate over the events in the specified calendar"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        String pageToken \u003d null;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            Events events \u003d service.events().list(this.getCalendarId()).setPageToken(pageToken).execute();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            List\u003cEvent\u003e items \u003d events.getItems();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            for (Event event : items) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                if (event.getDescription().equals(APPOINTMENT_DESCRIPTION)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    \u0026\u0026 event.getSummary().equals(data.getName().fullName)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    service.events().delete(this.getCalendarId(), event.getId()).execute();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    logger.fine(\"Appointment deleted: \" + event.getId());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            pageToken \u003d events.getNextPageToken();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        } while (pageToken !\u003d null);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * Deletes a birthday {@code Event} from the Google Calendar"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @throws IOException Deleting birthday event failed"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private void deleteBirthdayEvent() throws IOException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Calendar service \u003d GoogleCalendarApiAuthentication.getCalendarService();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        // Iterate over the events in the specified calendar"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        String pageToken \u003d null;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            Events events \u003d service.events().list(this.getCalendarId()).setPageToken(pageToken).execute();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            List\u003cEvent\u003e items \u003d events.getItems();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            for (Event event : items) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                if (event.getDescription().equals(BIRTHDAY_DESCRIPTION)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    \u0026\u0026 event.getSummary().equals(data.getName().fullName)) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    service.events().delete(this.getCalendarId(), event.getId()).execute();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    logger.fine(\"Birthday deleted: \" + event.getId());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            pageToken \u003d events.getNextPageToken();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        } while (pageToken !\u003d null);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * Edits a Google Calendar Event for Appointment"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @param target Target {@code Person} to be edited"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @param data New {@code Person} be edited into the Google Calendar"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    public void updatePersonToCalendar(Person target, Person data) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        if (!target.getBirthday().equals(data.getBirthday())) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                editBirthdayEvent(target);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                logger.warning(\"Failed to edit birthday event in Google Calendar\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        if (!target.getAppointment().equals(data.getAppointment())) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                editAppointmentEvent(target);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                logger.warning(\"Failed to edit appointment event in Google Calendar\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        if (!target.getName().fullName.equals((data.getName().fullName))) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                editEventsSummary(target);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                logger.warning(\"Failed to edit Person name in Google Calendar\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * Edits an appointment {@code Event} from the Google Calendar"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @param target Target {@code Person} to be edited"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private void editAppointmentEvent(Person target) throws IOException {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Calendar service \u003d GoogleCalendarApiAuthentication.getCalendarService();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        // Iterate over the events in the specified calendar"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        String pageToken \u003d null;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            Events events \u003d service.events().list(this.getCalendarId()).setPageToken(pageToken).execute();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            List\u003cEvent\u003e items \u003d events.getItems();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            for (Event event : items) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                if (event.getDescription().equals(APPOINTMENT_DESCRIPTION)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    \u0026\u0026 event.getSummary().equals(target.getName().fullName)) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    String startDateString \u003d getAppointmentDateFromPerson();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    DateTime startDateTime \u003d new DateTime(startDateString);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    EventDateTime start \u003d new EventDateTime().setDate(startDateTime);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    event.setStart(start);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    event.setEnd(start);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    service.events().update(this.getCalendarId(), event.getId(), event).execute();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    logger.fine(\"Appointment updated: \" + event.getId());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            pageToken \u003d events.getNextPageToken();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        } while (pageToken !\u003d null);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * Edits an appointment {@code Event} from the Google Calendar"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @param target Target {@code Person} to be edited"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private void editBirthdayEvent(Person target) throws IOException {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Calendar service \u003d GoogleCalendarApiAuthentication.getCalendarService();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        // Iterate over the events in the specified calendar"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        String pageToken \u003d null;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            Events events \u003d service.events().list(this.getCalendarId()).setPageToken(pageToken).execute();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            List\u003cEvent\u003e items \u003d events.getItems();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            for (Event event : items) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                if (event.getDescription().equals(BIRTHDAY_DESCRIPTION)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    \u0026\u0026 event.getSummary().equals(target.getName().fullName)) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    String startDateString \u003d getBirthdayDateFromPerson();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    DateTime startDateTime \u003d new DateTime(startDateString);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    EventDateTime start \u003d new EventDateTime().setDate(startDateTime);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    event.setStart(start);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    event.setEnd(start);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    service.events().update(this.getCalendarId(), event.getId(), event).execute();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    logger.fine(\"Birthday updated: \" + event.getId());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            pageToken \u003d events.getNextPageToken();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        } while (pageToken !\u003d null);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * Edits an appointment {@code Event} from the Google Calendar"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @param target Target {@code Person} to be edited"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private void editEventsSummary(Person target) throws IOException {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Calendar service \u003d GoogleCalendarApiAuthentication.getCalendarService();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        // Iterate over the events in the specified calendar"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        String pageToken \u003d null;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            Events events \u003d service.events().list(this.getCalendarId()).setPageToken(pageToken).execute();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            List\u003cEvent\u003e items \u003d events.getItems();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            for (Event event : items) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                if (event.getSummary().equals(target.getName().fullName)) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    event.setSummary(data.getName().fullName);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    service.events().update(this.getCalendarId(), event.getId(), event).execute();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    logger.fine(\"Name updated: \" + event.getId());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            pageToken \u003d events.getNextPageToken();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        } while (pageToken !\u003d null);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambioforma": 319,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/GoogleCalendarApiAuthentication.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.client.auth.oauth2.Credential;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.client.http.HttpTransport;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.client.json.JsonFactory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.client.json.jackson2.JacksonFactory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.services.calendar.Calendar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.services.calendar.CalendarScopes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "//@@author cambioforma"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambioforma"
        },
        "content": " * Authenticates with oAuth Google API"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambioforma"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "public class GoogleCalendarApiAuthentication {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(GoogleCalendarApiAuthentication.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /** Application name. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private static final String APPLICATION_NAME \u003d \"reInsurance\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /** Global instance of the JSON factory. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private static final JsonFactory JSON_FACTORY \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            JacksonFactory.getDefaultInstance();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /** Global instance of the HTTP transport. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private static HttpTransport httpTransport;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /** Global instance of the scopes required by this quickstart. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private static final List\u003cString\u003e SCOPES \u003d Arrays.asList(CalendarScopes.CALENDAR);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            httpTransport \u003d GoogleNetHttpTransport.newTrustedTransport();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        } catch (Throwable t) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            t.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            System.exit(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * Creates an authorized Credential object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @return an authorized Credential object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @throws IOException if error reading oAuth key client_secret.json"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private static GoogleCredential authorize() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            InputStream in \u003d GoogleCalendarApiAuthentication.class"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    .getResourceAsStream(\"/oAuth/reInsurance-2f4f33627950.json\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            return GoogleCredential.fromStream(in).createScoped(SCOPES);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            logger.severe(\"Unable to create oAuth key from file\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * Build and return an authorized Calendar client service."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @return an authorized Calendar client service"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @throws IOException if error reading oAuth key client_secret.json"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    public static Calendar getCalendarService() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Credential credential \u003d authorize();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        return new Calendar.Builder("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                httpTransport, JSON_FACTORY, credential)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                .setApplicationName(APPLICATION_NAME)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambioforma": 58,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/GoogleCalendarInit.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.services.calendar.model.AclRule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.services.calendar.model.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "//@@author cambioforma"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambioforma"
        },
        "content": " * Initialise a new Google Calendar for the current user of reInsurance"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambioforma"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "public class GoogleCalendarInit {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(GoogleCalendarInit.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * Creates a new calendar in Google Calendar for birthday and appointment event"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @throws IOException Unable to create Google Calendar"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    public static void init() throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        com.google.api.services.calendar.Calendar service \u003d GoogleCalendarApiAuthentication.getCalendarService();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        // Create a new calendar"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Calendar calendar \u003d new Calendar();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        calendar.setSummary(\"reInsurance\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        calendar.setTimeZone(\"Asia/Singapore\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        // Insert the new calendar"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Calendar createdCalendar \u003d service.calendars().insert(calendar).execute();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        logger.info(\"New Google Calendar Created:\" + createdCalendar.getId());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        writeCalendarIdToFile(createdCalendar.getId());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        // Create access rule with associated scope"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        AclRule rule \u003d new AclRule();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        AclRule.Scope scope \u003d new AclRule.Scope();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        scope.setType(\"default\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        rule.setScope(scope).setRole(\"reader\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        // Insert new access rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        AclRule createdRule \u003d service.acl().insert(createdCalendar.getId(), rule).execute();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        logger.fine(\"Added read rule to calendar: \" + createdRule.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * Saves the calendar Id to a text file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     * @param calendarId Id of Calendar of reInsurance in Google Calendar"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private static void writeCalendarIdToFile (String calendarId) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            File f \u003d new File(\"data\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            f.mkdir();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            PrintWriter writer \u003d new PrintWriter(new File(userPrefs.getCalendarIdFilePath()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            writer.print(calendarId);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            logger.info(\"Calendar ID written to: \" + userPrefs.getCalendarIdFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            logger.severe(\"Unable to write new calendar id to file\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambioforma": 55,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/export/ExportType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "//@@author daviddalmaso"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " * Types of valid exports that the user can use"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "public enum ExportType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    CALENDAR, PORTFOLIO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @param exportType user\u0027s inputted ExportType"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @return whether it is a valid ExportType"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public static boolean isValidExportType(String exportType) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            ExportType.valueOf(exportType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daviddalmaso": 20,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/export/exceptions/CalendarAccessDeniedException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.export.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.GoogleCalendarException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "//@@author daviddalmaso"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " * Exception for handling users that do not want to allow access to their Google Calendar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "public class CalendarAccessDeniedException extends GoogleCalendarException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public CalendarAccessDeniedException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        super(\"Access denied to calendar\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daviddalmaso": 9,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/export/exceptions/ConnectivityIssueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.export.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.GoogleCalendarException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "//@@author daviddalmaso"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " * Exception to handle users trying to export calendar without internet connectivity"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "public class ConnectivityIssueException extends GoogleCalendarException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public ConnectivityIssueException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        super(\"Unable to connect to the internet\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daviddalmaso": 9,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/export/exceptions/InvalidFileNameException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.export.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.PortfolioException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "//@@author daviddalmaso"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " * Exception class to handle invalid file names during portfolio export"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "public class InvalidFileNameException extends PortfolioException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public InvalidFileNameException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        super(\"Invalid file name to use for exporting portfolio\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daviddalmaso": 9,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Group.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s group in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGroup(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "//@@author limzk1994"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "public class Group {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static final String MESSAGE_GROUP_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            \"Person group should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static final String GROUP_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public final String groupName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @param group A valid group."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public Group(String group) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        checkArgument(isValidGroup(group), MESSAGE_GROUP_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        this.groupName \u003d group;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Returns true if a given string is a valid group."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static boolean isValidGroup(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return test.matches(GROUP_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return groupName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                || (other instanceof Group // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                \u0026\u0026 this.groupName.equals(((Group) other).groupName)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return groupName.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "limzk1994": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.Insurance.Commission;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.Insurance.Insurance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.Insurance.UniqueInsuranceList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "//@@author Sebry9"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private final Birthday birthday;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private final Appointment appointment;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private final Group group;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private final String totalCommission;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private final UniqueInsuranceList insurance;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Birthday birthday,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            Appointment appointment, Group group, Set\u003cInsurance\u003e insurance) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, birthday);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.group \u003d group;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.insurance \u003d new UniqueInsuranceList(insurance);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.totalCommission \u003d calculateTotalCommission(insurance);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.tags \u003d new UniqueTagList(tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Birthday getBirthday() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return birthday;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Appointment getAppointment() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return appointment;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Group getGroup() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return group;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public String getTotalCommission() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return totalCommission;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Calculate the total commission based on the number of plan this person/client have."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public String calculateTotalCommission(Set\u003cInsurance\u003e insurances) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        int commission \u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Insurance[] insuranceList \u003d insurances.toArray(new Insurance[insurances.size()]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        for (int i \u003d 0; i \u003c insurances.size(); i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            Commission plans \u003d new Commission(insuranceList[i]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            commission +\u003d parseInt(plans.getCommission());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return Integer.toString(commission);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Set\u003cInsurance\u003e getInsurance() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return Collections.unmodifiableSet(insurance.toSet());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /* public String getCommission() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return commission;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return Collections.unmodifiableSet(tags.toSet());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return otherPerson.getName().equals(this.getName())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                \u0026\u0026 otherPerson.getBirthday().equals(this.getBirthday())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                \u0026\u0026 otherPerson.getGroup().equals(this.getGroup());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags, birthday, appointment, group, insurance/*, commission*/);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 146,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonContainsGroupsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Group} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "//@@author limzk1994"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "public class PersonContainsGroupsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public PersonContainsGroupsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getGroup().groupName, keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                || (other instanceof PersonContainsGroupsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((PersonContainsGroupsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "limzk1994": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonContainsTagsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "//@@author cambioforma"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambioforma"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambioforma"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "public class PersonContainsTagsPredicate extends ComponentManager implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    public PersonContainsTagsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        for (Iterator\u003cString\u003e i \u003d keywords.iterator(); i.hasNext();) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            String keyword \u003d i.next();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            UniqueTagList personTagList \u003d new UniqueTagList(person.getTags());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            if (Tag.isValidTagName(keyword)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                Tag keyTag \u003d new Tag(keyword);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                if (personTagList.contains(keyTag)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                || (other instanceof PersonContainsTagsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((PersonContainsTagsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambioforma": 34,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ReadOnlyPersonComparator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Comparator class for two Person objects"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "//@@author limzk1994"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "public class ReadOnlyPersonComparator implements Comparator\u003cPerson\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public int compare(Person personA, Person personB) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return personA.getName().compareTo(personB.getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "limzk1994": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniqueGroupList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DuplicateDataException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of groups that enforces no nulls and uniqueness between its elements."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports minimal set of list operations for the app\u0027s features."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Group#equals(Object)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "//@@author limzk1994"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "public class UniqueGroupList implements Iterable\u003cGroup\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    private final ObservableList\u003cGroup\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Constructs empty Group List."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public UniqueGroupList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Creates a UniqueGroupList using given tags."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Enforces no nulls."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public UniqueGroupList(Group groups) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        requireAllNonNull(groups);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        internalList.addAll(groups);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Replaces the Groups in this list with those in the argument group list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public void setGroups(UniqueGroupList groups) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        requireAllNonNull(groups);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        internalList.setAll(groups.internalList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public void setGroups(List\u003c? extends Group\u003e groups) throws DuplicateGroupException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        final UniqueGroupList replacement \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        for (final Group group : groups) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            replacement.add(group);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        setGroups(replacement);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Ensures every tag in the argument list exists in this object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public void mergeFrom(UniqueGroupList from) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        final UniqueGroupList alreadyInside \u003d this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        from.internalList.stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                .filter(group -\u003e !alreadyInside.contains(group))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                .forEach(internalList::add);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Returns true if the list contains an equivalent Group as the given argument."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public boolean contains(Group toCheck) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Adds a Tag to the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @throws DuplicateGroupException if the Group to add is a duplicate of an existing Tag in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public void add(Group toAdd) throws DuplicateGroupException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public Iterator\u003cGroup\u003e iterator() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public ObservableList\u003cGroup\u003e asObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                || (other instanceof UniqueGroupList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueGroupList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static class DuplicateGroupException extends DuplicateDataException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        protected DuplicateGroupException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        super(\"Operation would result in duplicate groups\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "limzk1994": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/GoogleCalendarClient.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.InetAddress;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.client.auth.oauth2.Credential;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.client.http.HttpTransport;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.client.json.JsonFactory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.client.json.jackson2.JacksonFactory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.client.util.DateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.services.calendar.Calendar;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.services.calendar.CalendarScopes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.services.calendar.model.CalendarListEntry;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.services.calendar.model.Event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.api.services.calendar.model.EventDateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.export.exceptions.CalendarAccessDeniedException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.export.exceptions.ConnectivityIssueException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "//@@author daviddalmaso"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " * Client for the Google Calendar API"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "public class GoogleCalendarClient {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(GoogleCalendarClient.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /** Application name. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private static final String applicationName \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            \"reInsurance Events\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /** Global instance of the JSON factory. */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private static final JsonFactory jsonFactory \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            JacksonFactory.getDefaultInstance();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /** Global instance of the HTTP transport. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private static HttpTransport httpTransport;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /** Global instance of the scopes required by this application."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private static final List\u003cString\u003e SCOPES \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            Arrays.asList(CalendarScopes.CALENDAR);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            httpTransport \u003d GoogleNetHttpTransport.newTrustedTransport();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        } catch (Throwable t) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            t.printStackTrace();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            System.exit(1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * Checks internet connectivity of application."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * Export calendar can only be run with internet access"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @throws ConnectivityIssueException"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public static void checkInternetConnection() throws ConnectivityIssueException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            InetAddress byName \u003d InetAddress.getByName(\"www.google.com\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            if (!byName.isReachable(10000)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                throw new ConnectivityIssueException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            logger.info(\"Connected to internet\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            logger.warning(\"Unable to connect to internet\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            throw new ConnectivityIssueException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * Authorizes a user using the authorization code flow supported by Google OAuth API"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @return a Credential object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public static Credential authorize() throws CalendarAccessDeniedException, ConnectivityIssueException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            InputStreamReader inputStreamReader \u003d new InputStreamReader("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                    GoogleCalendarClient.class.getResourceAsStream(\"/oAuth/client_secret.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            GoogleClientSecrets clientSecrets \u003d GoogleClientSecrets.load(jsonFactory,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                    inputStreamReader);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            GoogleAuthorizationCodeFlow flow \u003d new GoogleAuthorizationCodeFlow.Builder("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                    httpTransport, jsonFactory, clientSecrets, SCOPES"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            ).setAccessType(\"offline\").build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            checkInternetConnection();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            Credential credential \u003d new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                    .authorize(\"user\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            logger.info(\"Received user authorization\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            return credential;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            logger.info(\"User denied authorization\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            throw new CalendarAccessDeniedException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * Builds calendar service"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @return Calendar object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public static Calendar getCalendarService()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            throws CalendarAccessDeniedException, ConnectivityIssueException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        Credential credential \u003d authorize();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        return new Calendar.Builder(httpTransport, jsonFactory, credential)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                .setApplicationName(applicationName).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @param date string in \"dd-mm-yyyy\" format"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @return string in \"yyyy-mm-dd\" format"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private static String formatDate(String date) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        String[] dates \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        return dates[2] + \"-\" + dates[1] + \"-\" + dates[0];"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @param date date of the event"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @return an EventDateTime object for the specified date"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private static EventDateTime createEventDateTime(String date) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        DateTime dateTime \u003d new DateTime(formatDate(date));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        return new EventDateTime().setDate(dateTime);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @param event event to set start and end dateTimes"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @param date date to use for the event"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private static void setEventDates(Event event, String date) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        EventDateTime eventDateTime \u003d createEventDateTime(date);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        event.setStart(eventDateTime).setEnd(eventDateTime);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @param person a Person object"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @return an Event for their birthday"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private static Event createBirthdayEvent(Person person) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        Event birthday \u003d new Event()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                .setSummary(person.getName().fullName + \"\u0027s Birthday\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        setEventDates(birthday, person.getBirthday().value);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        String[] reccurrence \u003d new String[] {\"RRULE:FREQ\u003dYEARLY;COUNT\u003d100\"};"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        birthday.setRecurrence(Arrays.asList(reccurrence));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        return birthday;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @param person a Person object"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @return an Event for their appointment"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private static Event createAppointmentEvent(Person person) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        Event appointment \u003d new Event()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                .setSummary(\"Appointment with \" + person.getName().fullName);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        setEventDates(appointment, person.getAppointment().value);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        return appointment;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @param persons UniquePersonList: all Person objects in the reInsurance application"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @return returns a list of events, being the birthdays and appointments of each person"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private static List\u003cEvent\u003e createEvents(UniquePersonList persons) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        List\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        // Iterate through persons to get their birthdays and appointments"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            Event birthday \u003d createBirthdayEvent(person);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            Event appointment \u003d createAppointmentEvent(person);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            events.add(birthday);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            events.add(appointment);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @param persons UniquePersonList to make the Calendar out of"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * @throws Exception if the Google API Client fails"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public static void insertCalendar(UniquePersonList persons)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            throws CalendarAccessDeniedException, ConnectivityIssueException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        Calendar service \u003d getCalendarService();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        String existingCalendarId \u003d getExistingCalendarId(service, \"reInsurance Events\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            // If the reInsurance Events calendar already exists, delete it"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            if (existingCalendarId !\u003d null) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                service.calendars().delete(existingCalendarId).execute();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            // Create a new calendar"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            com.google.api.services.calendar.model.Calendar calendar \u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                    new com.google.api.services.calendar.model.Calendar();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            calendar.setSummary(\"reInsurance Events\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            calendar.setTimeZone(\"Asia/Singapore\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            // Insert the new calendar into the Google Account"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            com.google.api.services.calendar.model.Calendar createdCalendar \u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                    service.calendars().insert(calendar).execute();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            // Get created calendar Id"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            String calendarId \u003d createdCalendar.getId();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            // Insert events into create calendar"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            List\u003cEvent\u003e events \u003d createEvents(persons);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            for (Event event : events) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                event \u003d service.events().insert(calendarId, event).execute();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                logger.info(\"Event \" + event.getSummary() + \" added to calendar \" + createdCalendar.getSummary());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            logger.warning(\"Unable to insert reInsurance Events calendar\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public static String getExistingCalendarId(Calendar service, String calendarSummary) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            // Get list of calendars that user has"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            List\u003cCalendarListEntry\u003e calendarList \u003d service.calendarList().list().execute().getItems();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            // Iterate through the list of calendars to find the calendar id of the calendarSummary that matches"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            for (CalendarListEntry calendarListEntry : calendarList) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                if (calendarListEntry.getSummary().compareTo(calendarSummary) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                    return calendarListEntry.getId();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            logger.warning(\"Unable to get list of calendars owned by user\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "daviddalmaso": 217,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.Insurance.Insurance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                getTagSet(\"friends\"), new Birthday(\"11-12-1992\"), new Appointment(\"12-05-2018\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                new Group(\"Low Priority\"), getInsuranceSet(\"Health\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), new Birthday(\"05-05-1993\"), null,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                new Group(\"High Priority\"), getInsuranceSet(\"Health\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                getTagSet(\"neighbours\"), new Birthday(\"29-10-1992\"), null, new Group(\"Priority\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                getInsuranceSet(\"Life\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                getTagSet(\"family\"), new Birthday(\"01-01-1990\"), null, new Group(\"Low Priority\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                getInsuranceSet(\"Health\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                getTagSet(\"classmates\"), new Birthday(\"03-03-1980\"), null,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                new Group(\"Medium Priority\"), getInsuranceSet(\"Saving\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), getTagSet(\"colleagues\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                new Birthday(\"05-04-1970\"), null , new Group(\"Priority\"), getInsuranceSet(\"General\"))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            GoogleCalendar calendar \u003d new GoogleCalendar();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                calendar.addPersonToCalendar(samplePerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return sampleAb;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String s : strings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            tags.add(new Tag(s));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Returns a insurance set containing the list of strings given."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static Set\u003cInsurance\u003e getInsuranceSet(String... strings) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        HashSet\u003cInsurance\u003e insurances \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        for (String s : strings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            insurances.add(new Insurance(s));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return insurances;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 26,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PasswordManger.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PasswordAcceptedEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.WrongPasswordException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.EncryptionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "//@@author limzk1994"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limzk1994"
        },
        "content": " * Accesses the password file stored on the hard disk"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limzk1994"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "public class PasswordManger {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @param password user\u0027s password"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @throws IOException if file could not be found or created"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static void savePassword(String password) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        File file \u003d new File(getFilePath());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        FileUtil.createIfMissing(file);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        FileUtil.writeToFile(file, password);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        EncryptionUtil.encrypt(file);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Check whether to unlock the program"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @param password"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static boolean verifyPassword(String password) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        boolean unlock \u003d passwordCheck(password);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        if (unlock) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            EventsCenter.getInstance().post(new PasswordAcceptedEvent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return unlock;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Removes existing password if user input the correct password"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @param password oldpassword to be checked"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @throws IOException if file does not exists"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static void removePassword(String password) throws IOException, WrongPasswordException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        File file \u003d new File(getFilePath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        if (passwordCheck(password) \u0026\u0026 FileUtil.isFileExists(file)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            throw new WrongPasswordException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Check if password is correct"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @param password to be checked against records"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @return true if password exists, vice-versa"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static boolean passwordCheck(String password) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        String storedPassword \u003d getPassword();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return storedPassword.equals(password);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Check if the password exists"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @return true if password exists, vice-versa"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static boolean passwordExists() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        File file \u003d new File(getFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return FileUtil.isFileExists(file);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Method to get the password"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @return password"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @throws IOException if file could not be found"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static String getPassword() throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        File file \u003d new File(getFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        EncryptionUtil.decrypt(file);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        String password \u003d FileUtil.readFromFile(file);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        EncryptionUtil.encrypt(file);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Method to get the file path of password"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * @return file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public static String getFilePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        String filePath \u003d userPrefs.getPasswordFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "limzk1994": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedInsurance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.Insurance.Insurance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "//@@author Sebry9"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * JAXB-friendly version of the Insurance."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "public class XmlAdaptedInsurance {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private String insuranceName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Constructs an XmlAdaptedInsurance."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public XmlAdaptedInsurance() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Constructs a {@code XmlAdaptedInsurance} with the given {@code insuranceName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public XmlAdaptedInsurance(String insuranceName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.insuranceName \u003d insuranceName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Converts a given Insurance into this class for JAXB use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public XmlAdaptedInsurance(Insurance source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        insuranceName \u003d source.insuranceName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Converts this jaxb-friendly adapted insurance object into the model\u0027s Insurance object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public Insurance toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (!Insurance.isValidInsurance(insuranceName)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            throw new IllegalValueException(Insurance.MESSAGE_INSURANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return new Insurance(insuranceName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (!(other instanceof XmlAdaptedInsurance)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return insuranceName.equals(((XmlAdaptedInsurance) other).insuranceName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 62,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.Insurance.Insurance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Group;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private String birthday;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private String appointment;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private String group;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private List\u003cXmlAdaptedInsurance\u003e insurances \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public XmlAdaptedPerson() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                            String birthday, String appointment, String group, List\u003cXmlAdaptedInsurance\u003e insurances) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (appointment !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.group \u003d group;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (insurances !\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            this.insurances \u003d new ArrayList\u003c\u003e(insurances);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        birthday \u003d source.getBirthday().value;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        group \u003d source.getGroup().groupName;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (source.getAppointment() \u003d\u003d null || source.getAppointment().equals(\"\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            appointment \u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            appointment \u003d source.getAppointment().value;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            tagged.add(new XmlAdaptedTag(tag));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        insurances \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        for (Insurance insurance : source.getInsurance()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            insurances.add(new XmlAdaptedInsurance(insurance));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        final List\u003cInsurance\u003e personInsurance \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        for (XmlAdaptedInsurance insurance : insurances) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            personInsurance.add(insurance.toModelType());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.name \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(this.name)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name name \u003d new Name(this.name);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(this.phone)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone phone \u003d new Phone(this.phone);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.email \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(this.email)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email email \u003d new Email(this.email);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.address \u003d\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(this.address)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address address \u003d new Address(this.address);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.birthday \u003d\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                Birthday.class.getSimpleName()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Birthday.isValidBirthday(this.birthday)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        final Birthday birthday \u003d new Birthday(this.birthday);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Appointment.isValidAppointment(this.appointment)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Appointment.MESSAGE_APPOINTMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        final Appointment appointment \u003d new Appointment(this.appointment);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.group \u003d\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Group.class.getSimpleName()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Group.isValidGroup(this.group)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Group.MESSAGE_GROUP_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        final Group group \u003d new Group(this.group);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        final Set\u003cInsurance\u003e insurance \u003d new HashSet\u003c\u003e(personInsurance);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return new Person(name, phone, email, address, tags, birthday, appointment, group, insurance);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(birthday, otherPerson.birthday)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(appointment, otherPerson.appointment)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                \u0026\u0026 insurances.equals(otherPerson.insurances)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 group.equals(otherPerson.group)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 25,
      "-": 180
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tags;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private List\u003cXmlAdaptedInsurance\u003e insurances;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        insurances \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        insurances.addAll(src.getInsuranceList().stream().map(XmlAdaptedInsurance::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag t : tags) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addTag(t.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(p.toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        for (XmlAdaptedInsurance i : insurances) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            addressBook.addInsurance(i.toModelType());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags) \u0026\u0026 insurances.equals(otherAb.insurances);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 8,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        HelpWindow helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.show();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    //@@author daviddalmaso"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * Clears the reInsurance data"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private void handleClear() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            logic.execute(\"clear\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "            logger.log(Level.WARNING, \"Unable to clear the reInsurance data\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.personListPanel;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daviddalmaso": 13,
      "-": 201
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        { \"yellow\", \"blue\", \"red\", \"green\", \"orange\", \"purple\", \"grey\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label birthday;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label appointment;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private Label commission;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label group;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private FlowPane insurances;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        phone.setText(\"Phone: \" + person.getPhone().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        address.setText(\"Address: \" + person.getAddress().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        email.setText(\"Email: \" + person.getEmail().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        birthday.setText(\"Birthday: \" + person.getBirthday().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (person.getAppointment() \u003d\u003d null || person.getAppointment().equals(\"\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            appointment.setText(\"No Appointment Date\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            appointment.setText(\"Appointment: \" + person.getAppointment().value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        commission.setText(\"Total Commission: \" + person.getTotalCommission());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        group.setText(\"Group: \" + person.getGroup().groupName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        person.getInsurance().forEach(insurance -\u003e insurances.getChildren().add(new Label(insurance.insuranceName)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        startTag(person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private String getTagColorStyleFor(String tag) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        switch(tag) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"friends\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"friend\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"family\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return TAG_COLOR_STYLES[0]; //yellow"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"teacher\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"classmates\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"husband\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return TAG_COLOR_STYLES[1]; //blue"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"enemy\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"owesMoney\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return TAG_COLOR_STYLES[2]; //red"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"grandparent\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"neighbours\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return TAG_COLOR_STYLES[5]; //purple"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"colleagues\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return TAG_COLOR_STYLES[4]; //orange"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return TAG_COLOR_STYLES[6];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Creates the tag labels for {@code person}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private void startTag(Person person) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 80,
      "-": 54
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ".cell_small_label_green {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".anchor-pane {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .anchor-pane {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-padding: 1 1 1 1;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "/* @@author Sebry9 */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "#tags .purple {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-background-color: purple;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "#tags .grey {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "/* @@author Sebry9 */"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "#insurances {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "#insurances .label {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-padding: 1 1 1 1;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 53,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "\u003c?import javafx.scene.Group?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/9.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "  \u003cGridPane prefWidth\u003d\"201.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"38.0\" prefHeight\u003d\"58.0\" prefWidth\u003d\"202.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "              \u003c!-- @@author Sebry9 --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "      \u003cLabel fx:id\u003d\"commission\" prefHeight\u003d\"38.0\" prefWidth\u003d\"205.0\" text\u003d\"\\$commission\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"8\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"30.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     \u003cLabel fx:id\u003d\"group\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$group\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"6\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "   \u003cLabel fx:id\u003d\"appointment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$appointment\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "   \u003cLabel fx:id\u003d\"birthday\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$birthday\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "   \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "   \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"insurances\" GridPane.rowIndex\u003d\"7\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "         \u003cRowConstraints percentHeight\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "         \u003cRowConstraints minHeight\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "         \u003cRowConstraints minHeight\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "         \u003cRowConstraints minHeight\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "         \u003cRowConstraints minHeight\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "         \u003cRowConstraints minHeight\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "         \u003cRowConstraints minHeight\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "         \u003cRowConstraints minHeight\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "   \u003cGroup /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 43,
      "-": 18
    }
  },
  {
    "path": "src/main/resources/view/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "\u003c!-- @@author cambioforma --\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "\u003ciframe src\u003d\"https://calendar.google.com/calendar/embed?src\u003detcshadowgame%40gmail.com\u0026ctz\u003dAsia%2FSingapore\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        style\u003d\"border: 0\" width\u003d\"800\" height\u003d\"600\" frameborder\u003d\"0\" scrolling\u003d\"no\"\u003e\u003c/iframe\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "cambioforma": 6,
      "-": 5
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidInsuranceAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    \u003c!-- @@author Sebry9 --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    \u003c!-- Invalid Insurance --\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    \u003cinsurances\u003e@health\u003c/insurances\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 4,
      "-": 2
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cbirthday\u003e09-12-1994\u003c/birthday\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cappointment\u003e09-12-1994\u003c/appointment\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cgroup\u003ePRIORITY\u003c/group\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    \u003cinsurances\u003eHealth\u003c/insurances\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cbirthday\u003e09-12-1994\u003c/birthday\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cappointment\u003e09-12-1994\u003c/appointment\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cgroup\u003ePRIORITY\u003c/group\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    \u003cinsurances\u003eHealth\u003c/insurances\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cbirthday\u003e09-12-1994\u003c/birthday\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cappointment\u003e09-12-1994\u003c/appointment\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cgroup\u003ePRIORITY\u003c/group\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    \u003cinsurances\u003eHealth\u003c/insurances\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String GROUP_FIELD_ID \u003d \"#group\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private final Label groupLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.groupLabel \u003d getChildNode(GROUP_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public String getGroup() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return groupLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public List\u003cString\u003e getTagStyleClasses(String tag) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                .filter(label -\u003e label.getText().equals(tag))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                .map(Label::getStyleClass)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                .orElseThrow(() -\u003e new IllegalArgumentException(\"input tag unavailable \"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 15,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/EncryptionUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "//@@author limzk1994"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "public class EncryptionUtilTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempFileTest.txt\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    //test that decryption works"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public void encryptDecryptResult() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        TEMP_FILE.createNewFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        String dataToWrite \u003d \"This is the string to write\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(TEMP_FILE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        fileWriter.write(dataToWrite);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        EncryptionUtil.encrypt(TEMP_FILE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        EncryptionUtil.decrypt(TEMP_FILE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        Scanner fromFile \u003d new Scanner(TEMP_FILE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        String dataToRead \u003d fromFile.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        fromFile.close();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertEquals(dataToWrite, dataToRead);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    // test that encryption works"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public void encryptResultNotEqual() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        TEMP_FILE.createNewFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        String dataToWrite \u003d \"This is the string to write\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(TEMP_FILE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        fileWriter.write(dataToWrite);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        EncryptionUtil.encrypt(TEMP_FILE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        Scanner fromFile \u003d new Scanner(TEMP_FILE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        String dataToRead \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        if (fromFile.hasNext()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            dataToRead \u003d fromFile.nextLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "            fromFile.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertNotEquals(dataToWrite, dataToRead);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "limzk1994": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.storage.XmlAdaptedInsurance;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String VALID_BIRTHDATE \u003d \"09-12-1994\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String VALID_APPOINTMENT \u003d \"09-12-1994\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String VALID_GROUP \u003d \"PRIORITY\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final List\u003cXmlAdaptedInsurance\u003e VALID_INSURANCE \u003d Collections.singletonList"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        (new XmlAdaptedInsurance(\"Health\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, dataFromFile.getTagList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_BIRTHDATE, VALID_APPOINTMENT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            VALID_GROUP, VALID_INSURANCE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_BIRTHDATE, VALID_APPOINTMENT,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            VALID_GROUP, VALID_INSURANCE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_BIRTHDATE, VALID_APPOINTMENT,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            VALID_GROUP, VALID_INSURANCE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        TEMP_FILE.createNewFile();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").withInsurance(\"Health[10]\").build());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 17,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INSURANCE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_BIRTHDAY_AMY \u003d \"09-12-1994\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_BIRTHDAY_BOB \u003d \"29-10-1992\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_APPOINTMENT_AMY \u003d \"05-05-2018\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_APPOINTMENT_BOB \u003d \"25-12-2018\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_GROUP_AMY \u003d \"PRIORITY\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_GROUP_BOB \u003d \"PRIORITY\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_INSURANCE_AMY \u003d \"Health\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_INSURANCE_BOB \u003d \"General\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String BIRTHDAY_DESC_AMY \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String BIRTHDAY_DESC_BOB \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APPOINTMENT_DESC_AMY \u003d \" \" + PREFIX_APPOINTMENT + VALID_APPOINTMENT_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APPOINTMENT_DESC_BOB \u003d \" \" + PREFIX_APPOINTMENT + VALID_APPOINTMENT_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String GROUP_DESC_AMY \u003d \" \" + PREFIX_GROUP + VALID_GROUP_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String GROUP_DESC_BOB \u003d \" \" + PREFIX_GROUP + VALID_GROUP_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INSURANCE_DESC_AMY \u003d \" \" + PREFIX_INSURANCE + VALID_INSURANCE_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INSURANCE_DESC_BOB \u003d \" \" + PREFIX_INSURANCE + VALID_INSURANCE_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String INVALID_APPOINTMENT_DESC \u003d \" \" + PREFIX_APPOINTMENT + \"Jan\"; // alphabet not allowed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String INVALID_BIRTHDAY_DESC \u003d \" \" + PREFIX_BIRTHDAY + \"Jan\"; // alphabet not allowed"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String INVALID_COMMISSION_DESC \u003d \" \" + PREFIX_INSURANCE + \"Health[-100]\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //negative commission not allowed"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String INVALID_INSURANCE_DESC \u003d \" \" + PREFIX_INSURANCE + \"!Health\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    // \u0027!\u0027 not allowed in insurances"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_GROUP_DESC \u003d \" \" + PREFIX_GROUP + \"prior!ty\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).withInsurances(VALID_INSURANCE_AMY).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withInsurances(VALID_INSURANCE_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return undoCommand;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return redoCommand;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 8,
      "-": 174
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CountCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "//@@author daviddalmaso"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "public class CountCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private CountCommand countCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        countCommand \u003d new CountCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        countCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public void execute_countIsReturned_listsAllPersons() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                countCommand,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                Integer.toString(model.getAddressBook().getPersonList().size())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                        + \" persons in the address book\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daviddalmaso": 29,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.export.ExportType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.export.exceptions.InvalidFileNameException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "//@@author daviddalmaso"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public final UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public void execute_validExportPortfolioCommand_success() throws InvalidFileNameException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        ExportType exportType \u003d ExportType.PORTFOLIO;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        ExportCommand exportCommand \u003d prepareCommand(exportType);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        String expectedMessage \u003d String.format(ExportCommand.PORTFOLIO_MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "                userPrefs.getExportPortfolioFilePath());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        expectedModel.exportPortfolio(userPrefs.getExportPortfolioFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        assertCommandSuccess(exportCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    public void execute_invalidFileNameExportPortoflio_failure() throws InvalidFileNameException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        String invalidFileName \u003d \"asdf/asdf/asdf\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        thrown.expect(InvalidFileNameException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        expectedModel.exportPortfolio(invalidFileName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     * Returns a {@code ExportCommand} with the parameter {@code exportType}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    private ExportCommand prepareCommand(ExportType exportType) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand(exportType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        exportCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "        return exportCommand;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daviddalmaso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daviddalmaso": 45,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GroupCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.PersonContainsGroupsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "//@@author limzk1994"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "public class GroupCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        PersonContainsGroupsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                new PersonContainsGroupsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        PersonContainsGroupsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                new PersonContainsGroupsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        GroupCommand findFirstCommand \u003d new GroupCommand(firstPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        GroupCommand findSecondCommand \u003d new GroupCommand(secondPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        GroupCommand findFirstCommandCopy \u003d new GroupCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public void execute_zeroKeywords_noGroupFound() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        GroupCommand command \u003d prepareCommand(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Parses {@code userInput} into a {@code GroupCommand}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    private GroupCommand prepareCommand(String userInput) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        GroupCommand command \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                new GroupCommand(new PersonContainsGroupsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    private void assertCommandSuccess(GroupCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        CommandResult commandResult \u003d command.execute();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertEquals(expectedMessage, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertEquals(expectedList, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertEquals(expectedAddressBook, model.getAddressBook());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "limzk1994": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "//@@author Sebry9"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for SortCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void execute_sortByName_success() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Prefix prefix \u003d PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        SortCommand sortCommand \u003d prepareCommand(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        String expectedMessage \u003d SortCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        expectedModel.sortFilteredPersonList(model.getFilteredPersonList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertCommandSuccess(sortCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void execute_sortTwoPersonsList_success() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Prefix prefix \u003d PREFIX_NAME;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        AddressBook ab \u003d new AddressBookBuilder().withPerson(getTypicalPersons().get(1))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .withPerson(getTypicalPersons().get(0)).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Model modelWithTwoPersons \u003d new ModelManager(ab, new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        SortCommand sortCommand \u003d prepareCommand(modelWithTwoPersons);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        String expectedMessage \u003d SortCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(modelWithTwoPersons.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        expectedModel.sortFilteredPersonList(model.getFilteredPersonList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertCommandSuccess(sortCommand, modelWithTwoPersons, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void execute_sortEmptyList_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Prefix prefix \u003d PREFIX_EMAIL;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Model emptyModel \u003d new ModelManager(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_PERSON_LIST_EMPTY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertCommandFailure(prepareCommand(emptyModel), model, expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Generates a new {@code SortCommand} with the Model and prefix given."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private SortCommand prepareCommand(Model model) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        sortCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return sortCommand;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 53,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.APPOINTMENT_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INSURANCE_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMMISSION_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INSURANCE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INSURANCE_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.Insurance.Insurance;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAppointment(VALID_APPOINTMENT_BOB).withInsurance(VALID_INSURANCE_BOB).withGroup(VALID_GROUP_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAppointment(VALID_APPOINTMENT_BOB).withInsurance(VALID_INSURANCE_BOB).withGroup(VALID_GROUP_BOB)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parse_optionalTagsMissing_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .withGroup(VALID_GROUP_AMY).withTags().build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parse_optionalInsurancesMissing_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // zero insurances"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .withGroup(VALID_GROUP_AMY).withInsurance().build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // missing birthday prefix"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                    + VALID_BIRTHDAY_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // missing group prefix"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + VALID_GROUP_BOB + INSURANCE_DESC_BOB,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + VALID_BIRTHDAY_BOB + VALID_APPOINTMENT_BOB + VALID_GROUP_BOB + VALID_INSURANCE_BOB,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // invalid commission"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INVALID_COMMISSION_DESC,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            Insurance.MESSAGE_INSURANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // invalid insurance"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INVALID_INSURANCE_DESC,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            Insurance.MESSAGE_INSURANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + BIRTHDAY_DESC_BOB + APPOINTMENT_DESC_BOB + GROUP_DESC_BOB + INSURANCE_DESC_BOB"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 143,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.logic.commands.CountCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.logic.commands.FindTagCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.person.PersonContainsTagsPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parseCommandAlias_add() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommandWithAlias(person));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parseCommandAlias_clear() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parseCommandAlias_delete() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                DeleteCommand.COMMAND_WORD_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parseCommandAlias_edit() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD_ALIAS + \" \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parseCommandAlias_find() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                FindCommand.COMMAND_WORD_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parseCommand_fingTag() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"friends\", \"oweMoney\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        FindTagCommand command \u003d (FindTagCommand) parser.parseCommand("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            FindTagCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertEquals(new FindTagCommand(new PersonContainsTagsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parseCommandAlias_help() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD_ALIAS) instanceof HelpCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parseCommandAlias_history() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            fail(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parseCommand_count() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertTrue(parser.parseCommand(CountCommand.COMMAND_WORD) instanceof  CountCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parseCommandAlias_select() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                SelectCommand.COMMAND_WORD_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parseCommandAlias_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD_ALIAS) instanceof RedoCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parseCommandAlias_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD_ALIAS) instanceof UndoCommand);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 117,
      "-": 144
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.APPOINTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INSURANCE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INSURANCE_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 z/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // birthday"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withBirthday(VALID_BIRTHDAY_AMY).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // appointment"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + APPOINTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAppointment(VALID_APPOINTMENT_AMY).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // group"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + GROUP_DESC_AMY;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withGroup(VALID_GROUP_AMY).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // insurance"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INSURANCE_DESC_AMY;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withInsurances(VALID_INSURANCE_AMY).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 111,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GroupCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.GroupCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.PersonContainsGroupsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "//@@author limzk1994"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "public class GroupCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    private GroupCommandParser parser \u003d new GroupCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, GroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public void parse_validArgs_returnsGroupCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        GroupCommand expectedGroupCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "                new GroupCommand(new PersonContainsGroupsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedGroupCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedGroupCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "limzk1994": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.Insurance.Insurance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Group;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getTagList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsAssertionError() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Repeat ALICE twice"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        List\u003cInsurance\u003e newInsurances \u003d new ArrayList\u003c\u003e(ALICE.getInsurance());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newInsurances);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getTagList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getTagList().remove(0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void getGroupList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        addressBook.getGroupList().remove(0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void getInsuranceList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        addressBook.getInsuranceList().remove(0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons, tags lists and insurances list can violate interface constraints."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        private final ObservableList\u003cGroup\u003e groups \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        private final ObservableList\u003cInsurance\u003e insurances \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                        Collection\u003c? extends Insurance\u003e insurances) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            this.tags.setAll(tags);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            this.insurances.setAll(insurances);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return tags;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        public ObservableList\u003cGroup\u003e getGroupList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return groups;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        public ObservableList\u003cInsurance\u003e getInsuranceList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return insurances;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 54,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/Insurance/CommissionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "package seedu.address.model.Insurance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "//@@author Sebry9"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "public class CommissionTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Insurance(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void constructor_invalidCommission_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        String invalidCommission \u003d \"Health[-100]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Insurance(invalidCommission));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/Insurance/InsuranceTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "package seedu.address.model.Insurance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "//@@author Sebry9"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "public class InsuranceTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Insurance(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void constructor_invalidInsuranceName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        String invalidInsuranceName \u003d \"@Health\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Insurance(invalidInsuranceName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void isValidInsurance() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        //null insurance name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Insurance.isValidInsurance(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UniqueGroupListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniqueGroupList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "//@@author limzk1994"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "public class UniqueGroupListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        UniqueGroupList uniqueGroupList \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        uniqueGroupList.asObservableList().remove(0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "limzk1994": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UniqueInsuranceListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.Insurance.UniqueInsuranceList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "//@@author Sebry9"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "public class UniqueInsuranceListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        UniqueInsuranceList uniqueInsuranceList \u003d new UniqueInsuranceList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        uniqueInsuranceList.asObservableList().remove(0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 15,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AppointmentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "//@@author cambioforma"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "public class AppointmentTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Birthday(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    public void constructor_invalidAppointment_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        String invalidAppointment \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Appointment(invalidAppointment));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    public void isValidAppointment() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        // invalid appointment dates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertFalse(Appointment.isValidAppointment(\" \")); // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertFalse(Appointment.isValidAppointment(\"20052018\")); // without dashes"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertFalse(Appointment.isValidAppointment(\"appointment\")); // non-numeric"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertFalse(Appointment.isValidAppointment(\"2018-09-12\")); // yyyy-MM-dd format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertFalse(Appointment.isValidAppointment(\"19- 12-2018\")); // spaces within date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertFalse(Appointment.isValidAppointment(\"00-12-2018\")); // invalid day"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertFalse(Appointment.isValidAppointment(\"19-13-2018\")); // invalid month"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertFalse(Appointment.isValidAppointment(\"19-12-0000\")); // invalid year"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        // valid appointment dates"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertTrue(Appointment.isValidAppointment(null)); // null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertTrue(Appointment.isValidAppointment(\"\")); // empty string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertTrue(Appointment.isValidAppointment(\"01-01-2018\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertTrue(Appointment.isValidAppointment(\"30-12-1990\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertTrue(Appointment.isValidAppointment(\"29-02-2016\")); //leap year"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambioforma": 34,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/BirthdayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "//@@author cambioforma"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "public class BirthdayTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Birthday(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    public void constructor_invalidBirthday_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        String invalidBirthday \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Birthday(invalidBirthday));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    public void isValidBirthday() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        // null birthday date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Birthday.isValidBirthday(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        // invalid birthday dates"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"20052018\")); // without dashes"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"birthday\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"2018-09-12\")); // yyyy-MM-dd format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"19- 12-2018\")); // spaces within date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"00-12-2018\")); // invalid day"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"19-13-2018\")); // invalid month"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"19-12-0000\")); // invalid year"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cambioforma"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        // valid birthday dates"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertTrue(Birthday.isValidBirthday(\"01-01-2018\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertTrue(Birthday.isValidBirthday(\"30-12-1990\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "        assertTrue(Birthday.isValidBirthday(\"29-02-2016\")); //leap year"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cambioforma"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cambioforma": 36,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String INVALID_INSURANCE \u003d \"!Health\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String VALID_BIRTHDAY \u003d BENSON.getBirthday().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String VALID_APPOINTMENT \u003d BENSON.getAppointment().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String VALID_GROUP \u003d BENSON.getGroup().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final List\u003cXmlAdaptedInsurance\u003e VALID_INSURANCE \u003d BENSON.getInsurance().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .map(XmlAdaptedInsurance::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_BIRTHDAY,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                    VALID_APPOINTMENT, VALID_GROUP, VALID_INSURANCE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            VALID_BIRTHDAY, VALID_APPOINTMENT, VALID_GROUP, VALID_INSURANCE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_BIRTHDAY,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                    VALID_APPOINTMENT, VALID_GROUP, VALID_INSURANCE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            VALID_BIRTHDAY, VALID_APPOINTMENT, VALID_GROUP, VALID_INSURANCE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_BIRTHDAY,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                    VALID_APPOINTMENT, VALID_GROUP, VALID_INSURANCE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            VALID_BIRTHDAY, VALID_APPOINTMENT, VALID_GROUP, VALID_INSURANCE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS, VALID_BIRTHDAY,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                    VALID_APPOINTMENT, VALID_GROUP, VALID_INSURANCE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            VALID_BIRTHDAY, VALID_APPOINTMENT, VALID_GROUP, VALID_INSURANCE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void toModelType_invalidInsurances_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        List\u003cXmlAdaptedInsurance\u003e invalidInsurances \u003d new ArrayList\u003c\u003e(VALID_INSURANCE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        invalidInsurances.add(new XmlAdaptedInsurance(INVALID_INSURANCE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_BIRTHDAY,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                VALID_APPOINTMENT, VALID_GROUP, invalidInsurances);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags, VALID_BIRTHDAY,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                    VALID_APPOINTMENT, VALID_GROUP, VALID_INSURANCE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 37,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableAddressBookTest/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File TYPICAL_PERSONS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalPersonsAddressBook.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File INVALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagAddressBook.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final File INVALID_INSURANCE_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidInsuranceAddressBook.xml\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void toModelType_invalidInsuranceFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_INSURANCE_FILE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 11,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.Insurance.Insurance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").withTag(\"Friend\").build();}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"person is expected to be unique.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withTag(String tagName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addTag(new Tag(tagName));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Parses {@code insuranceName} into a {@code Insurance} and adds it to the {@code AddressBook} that we"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public AddressBookBuilder withInsurance(String insuranceName) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            addressBook.addInsurance(new Insurance(insuranceName));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            throw new IllegalArgumentException(\"insuranceName is expected to be valid.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 13,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.Insurance.Insurance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.person.Group;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setBirthday(person.getBirthday());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAppointment(person.getAppointment());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setGroup(person.getGroup());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor.setCommission(person.getTotalCommission());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor.setInsurances(person.getInsurance());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Sets the {@code Insurance} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public EditPersonDescriptorBuilder withInsurance(String... insurances) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Set\u003cInsurance\u003e insuranceSet \u003d Stream.of(insurances).map(Insurance::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor.setInsurances(insuranceSet);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public EditPersonDescriptorBuilder withBirthday(String birthday) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor.setBirthday(new Birthday(birthday));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public EditPersonDescriptorBuilder withAppointment(String appointment) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor.setAppointment(new Appointment(appointment));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Sets the {@code Group} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public EditPersonDescriptorBuilder withGroup(String group) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor.setGroup(new Group(group));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Parses the {@code insurances} into a {@code Set\u003cInsurance\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public EditPersonDescriptorBuilder withInsurances(String... insurances) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Set\u003cInsurance\u003e insuranceSet \u003d Stream.of(insurances).map(Insurance::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        descriptor.setInsurances(insuranceSet);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 64,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.model.Insurance.Insurance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_TAGS \u003d \"friends\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_BIRTHDAY \u003d \"09-12-1994\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_APPOINTMENT \u003d \"12-05-2018\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String DEFAULT_GROUP \u003d \"family\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String DEFAULT_INSURANCE \u003d \"Health\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String DEFAULT_COMMISSION \u003d \"0\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Birthday birthday;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Appointment appointment;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private Group group;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private Set\u003cInsurance\u003e insurance;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private String totalCommission;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        birthday \u003d new Birthday(DEFAULT_BIRTHDAY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        appointment \u003d new Appointment(DEFAULT_APPOINTMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        group \u003d new Group(DEFAULT_GROUP);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        insurance \u003d SampleDataUtil.getInsuranceSet(DEFAULT_INSURANCE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        totalCommission \u003d new String(DEFAULT_COMMISSION);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        birthday \u003d personToCopy.getBirthday();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        appointment \u003d personToCopy.getAppointment();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        group \u003d personToCopy.getGroup();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        insurance \u003d new HashSet\u003c\u003e(personToCopy.getInsurance());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        totalCommission \u003d personToCopy.getTotalCommission();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Sets the {@code Birthday} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withBirthday(String birthday) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        this.birthday \u003d new Birthday(birthday);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Sets the {@code Appointment} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAppointment(String appointment) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appointment \u003d new Appointment(appointment);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Sets the {@code Insurance} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public PersonBuilder withInsurance(String ... insurance) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.insurance \u003d SampleDataUtil.getInsuranceSet(insurance);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Sets the {@code Group} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public PersonBuilder withGroup(String group) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        this.group \u003d new Group(group);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return new Person(name, phone, email, address, tags, birthday, appointment, group, insurance);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 35,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INSURANCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static String getAddCommandWithAlias(Person person) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return AddCommand.COMMAND_WORD_ALIAS + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_BIRTHDAY + person.getBirthday().value + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_APPOINTMENT + person.getAppointment().value + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_GROUP + person.getGroup().groupName + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        person.getInsurance().stream().forEach("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            s-\u003e sb.append(PREFIX_INSURANCE + s.insuranceName + \" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 8,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"85355255\").withBirthday(\"01-12-1990\").withAppointment(\"09-12-2018\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .withGroup(\"PRIORITY\").withInsurance(\"General\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withBirthday(\"02-01-1991\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        .withAppointment(\"10-12-2018\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .withGroup(\"PRIORITY\").withInsurance(\"General\").withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withBirthday(\"03-02-1993\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        .withAppointment(\"11-12-2018\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .withGroup(\"PRIORITY\").withInsurance(\"General\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withBirthday(\"04-03-1994\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        .withAppointment(\"09-10-2018\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .withGroup(\"PRIORITY\").withInsurance(\"General\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withBirthday(\"05-06-1995\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        .withAppointment(\"09-09-2018\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .withGroup(\"PRIORITY\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withBirthday(\"11-12-1994\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        .withAppointment(\"09-08-2018\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .withGroup(\"PRIORITY\").withInsurance(\"General\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withBirthday(\"10-11-1990\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        .withAppointment(\"09-07-2018\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            .withGroup(\"PRIORITY\").withInsurance(\"General\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            .withGroup(VALID_GROUP_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            .withGroup(VALID_GROUP_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                ab.addPerson(person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(\"not possible\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 19,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personWithTags \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personCard \u003d new PersonCard(personWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        //@@author Sebry9"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // with default color Tags"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Person personWithDefaultColorTag \u003d new PersonBuilder().withTags(\"default\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        personCard \u003d new PersonCard(personWithDefaultColorTag, 3);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertCardDisplay(personCard, personWithDefaultColorTag, 3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        PersonCard copy \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertTrue(personCard.equals(copy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertTrue(personCard.equals(personCard));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertFalse(personCard.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertFalse(personCard.equals(0));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // different person, same index -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // same person, different index -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(person, 1)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        // verify person details are displayed correctly"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertCardDisplaysPerson(expectedPerson, personCardHandle);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 51,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.ui.PersonCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        expectedCard.getTags().forEach(tag -\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertEquals(\"Phone: \" + expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertEquals(\"Email: \" + expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertEquals(\"Address: \" + expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertEquals(\"Group: \" + expectedPerson.getGroup().groupName, actualCard.getGroup());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertTagsEqual(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    //@@author Sebry9"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Return the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * @see PersonCard#getTagColorStyleFor(String)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        switch(tagName) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"friends\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"friend\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"family\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return \"yellow\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"teacher\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"classmates\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"husband\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return \"blue\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"enemy\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"owesMoney\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return \"red\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"grandparent\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"neighbours\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return \"purple\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        case \"colleagues\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return \"orange\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return \"grey\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Assert that the tags in {@code actualCard} is aligned with {@code expectedPerson}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertEquals(expectedTags, actualCard.getTags());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        expectedTags.forEach(tag -\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                getTagColorStyleFor(tag)),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                    actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 102,
      "-": 28
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.APPOINTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INSURANCE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: Fix test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will remain untested until fixed"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + BIRTHDAY_DESC_AMY + \"   \" + APPOINTMENT_DESC_AMY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"   \" + GROUP_DESC_AMY + \"   \" + INSURANCE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        /* Case: add a person with Alias command \"a\" -\u003e added */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        toAdd \u003d AMY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        command \u003d \"   \" + AddCommand.COMMAND_WORD_ALIAS + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + BIRTHDAY_DESC_AMY + \"   \" + GROUP_DESC_AMY"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        /* Case: Undo adding Amy with Alias command \"u\" -\u003e Amy deleted */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD_ALIAS;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withGroup(VALID_GROUP_AMY)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withGroup(VALID_GROUP_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withGroup(VALID_GROUP_AMY)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_AMY).withGroup(VALID_GROUP_AMY)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // This test will fail if a new tag that is not in the model is used, see the bug documented in"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // AddressBook#addPerson(Person)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY;;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY;;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY;;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sebry9": 5,
      "-": 286
    }
  },
  {
    "path": "unused/PasswordCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CHANGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMOVE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.PasswordCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "//@@author limzk1994"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "public class PasswordCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    private static String oldPassword \u003d \"old\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    private static String newPassword \u003d \"new\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    public void pass() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        // Set Password success"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        String command \u003d PasswordCommand.COMMAND_WORD + \" \" + PREFIX_SET + oldPassword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertCommandSuccess(command, PasswordCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        // Set Password fail because password already present"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        command \u003d PasswordCommand.COMMAND_WORD + \" \" + PREFIX_SET + oldPassword;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertCommandFailure(command, PasswordCommand.MESSAGE_PASSWORD_EXISTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        // Change Password success"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        command \u003d PasswordCommand.COMMAND_WORD + \" \" + PREFIX_CHANGE + newPassword;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertCommandSuccess(command, PasswordCommand.MESSAGE_PASSWORD_CHANGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        // Remove Password success"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        command \u003d PasswordCommand.COMMAND_WORD + \" \" + PREFIX_REMOVE + newPassword;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertCommandSuccess(command, PasswordCommand.MESSAGE_PASSWORD_REMOVE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        // Remove Password fail because no password to clear"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        command \u003d PasswordCommand.COMMAND_WORD + \" \" + PREFIX_REMOVE + newPassword;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertCommandFailure(command, PasswordCommand.MESSAGE_NO_PASSWORD_EXISTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        // Change Password fail because no password to change"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        command \u003d PasswordCommand.COMMAND_WORD + \" \" + PREFIX_CHANGE + newPassword;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertCommandFailure(command, PasswordCommand.MESSAGE_NO_PASSWORD_EXISTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    private void assertCommandFailure (String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertEquals(command, getCommandBox().getInput());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, getModel());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limzk1994"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limzk1994"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "limzk1994": 62
    }
  },
  {
    "path": "unused/ProfilePic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "content": "//@@author Sebry9-unused"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * Represents a Person\u0027s Profile picture in reInsurance."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * Guarantees: immutability and validity."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * Unused reason: Group deem that it is not significant addition to the application and decided to cease it due to"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " * deadline being too tighted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sebry9"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "public class ProfilePic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public static final String DEFAULT_PHOTO \u003d\"/images/default.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ProfilePic.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String MESSAGE_PHOTO_CONSTRAINTS \u003d \"Profile Picture: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        + \"specified file does not exist.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String MESSAGE_PHOTO_COPY_ERROR \u003d \"Error copying photo to reInsurance\u0027s data directory\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String DEFAULT_SAVE_DIR \u003d \"data\" + File.separator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String ALLOWED_TYPE_JPG \u003d \".jpg\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String ALLOWED_TYPE_JPEG \u003d \".jpeg\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final String ALLOWED_TYPE_PNG \u003d \".png\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static final int MAX_SIZE \u003d 1000000; // Sets allowable maximum profile picture size to be 1MB"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public final String picture;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Validates given Profile picture."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * @throws IllegalValueException if given profile picture string is invalid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public ProfilePic(String filePath) throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (filePath \u003d\u003d null || filePath.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            this.picture \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        } else if (isDefaultPhoto(filePath)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            this.picture \u003d filePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            String trimmedPhotoPath \u003d filePath.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            if (!isValidPhoto(trimmedPhotoPath)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                throw new IllegalValueException(MESSAGE_PHOTO_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                File from \u003d new File(trimmedPhotoPath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                this.picture \u003d DEFAULT_SAVE_DIR + from.getName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                Path to \u003d Paths.get(this.picture);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "                copyPhotoToDefaultDir(from.toPath(), to);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Return if string give is valid and within size limits"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static boolean isValidPhoto(String test) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        File file \u003d new File(test);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return file.exists()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            \u0026\u0026 file.length() \u003c\u003d MAX_SIZE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            \u0026\u0026 (test.endsWith(ALLOWED_TYPE_JPG)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            || test.endsWith(ALLOWED_TYPE_JPEG)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            || test.endsWith(ALLOWED_TYPE_PNG));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Return path to default photo"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static boolean isDefaultPhoto(String filePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return filePath.equals(DEFAULT_PHOTO);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Copies the photo from Path {@code from} to Path {@code to}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    private static void copyPhotoToDefaultDir(Path from, Path to) throws IllegalValueException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            Files.createDirectories(Paths.get(DEFAULT_SAVE_DIR));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            Files.copy(from, to, REPLACE_EXISTING);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            logger.info(\"Display photo error: \" + io.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            throw new IllegalValueException(MESSAGE_PHOTO_COPY_ERROR);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     * Returns file path for user-specified display photos."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public String getAbsoluteFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        if (isDefaultPhoto(picture)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return picture;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            return \"file://\" + Paths.get(picture).toAbsolutePath().toUri().getPath();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return picture;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            || (other instanceof ProfilePic // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "            \u0026\u0026 this.picture.equals(((ProfilePic) other).picture)); // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "        return picture.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sebry9"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sebry9"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "Sebry9": 112,
      "-": 10
    }
  }
]
