[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d Sell IT"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2103JAN2018-W10-B2/main[image:https://travis-ci.org/CS2103JAN2018-W10-B2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "https://coveralls.io/github/CS2103JAN2018-W10-B2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W10-B2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* This is a desktop addressbook and calendar application built for salesmen. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* It is meant to keep track of a large number of clients based across many different countries as well as the appointments that are scheduled with them. It supports note-taking and archiving."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* It is based on AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 6,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " * Gradle Configuration File"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \"com.github.kt3k.coveralls\" version \"2.4.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \"com.github.johnrengelman.shadow\" version \u00271.2.3\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_8"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_8"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    jcenter()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination \"${buildDir}/jacocoHtml\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.7-alpha\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    compile \u0027com.sun.mail:javax.mail:1.6.1\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    compile \u0027javax.mail:javax.mail-api:1.6.1\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    compile \u0027javax.activation:activation:1.1.1\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    compile group: \u0027com.calendarfx\u0027, name: \u0027view\u0027, version: \u00278.4.2\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027org.fxmisc.easybind\u0027, name: \u0027easybind\u0027, version: \u00271.0.3\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027testfx-legacy\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027junit\u0027, module: \u0027junit\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u00271.8.0_20\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    archiveName \u003d \"sellit.jar\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    gradleVersion \u003d \u00274.6\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(allprojects.sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(allprojects.sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(allprojects.jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d allprojects.sourceSets.main.allSource.srcDirs.flatten()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * stalling the build."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        beforeTest { descriptor -\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.lifecycle(\u0027Running test: \u0027 + descriptor)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "task headless \u003c\u003c {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    println \"Setting headless mode properties.\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    test {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027java.awt.robot\u0027, \u0027true\u0027"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027testfx.robot\u0027, \u0027glass\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027testfx.headless\u0027, \u0027true\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027prism.order\u0027, \u0027sw\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027prism.text\u0027, \u0027t2k\u0027"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes linkcss: true,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "               stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "               \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "               icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "               experimental: true,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "               sectlinks: true,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "               idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "               idseparator: \u0027-\u0027"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " * Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " * Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": " * This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027UserGuide.html\u0027"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 4,
      "glorialaw": 4,
      "-": 205
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Sell IT was developed by the https://github.com/CS2103JAN2018-W10-B2[W10-B2] team. +"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "_{The dummy content given below serves as a placeholder to be used by future forks of the project.}_ +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d Ong Kuan Yang"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "image::kuanyang.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} [https://github.com/ongkuanyang[github]] [\u003c\u003cOngKuanYang#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Responsibilities: Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d Gloria Ho Yan Law"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "image::Gloria.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "{empty}[https://github.com/glorialaw[github]] [\u003c\u003cglorialaw#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Responsibilities: UI component"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d Ma Yuqian"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "image::Yuqian.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "{empty}[https://github.com/XavierMaYuqian[github]] [\u003c\u003cXavierMaYuqian#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Responsibilities: Model component"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 9,
      "XavierMaYuqian": 2,
      "glorialaw": 3,
      "-": 24
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d Sell IT - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "By: `W10-B2`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `1.8.0_60`* or later"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Having any Java 8 version is not enough. +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with earlier versions of Java 8."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicCommandClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//tag::Login/Logout[]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d Lock/unlock \u0026 reset password feature"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "The lock/unlock command feature requires the sales person to enter password whenever he/she starts to modify the addressbook. This will allow for a safer address book."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "To lock the adress book, simply type \u0027lock\u0027 or the command alias \u0027lk\u0027."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "An example of the sort command would be: lock"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "An example of the sort command alias would be: lk"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "To unlock the adress book, simply type \u0027unlock PASSWORD\u0027 or the command alias \u0027ulk PASSWORD\u0027."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "An example of the sort command would be: unlock 123456"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "An example of the sort command alias would be: ulk 123456"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "The reset password command feature allows the sales person to change password. This will allow for a safer address book."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "To change the password, simply type \u0027setPassword OLD_PASSWORD NEW_PASSWORD\u0027 or the command alias \u0027sp OLD_PASSWORD NEW_PASSWORD\u0027."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "An example of the change password command would be: setPassword 123456 123"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "An example of the sort command alias would be: sp 123456 123"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* **Alternative 1 (current choice):** After unlocking, the content at contact and appointment panel remain unshown, list/listall/listappointment comand are needed."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "** Pros: User can only list the content they want with flexibility."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "** Cons: One more command is needed, it might be a little bit complex."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* **Alternative 2:** After unlocking, the content at contact and appointment panel show automatically."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "** Pros: Less action and command are needed."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "** Cons: User can not hide the content they don\u0027t want to show"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//end::Login/Logout[]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//tag::SortCommand[]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d SortCommand feature"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "The sort command feature allows the sales person to sort their clients according to their names in alphebetical order. This will allow for a more organized and neat address book."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "To sort the adress book, simply type \u0027sort\u0027 or the command alias \u0027so\u0027."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "An example of the sort command would be: sort"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "An example of the sort command alias would be: so"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//end::SortCommand[]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//tag::ExportCommand[]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d ExportCommand feature"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "The export command feature allows the sales person to export their clients to a csv file. This will allow for a more organized and neat address book."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "To export the adress book, simply type \u0027export\u0027 or the command alias \u0027ep\u0027."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "An example of the sort command would be: export"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "An example of the sort command alias would be: ep"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//end::ExportCommand[]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//tag::ListAppointment[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d ListAppointment feature"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "The listappointment command feature allows the sales person to list all the appointments in his addressbook. This will allow for a more simple way to fina an appointment."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "To list the appointment in the adress book, simply type \u0027listappointment\u0027 or the command alias \u0027lap\u0027."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "An example of the sort command would be: listappointment"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "An example of the sort command alias would be: lap"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//end::ListAppointment[]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "// tag::DeleteTag[]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d DeleteTag feature"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "The delete tag command allows user to remove a particular tag from all persons in the AddressBook. For example, he may want to delete the tag \"neigbour\" from all his contacts if he is no longer staying at the place."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "To delete a tag, simply type \u0027deletetag [TAG]\u0027 or the command alias \u0027dt [TAG]\u0027."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "An example of the delete tag command would be: deletetag firends"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "An example of the sort command alias would be: dt friends"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the AddressBook. This may cause some tests to fail."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* **Alternative 1 (current choice):** After updating a person, we go through everyone in the address book and collect their tags."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "** Pros: No more unused tags."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "** Cons: The time complexity is too high, of O(n^2)."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* **Alternative 2:** When deleting a tag, check whether there are person still having it as a tag."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "** Pros: Less time consuming."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "** Cons: More complex inplementation."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//end::DeleteTag[]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "// tag::AddComment[]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d AddComment feature"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "The add comment tag command  will allow user to add some plain text information associated with a contact that the user wants to remember, so that I can recall it when I need the information."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "To add the comment of a client, the cm/ tag is used with either the add or edit commands, followed by the comment."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "An example of the add command would be: add n/David ... cm/interested in football"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "An example of the edit command would be: edit 1 cm/interested in bascketball"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of comment"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* **Alternative 1 (current choice):** User must add comment when adding client."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "** Pros: Information consistency."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "** Cons: User may not always want to add comment to clients."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* **Alternative 2:** User can optionally add the comments in a separate command."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "** Pros: Will use less memory (e.g. number of comments are less than or equal to number of users)."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "** Cons: May be more difficult to manage contacts without some comments."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//end::AddComment[]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//tag::archive[]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d Archive feature"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "The archive feature allows the salesperson to archive clients that he no longer contacts, but does not want to delete as he possibly might want to contact him/her again. Once archived, the client is not shown in the list. To display the client, either `find` or `listall` command has to be used. The client is then displayed in a red font with strikethrough, indicating that he/she is archived."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "The archival feature is implemented by adding a boolean variable `isArchived` in the Person model. Listing is filtered through the use of a predicate, `PREDICATE_SHOW_UNARCHIVED_PERSONS`, that will filter for those clients that are unarchived"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: find shows archived clients"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* **Alternative 1 (current choice):** Find shows archived clients."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Pros: Allows the user to quickly find specific clients that he wants to unarchive."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Cons: Goes against the purpose of not cluttering up the UI with archived clients."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* **Alternative 2:** Find only displays unarchived clients."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Pros: Will not clutter up the UI with archived clients so that the user can quickly find clients that are unarchived."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Cons: It is hard to find a specific archived person. User has to scroll through listall."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: isArchived is stored in a boolean in the Person model"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* **Alternative 1 (current choice):** Store whether a client is archived in the Person model as a boolean"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Pros: Simple to implement"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Cons: Uses more space than the alternative."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* **Alternative 2:** Keep two separate lists of persons, archived and unarchived."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Pros: Uses less space than the alternative."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Cons: Harder to implement, more changes have to be made to existing codebase."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "// end::archive[]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//tag::switchtheme[]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d Switch theme feature"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "image::SwitchSequenceDiagram.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "The switch theme feature allows the salesperson to switch between dark and light thenmes as he might have to work under different lighting conditions. The theme that is in used persists across restarts"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "See sequence diagram. The archival feature is implemented by triggering an `SwitchThemeRequestEvent()` which is then handled in `MainWindow`."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "The theme switching in done in two ways. For the main window, it is done by changing the CSS stylesheet used. For the calendar, because the stylesheet is complicated and is provided by an external library, we use a JavaFX effect to invert all colors."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Theme switching is triggered by an event"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* **Alternative 1 (current choice):** Theme switching is triggered by an event"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Pros: Preserves modularity, and Separation of Concerns."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Cons: More code."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* **Alternative 2:** Theme switching happens directly in switch theme command"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Pros: Simpler."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Cons: Breaks modularity and Separations of Concerns. UI should be handled in the UI section not the Logic section."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Calendar theme switching is handled by a JavaFX effect"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* **Alternative 1 (current choice):** Calender theme swithing is handled by JavaFX effect"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Pros: Simple to implement"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Cons: Potentially ugly and less flexible, as cannot configure the individual colours."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* **Alternative 2:** Create another calendar CSS for the dark theme"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Pros: More flexible in choice of colors, resulting in more beautiful UI."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Cons: Difficult to implement, due to complexity of CSS stylesheet."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Cons: Loses color consistency of simply inverting colors."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Cons: Any future change in colors have to update two stylesheets."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "// end::switchtheme[]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//tag::appointment[]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d Appointments feature"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "The appointments feature allows the salesperson to add and edit appointments that he have with clients in the contact list. He can also view the appointments in a calendar."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "The edit appointment feature is interesting in that editing persons check whether the person is already in the appointment. If so, the person is removed. Otherwise, the person is added."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "This differs from the behaviour of editing tags of a person, which is destructive and overwrite all tags."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Editing an appointment\u0027s person list is non-destructive"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* **Alternative 1 (current choice):** Editing an appointment\u0027s person list adds the person if not present and removes the person otherwise."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Pros: Fits the usual use case of a person saying he is/is unable to make it for the appointment"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Cons: Cannot overwrite the person list with a new set of persons directly."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* **Alternative 2:** Destructively edit the person list, replacing it with the new list."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Pros: Easier to overwrite the person list."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Cons: Does not fit the expected use case"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Calendar is handled by an external library, CalendarFX"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* **Alternative 1 (current choice):** Calender is handled by external library, CalendarFX"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Pros: Less effort, make good use of existing code to reduce duplication of effort."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Cons: Calendar is less customisable. Limited to what is already implemented."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* **Alternative 2:** Create our own calendar"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Pros: More flexible terms of how the calendar will work"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Cons: More effort. Time could be used on other features."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "// end::appointment[]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "//tag::timezone[]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d TimeZone feature"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "The time zone feature allows the sales person to add a time zone for their clients. This will allow for simplified appointment scheduling between the sales person and their international clients."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "To add the time zone of a client, the tz/ tag is used with either the add or edit commands, followed by the time zone."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "An example of the add command would be: add n/David ... tz/PST"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "An example of the edit command would be: edit 1 tz/SGT"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of time zone"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "* **Alternative 1 (current choice):** User must add time zone when adding client."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "** Pros: Information consistency."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "** Cons: User may not always know client\u0027s time zone."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "* **Alternative 2:** User can optionally add the time zone in a separate command."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "** Pros: Will use less memory (e.g. number of time zones are less than or equal to number of users)."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "** Cons: May be more difficult to schedule meetings with clients with unknown time zones."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "// end::timezone[]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "//tag::email[]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d Email feature"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "The email feature allows the user to send emails in the app by typing their message in an email compose pop up box."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "The inbox feature allows the user to see a preview of the plain text emails that they have received right when they open the app. To view the message, the user clicks the message and an popup will appear with the full message."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: The UI of the inbox panel"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "* **Alternative 1 (current choice):** Display the inbox panel so that it can be seen right when the user opens Sell IT."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "** Pros: Convenient and saves time which are key aspects as the user is a busy sales person."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "** Cons: May clutter up the app\u0027s start page."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "* **Alternative 2:** Inbox can be displayed on a separate panel which can be accessed by the user through a mail icon button."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "** Pros: Less clutter"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "** Cons: May be less convenient for the sales person to always need to click the button to view their inbox."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "// end::email[]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicCommandClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that are not undoable are implemented this way:"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... list logic ..."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "With the extra layer, the commands that are undoable are implemented this way:"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UndoableCommand extends Command {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... undo logic ..."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "        executeUndoableCommand();"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... delete logic ..."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Hard for new developers to understand the template pattern."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Just override `execute()`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Does not involve the template pattern, easier for new developers to understand."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Include all commands."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Might be more intuitive for the user."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use separate stack for undo and redo"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "* Salesperson targeting clients from multiple countries."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "* has a need to manage a significant number of clients"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "*Value proposition*: A client management application that includes contact management and calendar, and note-taking and supports multiple time-zones"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d Feature Contribution"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d\u003d Ong Kuan Yang"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* *Major*: A calendar or appointment scheduling feature that allows the salesperson to record down when he has appointments with his clients and to see at a glance his future appointments for the days/month ahead."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* *Minor*: An archival feature for clients that the salesperson is no longer in contact with so that they do not clutter up the interface as the salesperson has to manage a lot of clients."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* *Minor*: A switch theme command to switch between dark and light themes."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* *Minor*: Command alias feature so that user does not have to type long commands."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* *Minor*: A loading screen for emails so that the app does not become unresponsive"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d\u003d Gloria Law"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "* *Major*: An email feature comprised of an email inbox panel and the ability to compose, reply and forward emails."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "* *Minor*: A time zone feature which allows the sales person to add the timezone details of their clients."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "* *Minor*: An enhancement that changes incorrect commands to red."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d\u003d Ma Yuqian"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *Major*: A login/logout \u0026 reset password function that allows the user to verify his/her identity when he/she starts using this APP to protect his/her privacy"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *Minor*: A sort command that can sort in alphabetical order."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *Minor*: A remove tag command that can remove tags from all the people in the address book."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *Minor*: A comment feature which allows the sales person to add the notes of their clients."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *Minor*: A total person at status bar to show the total number of persons in the address book."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *Minor*: A export command that can export all persons in the address book to a csv file."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "|`* * *` |user |Login/logout to my Addressbook to modify my contacts and appointments |protect my data"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "|`* * *` |user |schedule meetings with my clients |remember when I am supposed to meet them"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "|`* * *` |user |conveniently send emails to clients |increase efficiency and save time"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "|`* * *` |user |conveniently see my email inbox |know when my clients are contacting me"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "|`* * *` |user |tag clients with important info like the products they are interested in | so that I can list and group together related clients quickly."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "|`* * *` |user |log notes specific to each client |so that I can recall the information when I need it"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "|`* *` |user |set the timezone for each contact |meet or call them at an appropriate time"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "|`* *` |user |archive certain contacts |useless or expired contacts won\u0027t clutter up the program but I can still find them when I need to"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "|`* *` |user |delete a certain tag for all persons |remove certain tags if the relationship is not there anymore"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "|`* *` |user |export my contacts to a file |export the data to somewhere else if I need it"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d Use case: Add category to person"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "1.  User searches for a specific client"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "2.  AddressBook shows a list of users matching query"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "3.  User puts the contact into the desired category (a user can have many)."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "4.  System updates contact to reflect new category."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "* 2a1. The contact is not found."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "* 3a. The category does not exist."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "+"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "User creates a new category."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d Use case: Archive inactive contacts."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "1.  System puts users in the inactive category if contact had no activity for a specified period of time."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "2.  User filters contacts to show those in the inactive category."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "3.  System displays users which are in the inactive category."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "4.  User selects which contacts to archive."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "5.  System moves archived contacts into the archived category."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "+"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "* 3a. No users are in the inactive category."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "+"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "* 4a. The user does not select any contacts."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "+"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d Use case: Send email to client."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "1. Sell IT shows the user a list of clients."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "2. User clicks the email of the client they want to contact."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "3. Sell IT displays the email compose pop up box."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "4. User types their email contents and pushes the send button."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "5. Sell IT attempts to send their email and displays a success or failure message."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "6. User closes the pop up by pressing the ESCAPE key or the return button."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "* 4a. The user clicks cancel."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "+"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ".  Should work with a large number of, which is more than 1000, contacts."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ".  Should respond quickly after any action, which is less than 2 seconds."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ".  Should store its data in plain text so that data can be manually accessed if required."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ".  All actions should be performable using only the keyboard."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "[[archive]] Archive::"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "The list of contacts that are no longer in use"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "[[client]] Client::"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "A potential customer, someone the user is in contact with for the purposes of business"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "[[notes]] Notes::"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Some plain text information associated with a contact that the user wants to remember"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "//tag::OngKuanYangTestCases[]"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d Add appointment"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ". Adding an appointment"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".. Test case: Run `addappointment` with valid parameters. +"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "   Expected: Appointment added."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".. Test case: Run `addappointment` with invalid parameters. +"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "   Expected: Error message displayed showing the required format."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d Delete appointment"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ". Deleting an appointment"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".. Test case: Run `deleteappointment 1` +"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "   Expected: The first appointment is deleted"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".. Test case: Run `deleteappointment InvalidIndex` +"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "   Expected: Error message displayed."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d Edit appointment"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ". Editing an appointment"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".. Test case: Run `editappointment` with valid parameters. +"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "   Expected: Appointment edited."
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".. Test case: Run `editappointment` without any edit information. +"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "   Expected: Error message displayed."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d Archive client"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ". Archiving a client"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".. Test case: Run `archive INDEX` where INDEX is a valid person index. +"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "   Expected: Person disappears from list."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d List all clients"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ". Listing all clients including archived"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".. Prerequisite: Archive some client as in the archive client test."
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".. Test case: Run `listall` . +"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "   Expected: Archived person is listed with red font and strikethrough."
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d Unarchive client"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ". Unarchiving a client"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".. Prerequisite: Some person archived and listed as in List all clients test."
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".. Test case: Run `unarchive INDEX` where INDEX is the index of an archived person. +"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "   Expected: Person becomes unarchived and is listed in a normal font."
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d Switch theme"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ". Switching theme"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".. Test case: Run `switch` . +"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "   Expected: Theme is switched from dark to light and vice-versa."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".. Test case: Close and open the application. +"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "   Expected: Theme is saved across restarts."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "// end::OngKuanYangTestCases[]"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//tag::XavierMaYuqianTestCases[]"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d Lock"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ". Lock the addressbook to prevent further modification on contacts or appointment"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ".. Test case: Run `lock` . +"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "   Expected: All the contacts and appointments are gone. And further commands are not accepted"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d Unlock"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ". Unlock the addressbook for further modification on contacts or appointment"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ".. Prerequisite: The addressbook is already locked."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ".. Test case: Run `unlock PASSWORD` . +"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "   Expected: The addressbook is unlock and starts to accept more commands. Please note that the contatcs and appointments will not be shown automatically, please use list and listappointment command to see."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d Change Password"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ". Change the lock password"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ".. Test case: Run `setPassword OLD_PASSWORD NEW_PASSWORD` . +"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "   Expected: The password is changed."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d List all appointments"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ". Listing all appointments"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ".. Test case: Run `listappointment` . +"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "   Expected: All the appointments are listed."
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d Sort all contacts"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ". Sorting all contacts"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ".. Test case: Run `sort` . +"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "   Expected: All the contacts in addressbook are sorted based on alphabetical order."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d Remove tags from all contacts"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ". Removing tags from all contatcs"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ".. Prerequisite: There are already some tags in the addressbook."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ".. Test case: Run `removetag TAGNAME` . +"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "   Expected: The specified tag is removed from all the contacts in addressbook."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d Export all contacts"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ". Export all contatcs"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ".. Prerequisite: There are already some contactss in the addressbook."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ".. Test case: Run `export` . +"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "   Expected: All the contacts in the addressbook are exported to a csv file."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d Add comments to contacts"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ". Add comments to contacts"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Prerequisite: There are already some contacts in the addressbook."
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ".. Test case: Run `add n/David p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 tz/PST c/interested in football t/friends t/owesMoney` . +"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "   Expected: A contact is created with comment interested in football."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ".. Test case: Run `edit 1 c/interested in basketball` . +"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "   Expected: The first contact\u0027s comment is modified to interested in basketball."
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//end::XavierMaYuqianTestCases[]"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "//tag::GloriaLawTestCases[]"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d Incorrect time zones are rejected"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ". Time zone abbreviations unknown to Java are rejected"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Prerequisite: There is at least one contact in Sell IT"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Test case: Run `add n/David p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 tz/PST c/interested in football t/friends` . +"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "   Expected: A contact is created with the time zone PST is created."
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Test case: Run `edit 1 tz/PST` .+"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "   Expected: The client with index 1 has their time zone changed to PST"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Test case: Run `add n/David p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 tz/ c/interested in football t/friends` . +"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "   Expected: Error message: `Time zones should be have the standard time zone abbreviations, and should not be blank`."
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Test case: Run `edit 1 tz/P$T` . +"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "   Expected: Error message: `Time zones should be have the standard time zone abbreviations, and should not be blank`."
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d Send an email to a client"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ". Send an email to a client"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Prerequisite: There is at least one email in Sell IT"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Test case: Click a client\u0027s email in the person panel and enter a subject and the email message body and click the send button. +"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "   Expected: Email sent successfully window."
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Test case: Click the new email button after clicking an email in the inbox and do not enter any recipients and click the send button. +"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "   Expected: Could not send email due to an error window."
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Test case: Click the new email button after clicking an email in the inbox and enter `abcde` as the recipient and click the send button. +"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "   Expected: Could not send email due to an error window."
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Test case: Click the new email button after clicking an email in the inbox and enter `@gmail.com` as the recipient and click the send button. +"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "   Expected: Could not send email due to an error window."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d Reply to an client email"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ". Reply to an email an email received from a client"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Prerequisite: There is at least one email in Sell IT."
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Test case: Click the reply button after clicking an email in the inbox and type some text in the email body. +"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "   Expected: Email sent successfully window."
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Test case: Click the reply button after clicking an email in the inbox and add an invalid recipient such as `asdf`. +"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "   Expected: Could not send email due to an error window."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d Forward a client email"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ". Forward an email received from a client"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Prerequisite: There is at least one contact or email in Sell IT"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Test case: Click the forward button after clicking an email in the inbox and enter a valid email and click send +"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "   Expected: Email sent successfully window."
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Test case: Click the forward button after clicking an email in the inbox and enter an invalid recipient such as `asdf`. +"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "   Expected: Could not send email due to an error window."
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d Load all client emails."
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ". Load all client emails."
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Prerequisite: There is at least one email message received in Sell IT"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Test case: See which emails are loaded onto the email panel. On a browser, log onto the gmail with the email \"sg.salesperson@gmail.com\" and password \"gloriacs2103\" and verify they are the same. +"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "   Expected: Email inbox should be the same as what is shown on gmail."
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d Receive a client email"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ". Receive an email from a client."
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Prerequisite: None"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ".. Test case: From an email you have access to, send an plain text email to \"sg.salesperson@gmail.com\". +"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "   Expected: Email appears on the email panel within 30 seconds and the full view is opened in a pop up when clicked."
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "//end::GloriaLawTestCases[]"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 172,
      "XavierMaYuqian": 202,
      "glorialaw": 170,
      "-": 916
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d Sell IT - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ":repoURL: https://github.com/CS2103JAN2018-W10-B2/main"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "By: `W10-B2`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Sell IT is for salesmen who *prefer to use a desktop app for managing their clients*. More importantly, Sell IT is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Sell IT can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Having any Java 8 version is not enough. +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with earlier versions of Java 8."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* Some commands have command aliases which can be used in place of the command, e.g. `a` for `add`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//tag::unlock[]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d Unlock : `unlock`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "You can unlock the APP while it is locked if you wish to do modification on contact and appointment. The initial password is 123456. Please remember that after unlocking, the content won\u0027t automatically show. Please use list/listall/listappointment command. +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Format: `unlock PASSWORD`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "alias: `ulk`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* `unlock 123456`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//end::unlock[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//tag::lock[]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d Lock : `lock`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "You can lock the contact and appointment panel after doing modification on contacts and appointment on the APP to prevent further modification. The initial password is 123456. +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Format: `lock`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "alias: `lk`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//end::lock[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//tag::setPassword[]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d Reset password : `setPassword`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "You may change the password of login. The initial password is 123456. +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Format: `setPassword OLD_PASSWORD NEW_PASSWORD`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "alias: `sp`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* `setPassword 123456 123`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//end::setPassword[]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS tz/TIMEZONE c/COMMENT [t/TAG]...`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Alias: `a`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 tz/SGT c/He can speak French`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 tz/PST c/She can speak French t/criminal`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "// tag::addappointment[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding an appointment: `addappointment` `Since v1.3`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Adds an appointment to the address book +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Format: `addappointment [INDEX]... n/NAME d/DATETIME tz/TIMEZONE`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Alias: `aa`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Datetime should be in the format YYYY-MM-DD HH:MM. +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Timezone should be in the format {Area}/{City}, e.g. Asia/Singapore"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* `addappointment n/Meeting d/2018-06-13 13:25 tz/Asia/Singapore`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* `addappointment 1 2 n/Meeting d/2018-06-13 13:25 tz/America/New_York`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "// end::addappointment[]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d Listing all persons excluding archived : `list`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Shows a list of all unarchived persons in the address book. +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Alias: `l`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d Listing all persons including archived : `listall`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Shows a list of all persons (including archived) in the address book. +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Format: `listall`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Alias: `la`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//tag::listappointment[]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d Listing all appointments : `listappointment`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Shows a list of all appointments in the address book. +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Format: `listappointment`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Alias: `lap`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//end::listappointment[]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//tag::sort[]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d Sorting all persons : `sort`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Sorts all persons in the address book based on alphabetical order of their full names. +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Format: `sort`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Alias: `so`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//end::sort[]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//tag::export[]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d Export all persons : `export`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Exports all persons in the address book based to a csv file. +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Format: `export`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Alias: `ep`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//end::export[]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d Listing all clients tagged with one or more specific tag (union): `listtag` `Coming in v2.0`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Shows a list of all clients in the address book tagged with any of the tags entered. +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Format: `listtag TAG...`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Alias: `lt`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "// tag::archive[]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d Archives a client: `archive` `Since v1.2`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Archives an existing client +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Format: `archive INDEX`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Alias: `ar`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "// end::archive[]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "// tag::unarchive[]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d Unarchives a client: `unarchive` `Since v1.2`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Unarchives an existing client +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Format: `unarchive INDEX`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Alias: `uar`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "// end::unarchive[]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [tz/TIMEZONE] [c/COMMENT] [t/TAG]...`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Alias: `e`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "// tag::editappointment[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d Editing an appointment : `editappointment` `Since v1.5rc`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Edits an existing appointment in the address book. +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Format: `editappointment INDEX [PERSON INDEX]... [n/NAME] [d/DATETIME] [tz/TIMEZONE]`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Alias: `ea`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "****"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* Edits the appointment at the specified `INDEX`. The index refers to the index number shown in the last appointment listing. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* When editing persons, if a person is present, he will be removed. Otherwise, he will be added."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "****"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* `editappointment 1 2 3 n/Sell laptop` +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Edits the name of the appointment to \"Sell laptop\". Adds/Removes persons 2 and 3."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "// end::editappointment[]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Alias: `f`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* Persons that are archived will be returned."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book. +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Alias: `d`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "// tag::deleteappointment[]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d Deleting an appointment : `deleteappointment` `Since v1.4`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Deletes the specified appointment from the address book. +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Format: `deleteappointment INDEX`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Alias: `da`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "****"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* Deletes the appointment at the specified `INDEX`."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "****"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* `deleteappointment 2` +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Deletes the 2nd appointment in the address book."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "// end::deleteappointment[]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//tag::deletetag[]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d\u003d Deleting a tag : `deletetag`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Deletes the specified tag from everyone in the address book. +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Format: `deletetag TAG_NAME`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Alias: `dt`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "****"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* Deletes the tag with the specified `TAG_NAME`."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "****"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "*`delete family` +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Deletes the family tag for every person in the address book."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//end::deletetag[]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Alias: `h`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Alias: `u`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Alias: `r`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Alias: `c`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "// tag::switch[]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d\u003d Switching Theme : `switch` `Since v1.1`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Switches theme from dark to light or vice versa. Persists across restarts. +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Format: `switch`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "// end::switch[]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "//tag::sendemail[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d Sending an email `Since v1.5rc`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "Press the email of any contact on the person panel for an email popup to appear. To close the window without sending, push ESC or the cancel button."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "//end::sendemail[]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "//tag::replyemail[]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d Replying an email `[coming in v1.5]`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "Reply any email displayed on the email panel with the receiver and subject auto-filled, and the original contents on the bottom of the email."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "//end::replyemail[]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "//tag::forwardemail[]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d\u003d Forwarding an email `[coming in v1.5]`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "Forward any email displayed on the email panel with the subject auto-filled, and the original contents on the bottom of the email."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "//end::forwardemail[]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *Unlock* : `unlock PASSWORD` +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "e.g. `unlock 123456`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *Lock* : `lock`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *Set password* : `setPassword OLD_PASSWORD NEW_PASSWORD` +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "e.g. `setPassword 123456 123`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS tz/TIMEZONE c/COMMENT [t/TAG]...` +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 tz/SGT c/He can speak French t/friend t/colleague`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* *Add Appointment* `addappointment [INDEX]... n/NAME d/DATETIME tz/TIMEZONE` +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "e.g. `add 1 2 n/Meeting d/2018-06-13 13:25 tz/America/New_York`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* *Delete appointment* : `deleteappointment INDEX` +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [ti/TIMEZONE] [t/TAG]...` +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* *Edit appointment* : `editappointment 1 2 3 n/Sell laptop` +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* *Archive* : `archive INDEX`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* *Unarchive* : `unarchive INDEX`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* *List all* : `listall`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *List appointment* : `listappointment`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* *listtag* : `listtag TAG...`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *Sort* : `sort`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *Export* : `export`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 116,
      "XavierMaYuqian": 86,
      "glorialaw": 19,
      "-": 226
    }
  },
  {
    "path": "docs/team/OngKuanYang.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d Ong Kuan Yang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d PROJECT: Sell It"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "Sell It is a desktop addressbook and calendar application built for salesmen. It is meant to keep track of a large number of clients based across many different countries as well as the appointments that are scheduled with them. It supports note-taking and archiving. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* *Major enhancement*: added *the ability to add and edit appointments* and to see them in a calendar"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** What it does: allows the user to add an appointment. Existing appointments can be edited."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Justification: This feature improves the product significantly because a salesperson may have many appointments with his clients that he wants to keep track of."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Highlights: This enhancement\u0027s implementation is challenging as it involves many different modules of the code, such as the storage, model and logic modules."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: https://github.com/dlemmermann/CalendarFX[CalendarFX] for the calendar feature."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* *Minor enhancement*: An archival feature for clients that the salesperson is no longer in contact with so that they do not clutter up the interface as the salesperson has to manage a lot of clients."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* *Minor enhancement*: A switch theme command to switch between dark and light themes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* *Minor enhancement*: Command alias feature so that user does not have to type long commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* *Minor enhancement*: Loading Screen for emails so app does not become unresponsive."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103JAN2018-W10-B2/main/blob/master/collated/functional/ongkuanyang.md[Functional code]] [https://github.com/CS2103JAN2018-W10-B2/main/blob/master/collated/test/ongkuanyang.md[Test code]]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "*** Managed releases `v1.2` - `v1.5` (5 releases) on GitHub"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "*** Created issues and issues tags on GitHub"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "*** Created the team and repo on Github"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "*** Added Travis support on Github"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated screenshot on readme"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "*** Adds Coverall support and updated badge"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddappointment]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "include::../UserGuide.adoc[tag\u003deditappointment]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddeleteappointment]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "include::../UserGuide.adoc[tag\u003darchive]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "include::../UserGuide.adoc[tag\u003dunarchive]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "include::../UserGuide.adoc[tag\u003dswitch]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003darchive]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dswitchtheme]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dappointment]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dOngKuanYangTestCases]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 69,
      "-": 2
    }
  },
  {
    "path": "docs/team/XavierMaYuqian.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d Ma Yuqian - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d PROJECT: SellIT"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "---"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "Sell IT is for salesmen who prefer to use a desktop app for managing their clients. More importantly, Sell IT is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Sell IT can get your contact management tasks done faster than traditional GUI apps. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *Major enhancement*: added *the lock/unlock \u0026 reset password function*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "** What it does: allows the user to lock the addressbook when he/she does not need to use it and unlock the addressbook with password when he/she needs to use it. And the user can also change the password when neccessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "** Justification: This feature improves the product significantly because a user may needs privacy and wants to protect his personal data. This improve the security of the APP."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "** Highlights: This enhancement does not affect existing commands and commands to be added in future. For future added features, just make sure it does not violate any requirements by this feature"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *Minor enhancement*: added a list appointment command that can list all appointment."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *Minor enhancement*: added a sort command that can sort in alphabetical order."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *Minor enhancement*: added a remove tag command that can remove tags from all the people in the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *Minor enhancement*: added a comment feature which allows the sales person to add the notes of their clients."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *Minor enhancement*: added an export command that can export all the people in the address book to a csv file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103JAN2018-W10-B2/main/blob/master/collated/functional/XavierMaYuqian.md[Functional code]] [https://github.com/CS2103JAN2018-W10-B2/main/blob/master/collated/test/XavierMaYuqian.md[Test code]]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "*** Modified the GUI so that the total number of contacts is shown at the status bar (Pull request https://github.com/CS2103JAN2018-W10-B2/main/pull/29[29])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "*** Added my own features and use cases into the developer guide and user guide."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-F14-B1/main/issues/139[139], https://github.com/CS2103JAN2018-F14-B1/main/issues/149[149])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "include::../UserGuide.adoc[tag\u003dunlock]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlock]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsetPassword]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsort]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddeletetag]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "include::../UserGuide.adoc[tag\u003dexport]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlistappointment]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dLogin/Logout]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dSortCommand]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dExportCommand]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dListAppointment]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dDeleteTag]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dAddComment]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dXavierMaYuqianTestCases]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 81
    }
  },
  {
    "path": "docs/team/glorialaw.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d Gloria Ho Yan Law - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d PROJECT: Sell IT"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "---"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "Sell IT is for salesmen who prefer to use a desktop app for managing their clients. More importantly, Sell IT is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Sell IT can get your contact management tasks done faster than traditional GUI apps. It is written in Java, and has about 10kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "* *Major enhancement*: added *the ability to send emails to clients and view inbox through Sell IT*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "** What it does: allows the user to compose new plain text emails in Sell IT. A mail panel was also added to allow the user to view their inbox in the mail panel."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "** Justification: This feature improves the product significantly because as a busy salesperson, it is essential for the user to be able to contact their clients conveniently in one platform."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "** Highlights: This enhancement affects the way the salesperson can communicate with their clients. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required advanced knowledge of javafx and java mail api."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "** Credits: http://www.oracle.com/technetwork/java/javamail/index.html {mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "* *Minor enhancement*: added a timezone command that allows the user to enter their client\u0027s timezone so that they can schedule meetings more effectively."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103JAN2018-W10-B2/main/blob/master/collated/functional/glorialaw.md] [https://github.com/CS2103JAN2018-W10-B2/main/blob/master/collated/test/glorialaw.md] _{give links to collated code files}_"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "* *Other contributions*: Modified the GUI so that when the command entered is incorrect, the text turns red."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "*** Modified the GUI so that incorrect commands are displayed in red (Pull request https://github.com/CS2103JAN2018-W10-B2/main/pull/[4])"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "*** Added my features and use cases into the developer guide and user guide."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "*** PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com/nus-cs2103-AY1718S2/forum/issues/[41])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-W09-B3/main/issues/[132], https://github.com/CS2103JAN2018-W09-B3/main/issues/[129], https://github.com/CS2103JAN2018-W09-B3/main/issues/[121])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "*** Integrated the Java Mail API to the project (https://github.com/CS2103JAN2018-W10-B2/main/pull/[53])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsendemail]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dreplyemail]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dforwardemail]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtimezone]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003demail]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "---"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "glorialaw": 65,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private String appTitle \u003d \"SellIt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private String userPrefsFilePath \u003d \"preferences.json\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(String userPrefsFilePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 1,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 1500;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 780;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private static final String DEFAULT_THEME \u003d MainWindow.LIGHT_THEME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowWidth;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowHeight;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Point windowCoordinates;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private String theme;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.theme \u003d DEFAULT_THEME;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.theme \u003d DEFAULT_THEME;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public GuiSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition, String theme) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.theme \u003d theme;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowWidth() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowHeight() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public String getTheme() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return theme;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(windowWidth, o.windowWidth)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowHeight, o.windowHeight)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.x, o.windowCoordinates.x)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.y, o.windowCoordinates.y)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 theme.equals(o.theme);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates, theme);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        sb.append(\"Theme : \" + theme);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 23,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                                \"The appointment index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG \u003d \"The tag name provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 2,
      "XavierMaYuqian": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/GetPersonRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//@@author XavierMaYuqian"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " *  Event to request current list of employees"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "public class GetPersonRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/PasswordChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//@@author XavierMaYuqian"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * Indicates password cahnged"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "public class PasswordChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public final String password;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public PasswordChangedEvent(String password) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return \"timetable entry added: \" + this.password;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/ReturnedPersonEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//@@author XavierMaYuqian"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * Indicates employees list returned."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "public class ReturnedPersonEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private final ObservableList\u003cPerson\u003e employees;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public ReturnedPersonEvent(ObservableList\u003cPerson\u003e employees) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        this.employees \u003d employees;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public ObservableList\u003cPerson\u003e getEmployees() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return employees;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/AppointmentPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.ui.AppointmentCard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Represents a selection change in the Appointment List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class AppointmentPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private final AppointmentCard newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public AppointmentPanelSelectionChangedEvent(AppointmentCard newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public AppointmentCard getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates that a new result is available."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewResultAvailableEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public final boolean hasError;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public NewResultAvailableEvent(String message, boolean hasError) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        this.hasError \u003d hasError;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "glorialaw": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/SwitchThemeRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * An event requesting to switch theme."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class SwitchThemeRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of appointments */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.commands.UnlockCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private static boolean isLocked;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private static String password;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UndoRedoStack undoRedoStack;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        isLocked \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        password \u003d model.getPassword();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            Command command;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            CommandResult result \u003d new CommandResult(\"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            if (isLocked) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                if (command instanceof UnlockCommand) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                    UnlockCommand unknockCommand \u003d (UnlockCommand) command;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                    if (unknockCommand.getPassword().compareTo(password) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                        isLocked \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                        result \u003d new CommandResult(UnlockCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                        result \u003d new CommandResult(\"incorrect unlock password!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                    result \u003d new CommandResult(\"Addressbook has been locked, please unlock it first!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                command.setData(model, history, undoRedoStack);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                result \u003d command.execute();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                undoRedoStack.push(command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static String getPassword() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static void setPassword(String psw) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        password \u003d psw;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static void unLock() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        isLocked \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static void lock() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        isLocked \u003d true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static boolean isLocked() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return isLocked;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 1,
      "XavierMaYuqian": 78,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAppointmentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.AppointmentName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.AppointmentTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class AddAppointmentCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addappointment\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"aa\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \": Adds an appointment to the address book, persons are identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"[INDEX (must be a positive integer)]... \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + PREFIX_DATETIME + \"DATETIME \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + PREFIX_TIMEZONE + \"TIMEZONE\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"1 2 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + PREFIX_NAME + \"Promote laptop \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + PREFIX_DATETIME + \"2018-06-13 13:25 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + PREFIX_TIMEZONE + \"America/New_York\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in the address book\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private Appointment toAdd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private final AppointmentName name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private final AppointmentTime time;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private final List\u003cIndex\u003e indexes;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Creates an AddAppointmentCommand to add the specified {@code Appointment}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public AddAppointmentCommand(AppointmentName name, AppointmentTime time, List\u003cIndex\u003e indexes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(indexes);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.indexes \u003d indexes;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            model.addAppointment(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } catch (DuplicateAppointmentException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        UniquePersonList persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        for (Index index : indexes) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                persons.add(lastShownList.get(index.getZeroBased()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                // Ignore duplicate"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        toAdd \u003d new Appointment(name, time, persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                || (other instanceof AddAppointmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddAppointmentCommand) other).toAdd)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 name.equals(((AddAppointmentCommand) other).name)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 time.equals(((AddAppointmentCommand) other).time)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 indexes.equals(((AddAppointmentCommand) other).indexes));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@ author"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            + PREFIX_TIMEZONE + \"TIMEZONE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            + PREFIX_COMMENT + \"COMMENT \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            + PREFIX_TIMEZONE + \"PST \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            + PREFIX_COMMENT + \"NIL \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            model.addPerson(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 1,
      "XavierMaYuqian": 3,
      "glorialaw": 4,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ArchiveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_UNARCHIVED_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Archives a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class ArchiveCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archive\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ar\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \": Archives the person identified by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_ARCHIVE_PERSON_SUCCESS \u003d \"Archived Person: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_PERSON_ALREADY_ARCHIVED \u003d \"Person is already archived!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private Person personToArchive;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public ArchiveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(personToArchive);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            model.archivePerson(personToArchive);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_UNARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ARCHIVE_PERSON_SUCCESS, personToArchive));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        personToArchive \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (personToArchive.isArchived()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new CommandException(MESSAGE_PERSON_ALREADY_ARCHIVED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                || (other instanceof ArchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((ArchiveCommand) other).targetIndex) // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 Objects.equals(this.personToArchive, ((ArchiveCommand) other).personToArchive));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteAppointmentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Deletes an appointment identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class DeleteAppointmentCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteappointment\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"da\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \": Deletes the appointment identified by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_DELETE_APPOINTMENT_SUCCESS \u003d \"Deleted appointment: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private Appointment appointmentToDelete;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public DeleteAppointmentCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(appointmentToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            model.deleteAppointment(appointmentToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } catch (AppointmentNotFoundException anfe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new AssertionError(\"The target appointment cannot be missing\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointmentToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        appointmentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                || (other instanceof DeleteAppointmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((DeleteAppointmentCommand) other).targetIndex) // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 Objects.equals(this.appointmentToDelete, ((DeleteAppointmentCommand) other).appointmentToDelete));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person personToDelete;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 1,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteTagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//@@author XavierMaYuqian"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * Delete certain tags in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "public class DeleteTagCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletetag\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"dt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            + \": Deletes the tag identified by its name.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            + \"Parameters: Tag name (case sensitive)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" friends\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tags deleted successfully\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private Tag tagToBeDeleted;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public DeleteTagCommand(Tag t) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        this.tagToBeDeleted \u003d t;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        ObservableList\u003cTag\u003e list \u003d model.getAddressBook().getTagList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        if (!list.contains(tagToBeDeleted)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        model.deleteTag(tagToBeDeleted);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditAppointmentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseAppointmentTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.AppointmentName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.AppointmentTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Edits the details of an existing appointment in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class EditAppointmentCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editappointment\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ea\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the appointment identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"by the index number used in the last appointment listing. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"For person indexes, if person is in appointment, he will be added. Otherwise, he will be removed.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"[PERSON INDEX (must be a positive integer)]...\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"DATETIME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"[\" + PREFIX_TIMEZONE + \"TIMEZONE]\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"3 4 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + PREFIX_NAME + \"Sell laptop \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + PREFIX_DATETIME + \"2018-06-13 13:25\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_EDIT_APPOINTMENT_SUCCESS \u003d \"Edited Appointment: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in the address book.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private final List\u003cIndex\u003e personIndexes;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private final EditAppointmentDescriptor editAppointmentDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private Appointment appointmentToEdit;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private Appointment editedAppointment;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @param index of the appointment in the filtered appointment list to edit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @param editAppointmentDescriptor details to edit the appointment with"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public EditAppointmentCommand(Index index, EditAppointmentDescriptor editAppointmentDescriptor,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                                  List\u003cIndex\u003e personIndexes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(editAppointmentDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(personIndexes);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.editAppointmentDescriptor \u003d new EditAppointmentDescriptor(editAppointmentDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.personIndexes \u003d personIndexes;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            model.updateAppointment(appointmentToEdit, editedAppointment);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } catch (DuplicateAppointmentException dpe) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } catch (AppointmentNotFoundException anfe) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new AssertionError(\"The target appointment cannot be missing\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_APPOINTMENT_SUCCESS, editedAppointment));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        appointmentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        List\u003cPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        UniquePersonList personList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        for (Index index : personIndexes) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownPersonList.size()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                personList.add(lastShownPersonList.get(index.getZeroBased()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                // Ignore duplicate"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (!personIndexes.isEmpty()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            editAppointmentDescriptor.setPersons(personList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        editedAppointment \u003d createEditedAppointment(appointmentToEdit, editAppointmentDescriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Creates and returns a {@code Appointment} with the details of {@code appointmentToEdit}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * edited with {@code editAppointmentDescriptor}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private static Appointment createEditedAppointment(Appointment appointmentToEdit,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                                                       EditAppointmentDescriptor editAppointmentDescriptor)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                                 throws CommandException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assert appointmentToEdit !\u003d null;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        AppointmentName updatedName \u003d editAppointmentDescriptor.getName().orElse(appointmentToEdit.getName());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        AppointmentTime updatedTime;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        AppointmentTime originalTime \u003d appointmentToEdit.getTime();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (!editAppointmentDescriptor.getDateTime().isPresent()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 !editAppointmentDescriptor.getTimeZone().isPresent()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            updatedTime \u003d originalTime;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            String dateTime \u003d editAppointmentDescriptor.getDateTime()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                    .orElse(originalTime.time.format(DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm\")));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            String timeZone \u003d editAppointmentDescriptor.getTimeZone()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                    .orElse(originalTime.time.format(DateTimeFormatter.ofPattern(\"VV\")));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                updatedTime \u003d parseAppointmentTime(dateTime, timeZone);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                throw new CommandException(ive.getMessage());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        UniquePersonList updatedPersons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Optional\u003cObservableList\u003cPerson\u003e\u003e optionalPersonList \u003d editAppointmentDescriptor.getPersons();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (!optionalPersonList.isPresent()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                updatedPersons.setPersons(appointmentToEdit.getPersons());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                throw new AssertionError(\"Impossible to have duplicate. Persons are from appointment\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            List\u003cPerson\u003e original \u003d new ArrayList(appointmentToEdit.getPersons());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            List\u003cPerson\u003e newList \u003d optionalPersonList.get();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            for (Person person : newList) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                if (original.contains(person)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                    original.remove(person);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                    original.add(person);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                updatedPersons.setPersons(original);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                // Ignore duplicate"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return new Appointment(updatedName, updatedTime, updatedPersons);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (!(other instanceof EditAppointmentCommand)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        EditAppointmentCommand e \u003d (EditAppointmentCommand) other;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 editAppointmentDescriptor.equals(e.editAppointmentDescriptor)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 Objects.equals(appointmentToEdit, e.appointmentToEdit);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Stores the details to edit the appointment with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static class EditAppointmentDescriptor {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        private AppointmentName name;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        private String  dateTime;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        private String timeZone;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        private UniquePersonList persons;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public EditAppointmentDescriptor() {}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "         * A defensive copy of {@code persons} is used internally."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public EditAppointmentDescriptor(EditAppointmentDescriptor toCopy) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            setDateTime(toCopy.dateTime);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            setTimeZone(toCopy.timeZone);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            if (!Objects.isNull(toCopy.persons)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                UniquePersonList newPersons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                newPersons.setPersons(toCopy.persons);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                setPersons(newPersons);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return CollectionUtil.isAnyNonNull(this.name, this.dateTime, this.timeZone, this.persons);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public void setName(AppointmentName name) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public Optional\u003cAppointmentName\u003e getName() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public void setDateTime(String dateTime) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public Optional\u003cString\u003e getDateTime() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return Optional.ofNullable(dateTime);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public void setTimeZone(String timeZone) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            this.timeZone \u003d timeZone;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public Optional\u003cString\u003e getTimeZone() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return Optional.ofNullable(timeZone);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public void setPersons(UniquePersonList persons) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            this.persons \u003d persons;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public Optional\u003cObservableList\u003cPerson\u003e\u003e getPersons() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return Optional.ofNullable(Objects.isNull(persons) ? null : persons.asObservableList());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            if (!(other instanceof EditAppointmentDescriptor)) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            EditAppointmentDescriptor e \u003d (EditAppointmentDescriptor) other;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                    \u0026\u0026 getDateTime().equals(e.getDateTime())"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                    \u0026\u0026 getTimeZone().equals(e.getTimeZone())"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                    \u0026\u0026 getPersons().equals(e.getPersons());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 290
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_UNARCHIVED_PERSONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.person.Comment;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.CustTimeZone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            + \"[\" + PREFIX_TIMEZONE + \"TIMEZONE] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            + \"[\" + PREFIX_COMMENT + \"COMMENT] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person personToEdit;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person editedPerson;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_UNARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        CustTimeZone updatedTimeZone \u003d editPersonDescriptor.getTimeZone().orElse(personToEdit.getCustTimeZone());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        Comment updatedComment \u003d editPersonDescriptor.getComment().orElse(personToEdit.getComment());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                          updatedTimeZone, updatedComment, updatedTags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        private CustTimeZone timeZone;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        private Comment comment;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            setCustTimeZone(toCopy.timeZone);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            setComment(toCopy.comment);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                    this.address, this.timeZone, this.comment, this.tags);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        public void setCustTimeZone(CustTimeZone timeZone) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            this.timeZone \u003d timeZone; }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        public Optional\u003cCustTimeZone\u003e getTimeZone() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            return Optional.ofNullable(timeZone);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public void setComment(Comment comment) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            this.comment \u003d comment; }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public Optional\u003cComment\u003e getComment() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return Optional.ofNullable(comment);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "         */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "         */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                    \u0026\u0026 getTimeZone().equals(e.getTimeZone())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                    \u0026\u0026 getComment().equals(e.getComment())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 3,
      "XavierMaYuqian": 60,
      "glorialaw": 18,
      "-": 192
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportPersonCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.commons.events.model.GetPersonRequestEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.commons.events.model.ReturnedPersonEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//@@author XavierMaYuqian"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * export employees to a csv file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "public class ExportPersonCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ep\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Export current person to a csv file.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All person Exported to person.csv!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"Export fail! Make sure you haven\u0027t opened person.csv and try again!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String EXPORT_FILE_PATH \u003d \"data/person.csv\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private ObservableList\u003cPerson\u003e person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private boolean isTest;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public ExportPersonCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public ExportPersonCommand(boolean isTest) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        this.isTest \u003d isTest;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        EventsCenter.getInstance().post(new GetPersonRequestEvent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        File csv;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        if (isTest) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            csv \u003d new File(\"person.csv\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            csv \u003d new File(EXPORT_FILE_PATH);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        BufferedWriter bw \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            bw \u003d new BufferedWriter(new FileWriter(csv));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            bw.write(\"Name,Phone,Email,Address,Tags\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            for (Person p : person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                String temp \u003d p.getName().fullName + \",\" + p.getPhone().value + \",\" + p.getEmail().value + \",\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                        + p.getAddress().value.replaceAll(\",\", \" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                if (!p.getTags().isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                    temp \u003d temp + \",\" + p.getTags().toString()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                            .replaceAll(\", \", \" | \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                temp \u003d temp + \"\\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                bw.write(temp);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return new CommandResult(MESSAGE_FAIL);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    protected void registerAsAnEventHandler(Object handler) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private void handleReturnedEmployeesEvent(ReturnedPersonEvent event) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        this.person \u003d event.getEmployees();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListAllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Lists all persons (including archived) in the address book to the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class ListAllCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listall\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"la\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons (including archived persons)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListAppointmentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//@@author XavierMaYuqian"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * Lists all unarchived persons in the address book to the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "public class ListAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listappointment\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"lap\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all appointments\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_UNARCHIVED_PERSONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Lists all unarchived persons in the address book to the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons (excluding archived persons)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_UNARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 5,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LockCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.appointment.HideAllAppointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.person.HideAllPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//@@author XavierMaYuqian"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * Locks the app with a password"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "public class LockCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lock\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"lk\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lock the address book. \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been locked!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private final HideAllPerson predicate1 \u003d new HideAllPerson();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private final HideAllAppointment predicate2 \u003d new HideAllAppointment();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        model.updateFilteredPersonList(predicate1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        model.updateFilteredAppointmentList(predicate2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        LogicManager.lock();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Redo the previously undone command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(model, undoRedoStack);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!undoRedoStack.canRedo()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack.popRedo().redo();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.undoRedoStack \u003d undoRedoStack;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the person identified by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetPasswordCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//@@author XavierMaYuqian"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * Set the application password"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "public class SetPasswordCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setPassword\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"sp\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Set new application password, and old \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            + \"password required.\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            + \"oldPassword\" + \" newPassword \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New password has been set!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String MESSAGE_INCORRECT_OLDPASSWORD \u003d \"Incorrect old password!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private String oldPassword;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private String newPassword;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public SetPasswordCommand(String oldPassword, String newPassword) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        this.oldPassword \u003d oldPassword;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        this.newPassword \u003d newPassword;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        if (this.oldPassword.compareTo(LogicManager.getPassword()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            LogicManager.setPassword(this.newPassword);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            model.setPassword(this.newPassword);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_OLDPASSWORD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public String getOldPassword() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return this.oldPassword;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public String getNewPassword() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return this.newPassword;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                || (other instanceof SetPasswordCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                \u0026\u0026 this.oldPassword.equals(((SetPasswordCommand) other).getOldPassword())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                \u0026\u0026 this.newPassword.equals(((SetPasswordCommand) other).getNewPassword())); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//@@author XavierMaYuqian"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * Sorts all persons in the address book based on alphabetical order of their names."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "public class SortCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"so\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted successfully\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        model.sort();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchThemeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.events.ui.SwitchThemeRequestEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Switches the current theme."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class SwitchThemeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Theme switched.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        EventsCenter.getInstance().post(new SwitchThemeRequestEvent());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnarchiveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_UNARCHIVED_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Unarchives a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class UnarchiveCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unarchive\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"uar\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \": Unarchives the person identified by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_ARCHIVE_PERSON_SUCCESS \u003d \"Unarchived Person: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_PERSON_ALREADY_UNARCHIVED \u003d \"Person is already not archived!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private Person personToUnarchive;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public UnarchiveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(personToUnarchive);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            model.unarchivePerson(personToUnarchive);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_UNARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ARCHIVE_PERSON_SUCCESS, personToUnarchive));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        personToUnarchive \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (!personToUnarchive.isArchived()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new CommandException(MESSAGE_PERSON_ALREADY_UNARCHIVED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                || (other instanceof UnarchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((UnarchiveCommand) other).targetIndex) // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 Objects.equals(this.personToUnarchive, ((UnarchiveCommand) other).personToUnarchive));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Undo the previous {@code UndoableCommand}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(model, undoRedoStack);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!undoRedoStack.canUndo()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack.popUndo().undo();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.undoRedoStack \u003d undoRedoStack;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoableCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_UNARCHIVED_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command which can be undone and redone."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UndoableCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private ReadOnlyAddressBook previousAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    protected abstract CommandResult executeUndoableCommand() throws CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the current state of {@code model#addressBook}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBookSnapshot() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.previousAddressBook \u003d new AddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method is called before the execution of {@code UndoableCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code UndoableCommand}s that require this preprocessing step should override this method."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reverts the AddressBook to the state before this command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * was executed and updates the filtered person list to"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * show all persons."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final void undo() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(model, previousAddressBook);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(previousAddressBook);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_UNARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and updates the filtered person"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * list to show all persons."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final void redo() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            executeUndoableCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The command has been successfully executed previously; \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"it should not fail now\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_UNARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public final CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBookSnapshot();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        preprocessUndoableCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return executeUndoableCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 3,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnlockCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//@@author XavierMaYuqian"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * Unlocks the addressbook"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "public class UnlockCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unlock\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ulk\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Unlock the address book. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            + \"Password \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been unlocked!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String MESSAGE_INCORRECT_PASSWORD \u003d \"Incorrect unlock password!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public UnlockCommand(String keyword) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        this.password \u003d keyword;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        if (!LogicManager.isLocked()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return new CommandResult(\"SellIT is already unlocked!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        if (this.password.compareTo(LogicManager.getPassword()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            LogicManager.unLock();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_PASSWORD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public String getPassword() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                || (other instanceof UnlockCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                \u0026\u0026 this.password.equals(((UnlockCommand) other).getPassword())); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddAppointmentCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.logic.parser.ArgumentMultimap.arePrefixesPresent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.commands.AddAppointmentCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.AppointmentName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.AppointmentTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Parses input arguments and creates a new AddAppointmentCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * and returns an AddAppointmentCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public AddAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATETIME, PREFIX_TIMEZONE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        List\u003cIndex\u003e indexes;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            indexes \u003d ParserUtil.parseIndexes(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                    AddAppointmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DATETIME, PREFIX_TIMEZONE)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                    AddAppointmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            AppointmentName name \u003d ParserUtil.parseAppointmentName(argMultimap.getValue(PREFIX_NAME)).get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            AppointmentTime time \u003d ParserUtil.parseAppointmentTime(argMultimap.getValue(PREFIX_DATETIME),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                    argMultimap.getValue(PREFIX_TIMEZONE)).get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return new AddAppointmentCommand(name, time, indexes);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.logic.parser.ArgumentMultimap.arePrefixesPresent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.person.Comment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.CustTimeZone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                        PREFIX_TIMEZONE, PREFIX_COMMENT, PREFIX_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                                PREFIX_EMAIL, PREFIX_TIMEZONE, PREFIX_COMMENT)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            CustTimeZone timeZone \u003d ParserUtil.parseCustTimeZone(argMultimap.getValue(PREFIX_TIMEZONE)).get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            Comment comment \u003d ParserUtil.parseComment(argMultimap.getValue(PREFIX_COMMENT)).get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            Person person \u003d new Person(name, phone, email, address, timeZone, comment, tagList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommand(person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 1,
      "XavierMaYuqian": 7,
      "glorialaw": 14,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.commands.AddAppointmentCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.commands.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.commands.DeleteTagCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.commands.EditAppointmentCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.commands.ExportPersonCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.commands.ListAllCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.commands.ListAppointmentCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.commands.LockCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.commands.SetPasswordCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.commands.SwitchThemeCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.commands.UnlockCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        case AddCommand.COMMAND_WORD: case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        case AddAppointmentCommand.COMMAND_WORD: case AddAppointmentCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return new AddAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        case EditCommand.COMMAND_WORD: case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        case EditAppointmentCommand.COMMAND_WORD: case EditAppointmentCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return new EditAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        case SelectCommand.COMMAND_WORD: case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        case DeleteCommand.COMMAND_WORD: case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        case DeleteTagCommand.COMMAND_WORD: case DeleteTagCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return new DeleteTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        case DeleteAppointmentCommand.COMMAND_WORD: case DeleteAppointmentCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return new DeleteAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        case ArchiveCommand.COMMAND_WORD: case ArchiveCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return new ArchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        case UnarchiveCommand.COMMAND_WORD: case UnarchiveCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return new UnarchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        case ClearCommand.COMMAND_WORD: case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        case FindCommand.COMMAND_WORD: case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        case ListCommand.COMMAND_WORD: case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        case ListAllCommand.COMMAND_WORD: case ListAllCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return new ListAllCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        case ListAppointmentCommand.COMMAND_WORD: case ListAppointmentCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return new ListAppointmentCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        case SortCommand.COMMAND_WORD: case SortCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return new SortCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        case HistoryCommand.COMMAND_WORD: case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        case SwitchThemeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return new SwitchThemeCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        case UndoCommand.COMMAND_WORD: case UndoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        case RedoCommand.COMMAND_WORD: case RedoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        case LockCommand.COMMAND_WORD: case LockCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return new LockCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        case UnlockCommand.COMMAND_WORD: case UnlockCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return new UnlockCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        case SetPasswordCommand.COMMAND_WORD: case SetPasswordCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return new SetPasswordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        case ExportPersonCommand.COMMAND_WORD: case ExportPersonCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return new ExportPersonCommand();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 39,
      "XavierMaYuqian": 28,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArchiveCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Parses input arguments and creates a new ArchiveCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class ArchiveCommandParser implements Parser\u003cArchiveCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ArchiveCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * and returns an ArchiveCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public ArchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return new ArchiveCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ArchiveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 9,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public static final Prefix PREFIX_TIMEZONE \u003d new Prefix(\"tz/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final Prefix PREFIX_COMMENT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 1,
      "XavierMaYuqian": 1,
      "glorialaw": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteAppointmentCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.commands.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Parses input arguments and creates a new DeleteAppointmentCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class DeleteAppointmentCommandParser implements Parser\u003cDeleteAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteAppointmentCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * and returns an DeleteAppointmentCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public DeleteAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return new DeleteAppointmentCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAppointmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteTagCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.commands.DeleteTagCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//@@author XavierMaYuqian"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * Parses input arguments and creates a new DeleteTagCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "public class DeleteTagCommandParser implements Parser\u003cDeleteTagCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTagCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * and returns an DeleteTagCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public DeleteTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            Tag t \u003d ParserUtil.parseTag(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return new DeleteTagCommand(t);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditAppointmentCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.commands.EditAppointmentCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Parses input arguments and creates a new EditAppointmentCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class EditAppointmentCommandParser implements Parser\u003cEditAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditAppointmentCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public EditAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATETIME, PREFIX_TIMEZONE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        List\u003cIndex\u003e indexes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            indexes \u003d ParserUtil.parseIndexes(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            if (indexes.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                        EditAppointmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                    EditAppointmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        EditAppointmentDescriptor editAppointmentDescriptor \u003d new EditAppointmentDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            ParserUtil.parseAppointmentName(argMultimap.getValue(PREFIX_NAME))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                    .ifPresent(editAppointmentDescriptor::setName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            argMultimap.getValue(PREFIX_DATETIME).ifPresent(editAppointmentDescriptor::setDateTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            argMultimap.getValue(PREFIX_TIMEZONE).ifPresent(editAppointmentDescriptor::setTimeZone);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (!editAppointmentDescriptor.isAnyFieldEdited() \u0026\u0026 indexes.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new ParseException(EditAppointmentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return new EditAppointmentCommand(indexes.get(0), editAppointmentDescriptor,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                indexes.subList(1, indexes.size()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                        PREFIX_TIMEZONE, PREFIX_COMMENT, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            ParserUtil.parseCustTimeZone(argMultimap.getValue(PREFIX_TIMEZONE))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    .ifPresent(editPersonDescriptor::setCustTimeZone);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            ParserUtil.parseComment(argMultimap.getValue(PREFIX_COMMENT)).ifPresent(editPersonDescriptor::setComment);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 3,
      "glorialaw": 4,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LockCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.commands.LockCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//@@author XavierMaYuqian"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * LockCommandParser"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "public class LockCommandParser implements Parser\u003cLockCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public LockCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return new LockCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.AppointmentName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.AppointmentTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.person.Comment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.CustTimeZone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Optional} return value inside {@code ParserUtil} methods."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_INVALID_DATETIME \u003d \"Datetime is not of the format YYYY-MM-DD HH:MM.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String DATETIME_REGEX \u003d \"(\\\\d{4})-(\\\\d{2})-(\\\\d{2}) (\\\\d{2}):(\\\\d{2})\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //@@author ongkuanyang"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Parses {@code oneBasedIndexes} into an {@code List\u003cIndex\u003e} and returns it."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed. oneBasedIndexes is a space-separated String of indexes."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws IllegalValueException if any the specified indexes is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static List\u003cIndex\u003e parseIndexes(String oneBasedIndexes) throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        List\u003cIndex\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndexes.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (trimmedIndex.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        String[] indexes \u003d trimmedIndex.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        for (String index : indexes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(index)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                throw new IllegalValueException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                result.add(Index.fromOneBased(Integer.parseInt(index)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Parses a {@code String name} into a {@code AppointmentName}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws IllegalValueException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static AppointmentName parseAppointmentName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (!AppointmentName.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new IllegalValueException(AppointmentName.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return new AppointmentName(trimmedName);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cAppointmentName\u003e} if {@code name} is present."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static Optional\u003cAppointmentName\u003e parseAppointmentName(Optional\u003cString\u003e name) throws IllegalValueException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return name.isPresent() ? Optional.of(parseAppointmentName(name.get())) : Optional.empty();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Parses a {@code String datetime} and {@code String timezone} into a {@code AppointmentTime}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws IllegalValueException if the given {@code String datetime} or {@code String timezone} is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static AppointmentTime parseAppointmentTime(String datetime, String timezone) throws IllegalValueException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(datetime);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(timezone);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        String trimmedDatetime \u003d datetime.trim();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        String trimmedTimezone \u003d timezone.trim();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(DATETIME_REGEX);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(trimmedDatetime);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        int year;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        int month;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        int day;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        int hour;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        int minute;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (matcher.matches()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            year \u003d Integer.parseInt(matcher.group(1));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            month \u003d Integer.parseInt(matcher.group(2));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            day \u003d Integer.parseInt(matcher.group(3));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            hour \u003d Integer.parseInt(matcher.group(4));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            minute \u003d Integer.parseInt(matcher.group(5));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_DATETIME);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (!AppointmentTime.isValidTime(year, month, day, hour, minute, trimmedTimezone)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new IllegalValueException(AppointmentTime.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return new AppointmentTime(year, month, day, hour, minute, trimmedTimezone);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e datetime} and {@code Optional\u003cString\u003e timezone}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * into an {@code Optional\u003cAppointmentTime\u003e} if {@code datetime} and {@code timezone} are present."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static Optional\u003cAppointmentTime\u003e parseAppointmentTime(Optional\u003cString\u003e datetime, Optional\u003cString\u003e timezone)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(datetime);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(timezone);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return (datetime.isPresent() \u0026\u0026 timezone.isPresent())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                ? Optional.of(parseAppointmentTime(datetime.get(), timezone.get()))"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws IllegalValueException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws IllegalValueException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * Parses a {@code String timeZone} into a {@code CustTimeZone}."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * @throws IllegalValueException if the given {@code timeZone} is invalid."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public static CustTimeZone parseCustTimeZone(String timeZone) throws IllegalValueException {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        requireNonNull(timeZone);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        String trimmedCustTimeZone \u003d timeZone.trim();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        if (!CustTimeZone.isValidTimeZone(trimmedCustTimeZone)) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            throw new IllegalValueException(CustTimeZone.MESSAGE_TIMEZONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        return new CustTimeZone(trimmedCustTimeZone);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e timeZone} into an {@code Optional\u003cCustTimeZone\u003e} if {@code timeZone} is present."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public static Optional\u003cCustTimeZone\u003e parseCustTimeZone(Optional\u003cString\u003e timeZone) throws IllegalValueException {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        requireNonNull(timeZone);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        return timeZone.isPresent() ? Optional.of(parseCustTimeZone(timeZone.get())) : Optional.empty();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Parses a {@code String comment} into a {@code Comment}."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * @throws IllegalValueException if the given {@code comment} is invalid."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static Comment parseComment(String comment) throws IllegalValueException {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        requireNonNull(comment);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        String trimmedComment \u003d comment.trim();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        if (!Comment.isValidComment(trimmedComment)) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            throw new IllegalValueException(Comment.MESSAGE_COMMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return new Comment(trimmedComment);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e comment} into an {@code Optional\u003cComment\u003e} if {@code comment} is present."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static Optional\u003cComment\u003e parseComment(Optional\u003cString\u003e comment) throws IllegalValueException {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        requireNonNull(comment);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return comment.isPresent() ? Optional.of(parseComment(comment.get())) : Optional.empty();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * @throws IllegalValueException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static Tag parseTag(String tag) throws IllegalValueException {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 112,
      "XavierMaYuqian": 54,
      "glorialaw": 29,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetPasswordCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.commands.SetPasswordCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//@@author XavierMaYuqian"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * Parses arguments for the SetPasswordCommand\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "public class SetPasswordCommandParser implements Parser\u003cSetPasswordCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetPasswordCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * and returns an SetPasswordCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public SetPasswordCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        Scanner sc \u003d new Scanner(trimmedArgs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        if (!sc.hasNext()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        String oldPsw \u003d sc.next();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        if (!sc.hasNext()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        String newPsw \u003d sc.next();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return new SetPasswordCommand(oldPsw, newPsw);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnarchiveCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Parses input arguments and creates a new UnarchiveCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class UnarchiveCommandParser implements Parser\u003cUnarchiveCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnarchiveCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * and returns an UnarchiveCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public UnarchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return new UnarchiveCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnarchiveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnlockCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.commands.UnlockCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//@@author XavierMaYuqian"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * Parses arguments for the UnlockCommand\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "public class UnlockCommandParser implements Parser\u003cUnlockCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnlockCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * and returns an UnlockCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public UnlockCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnlockCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return new UnlockCommand(trimmedArgs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.UniqueAppointmentList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .equals comparison)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private final UniqueAppointmentList appointments;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        appointments \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        password \u003d \"123456\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.setTags(tags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void setAppointments(List\u003cAppointment\u003e appointments) throws DuplicateAppointmentException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.appointments.setAppointments(appointments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setTags(new HashSet\u003c\u003e(newData.getTagList()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(this::syncWithMasterTagList)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        this.password \u003d newData.getPassword();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            setPersons(syncedPersonList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            setAppointments(newData.getAppointmentList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } catch (DuplicateAppointmentException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new AssertionError(\"AddressBooks should not have duplicate appointments\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * and updates the Tag objects in the person to point to those in {@link #tags}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if an equivalent person already exists."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d syncWithMasterTagList(p);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(person);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *      another existing person in the list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #syncWithMasterTagList(Person)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, syncedEditedPerson);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        removeUnusedTags();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Removes all {@code Tag}s that are not used by any {@code Person} in this {@code AddressBook}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private void removeUnusedTags() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        Set\u003cTag\u003e tagsInPersons \u003d persons.asObservableList().stream()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                .map(Person::getTags)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                .flatMap(Set::stream)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        tags.setTags(tagsInPersons);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //@@author ongkuanyang"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Archives person."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws PersonNotFoundException"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void archivePerson(Person target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        target.setArchived(true);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            persons.setPerson(target, target);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new AssertionError(\"Archiving a person only should not result in a duplicate. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                    + \"See Person#equals(Object).\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Unarchives person."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws PersonNotFoundException"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void unarchivePerson(Person target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        target.setArchived(false);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            persons.setPerson(target, target);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new AssertionError(\"Unrchiving a person only should not result in a duplicate. \""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                    + \"See Person#equals(Object).\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     *  Updates the master tag list to include tags in {@code person} that are not in the list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     *  list."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person syncWithMasterTagList(Person person) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.mergeFrom(personTags);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create map with values \u003d tag object references in the master list"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // used for checking person tag references"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // Rebuild the list of person tags to point to the relevant tags in the master tag list."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                person.getName(), person.getPhone(), person.getEmail(),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                person.getAddress(), person.getCustTimeZone(), person.getComment(),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                person.isArchived(), correctTagReferences);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean removePerson(Person key) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        if (persons.remove(key)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            removePersonFromAppointments(key);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Sorts all the persons alphabetical order of their names"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        requireNonNull(persons);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        persons.sort();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //@@author ongkuanyang"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //// appointment-level operations"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Adds an appointment to the address book."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws DuplicateAppointmentException if an equivalent appointment already exists."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void addAppointment(Appointment appointment) throws DuplicateAppointmentException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        appointments.add(appointment);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        appointments.sort();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws AppointmentNotFoundException if the {@code key} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public boolean removeAppointment(Appointment key) throws AppointmentNotFoundException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (appointments.remove(key)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            appointments.sort();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new AppointmentNotFoundException();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Replaces the given appointment {@code target} in the list with {@code editedAppointment}."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws DuplicateAppointmentException if updating the appointment\u0027s details"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     *      causes the appointment to be equivalent toanother existing appointment in the list."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws AppointmentNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void updateAppointment(Appointment target, Appointment editedAppointment)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throws DuplicateAppointmentException, AppointmentNotFoundException {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(editedAppointment);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        appointments.setAppointment(target, editedAppointment);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        appointments.sort();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    //// tag-level operations"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.add(t);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Removes tags from persons"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void removeTag(Tag t) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            for (Person person : persons) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                removeTagFromPerson(t, person);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            throw new AssertionError(\"Impossible: original person is obtained from the address book.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Removes tags from persons"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private void removeTagFromPerson(Tag t, Person person) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        Set \u003c Tag \u003e newTags \u003d new HashSet\u003c\u003e(person.getTags());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        if (!newTags.remove(t)) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        Person newPerson \u003d new Person(person.getName(), person.getPhone(), person.getEmail(),"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                                      person.getAddress(), person.getCustTimeZone(), person.getComment(), newTags);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            updatePerson(person, newPerson);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            throw new AssertionError(\"Modifying a person\u0027s tags only should not result in a duplicate. \""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                     + \"See Person#equals(Object).\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public String getPassword() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void setPassword(String password) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //@@author ongkuanyang"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Removes a person from all appointments."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @param person person to remove"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private void removePersonFromAppointments(Person person) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        for (Appointment appointment : appointments) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            UniquePersonList newPersons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                newPersons.setPersons(appointment.getPersons());"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                throw new AssertionError(\"Impossible to have duplicate. Persons is from appointment.\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            if (!newPersons.contains(person)) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                newPersons.remove(person);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            } catch (PersonNotFoundException e) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                throw new AssertionError(\"Impossible. We just checked the existence of person.\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            Appointment newAppointment \u003d new Appointment(appointment.getName(), appointment.getTime(), newPersons);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                updateAppointment(appointment, newAppointment);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            } catch (AppointmentNotFoundException e) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                throw new AssertionError(\"Impossible. Appointment is in addressbook.\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            } catch (DuplicateAppointmentException e) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                throw new AssertionError(\"Impossible. We are modifying an existing appointment\u0027s person list.\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asObservableList();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return appointments.asObservableList();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags.asObservableList();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(persons, tags);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 135,
      "XavierMaYuqian": 74,
      "-": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /** {@code Predicate} Predicate that shows only unarchived persons */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_UNARCHIVED_PERSONS \u003d person -\u003e !person.isArchived();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /** {@code Predicate} Predicate that shows all persons */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /** {@code Predicate} Predicate that shows all appointment */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Deletes the given person. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Adds the given person */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person) throws DuplicatePersonException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //@@author ongkuanyang"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /** Deletes the given apppointment. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    void deleteAppointment(Appointment target) throws AppointmentNotFoundException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /** Adds the given appointment */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    void addAppointment(Appointment appointment) throws DuplicateAppointmentException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Replaces the given appointment {@code target} with {@code editedAppointment}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws DuplicateAppointmentException if updating the appointment\u0027s details"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     *      causes the apppointment to be equivalent to another existing appointment in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws AppointmentNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    void updateAppointment(Appointment target, Appointment editedAppointment)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throws DuplicateAppointmentException, AppointmentNotFoundException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /** Sorts the persons in AddressBook based on the alphabetical order of their names*/"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    void sort();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     *      another existing person in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * @throws PersonNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //@@author ongkuanyang"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /** Archives the given person. */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    void archivePerson(Person target) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /** Unarchive the given person. */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    void unarchivePerson(Person target) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /** Returns an unmodifiable view of the filtered appointment list */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Updates the filter of the filtered appoinment list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /** Removes the given {@code tag} from all {@code Person}s. */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    void deleteTag(Tag t);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /** Adds the given password */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    void setPassword(String e);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /** Gets the password */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    String getPassword();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 43,
      "XavierMaYuqian": 31,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.commons.events.model.GetPersonRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.commons.events.model.PasswordChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.commons.events.model.ReturnedPersonEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * All changes to any model should be synchronized."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private final FilteredList\u003cAppointment\u003e filteredAppointments;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        filteredAppointments \u003d new FilteredList\u003c\u003e(this.addressBook.getAppointmentList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_UNARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(addressBook));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_UNARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //@@author ongkuanyang"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public synchronized void deleteAppointment(Appointment target) throws AppointmentNotFoundException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        addressBook.removeAppointment(target);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public synchronized void addAppointment(Appointment appointment) throws DuplicateAppointmentException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        addressBook.addAppointment(appointment);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void updateAppointment(Appointment target, Appointment editedAppointment)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throws DuplicateAppointmentException, AppointmentNotFoundException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireAllNonNull(target, editedAppointment);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        addressBook.updateAppointment(target, editedAppointment);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public synchronized void sort() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        addressBook.sort();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        addressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //@@author ongkuanyang"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void archivePerson(Person target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        addressBook.archivePerson(target);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void unarchivePerson(Person target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        addressBook.unarchivePerson(target);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void deleteTag(Tag t) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        addressBook.removeTag(t);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private void indicatePasswordChangedEvent(String p) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        raise(new PasswordChangedEvent(p));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void setPassword(String password) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        addressBook.setPassword(password);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        indicatePasswordChangedEvent(password);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public String getPassword() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return addressBook.getPassword();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * {@code addressBook}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointments List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * {@code addressBook}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredAppointments);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        filteredAppointments.setPredicate(predicate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                \u0026\u0026 filteredAppointments.equals(other.filteredAppointments);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void handleGetPersonRequestEvent(GetPersonRequestEvent event) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        EventsCenter.getInstance().post(new ReturnedPersonEvent(addressBook.getPersonList()));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 44,
      "XavierMaYuqian": 105,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Returns an unmodifiable view of the appointments list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * This list will not contain any duplicate appointments."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    ObservableList\u003cAppointment\u003e getAppointmentList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the tags list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate tags."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cTag\u003e getTagList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    String getPassword();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 7,
      "XavierMaYuqian": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private String addressBookFilePath \u003d \"data/addressbook.xml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String addressBookName \u003d \"MyAddressBook\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.setGuiSettings(1500, 780, 0, 0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddressBookFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(String addressBookFilePath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddressBookName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookName(String addressBookName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookName \u003d addressBookName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nAddressBook name : \" + addressBookName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 1,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Appointment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Represents an appointment in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class Appointment {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private final AppointmentName name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private final AppointmentTime time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public Appointment(AppointmentName name, AppointmentTime time, UniquePersonList persons) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireAllNonNull(name, time);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.persons \u003d persons;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public AppointmentName getName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public AppointmentTime getTime() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Returns an immutable persons list, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersons() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return persons.asObservableList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (!(other instanceof Appointment)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Appointment otherAppointment \u003d (Appointment) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return otherAppointment.getName().equals(this.getName())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 otherAppointment.getTime().equals(this.getTime());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return Objects.hash(name, time);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                .append(\" Time: \")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                .append(getTime())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                .append(\" Persons: \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        getPersons().forEach(builder::append);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/AppointmentName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Represents an appointment\u0027s name in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class AppointmentName {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            \"Appointment names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Constructs a {@code AppointmentName}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public AppointmentName(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Returns true if a given string is a valid appointment name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                || (other instanceof AppointmentName // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 this.name.equals(((AppointmentName) other).name)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/AppointmentTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static java.time.ZoneId.getAvailableZoneIds;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Represents an appointment\u0027s time in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class AppointmentTime {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MESSAGE_TIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            \"Year, month, day, hour and minute should constitute a valid date and time. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            + \"Timezone should be of the form \u0027{area}/{city}\u0027, such as \u0027Europe/Paris\u0027 or \u0027America/New_York\u0027\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String STRING_FORMAT \u003d \"d MMM uuuu HH:mm VV\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public final ZonedDateTime time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Constructs an {@code AppointmentTime}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @param year"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @param month"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @param dayOfMonth"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @param hour"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @param minute"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @param timezone region IDs of the form \u0027{area}/{city}\u0027, such as \u0027Europe/Paris\u0027 or \u0027America/New_York\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public AppointmentTime(int year, int month, int dayOfMonth, int hour, int minute, String timezone) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(timezone);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        checkArgument(isValidTime(year, month, dayOfMonth, hour, minute, timezone), MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.time \u003d ZonedDateTime.of(LocalDateTime.of(year, month, dayOfMonth, hour, minute), ZoneId.of(timezone));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Constructs an {@code AppointmentTime}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @param string string formatted as per {@code STRING_FORMAT}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public AppointmentTime(String string) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(string);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        checkArgument(isValidTime(string), MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.time \u003d ZonedDateTime.parse(string, DateTimeFormatter.ofPattern(STRING_FORMAT));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Returns true if a parameters give a valid time and timezone."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static boolean isValidTime(int year, int month, int dayOfMonth, int hour, int minute, String timezone) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            LocalDateTime.of(year, month, dayOfMonth, hour, minute);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return getAvailableZoneIds().contains(timezone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Returns true if string gives a valid time and timezone as per {@code STRING_FORMAT}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static boolean isValidTime(String string) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            ZonedDateTime.parse(string, DateTimeFormatter.ofPattern(STRING_FORMAT));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return time.format(DateTimeFormatter.ofPattern(STRING_FORMAT));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                || (other instanceof AppointmentTime // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 this.time.equals(((AppointmentTime) other).time)); // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return time.hashCode();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/HideAllAppointment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//@@author XavierMaYuqian"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * HideAllPerson"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "public class HideAllAppointment implements Predicate\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public HideAllAppointment() {}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public boolean test(Appointment appointment) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/UniqueAppointmentList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * A list of appointments that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * @see Appointment#equals(Object)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * @see CollectionUtil#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Returns true if the list contains an equivalent appointment as the given argument."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public boolean contains(Appointment toCheck) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Adds an appointment to the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws DuplicateAppointmentException if the person to add is a duplicate of an existing person in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void add(Appointment toAdd) throws DuplicateAppointmentException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new DuplicateAppointmentException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Replaces the appointment {@code target} in the list with {@code editedAppointment}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws DuplicateAppointmentException if the replacement is equivalent"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     *         to another existing appointment in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws AppointmentNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void setAppointment(Appointment target, Appointment editedAppointment)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throws DuplicateAppointmentException, AppointmentNotFoundException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(editedAppointment);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new AppointmentNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (!target.equals(editedAppointment) \u0026\u0026 internalList.contains(editedAppointment)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new DuplicateAppointmentException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        internalList.set(index, editedAppointment);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Removes the equivalent appointment from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws AppointmentNotFoundException if no such appointment could be found in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public boolean remove(Appointment toRemove) throws AppointmentNotFoundException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        final boolean appointmentFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (!appointmentFoundAndDeleted) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new AppointmentNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return appointmentFoundAndDeleted;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void setAppointments(UniqueAppointmentList replacement) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void setAppointments(List\u003cAppointment\u003e appointments) throws DuplicateAppointmentException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        requireAllNonNull(appointments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        final UniqueAppointmentList replacement \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        for (final Appointment appointment : appointments) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            replacement.add(appointment);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        setAppointments(replacement);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public ObservableList\u003cAppointment\u003e asObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Sorts based on decreasing time of appointment. Note that time is based on instant not local time."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        internalList.sort((appointmentA, appointmentB) -\u003e ("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            -(appointmentA.getTime().time.compareTo(appointmentB.getTime().time))));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public Iterator\u003cAppointment\u003e iterator() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                || (other instanceof UniqueAppointmentList // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                        \u0026\u0026 this.internalList.equals(((UniqueAppointmentList) other).internalList));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.model.appointment.exceptions;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Signals that the operation is unable to find the specified appointment."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class AppointmentNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/exceptions/DuplicateAppointmentException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.model.appointment.exceptions;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.exceptions.DuplicateDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Signals that the operation will result in duplicate Appointment objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class DuplicateAppointmentException extends DuplicateDataException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public DuplicateAppointmentException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        super(\"Operation would result in duplicate appointments\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Comment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//@@author XavierMaYuqian"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * Represents a person\u0027s comment in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "public class Comment {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String MESSAGE_COMMENT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            \"Comment can take any values, and it should not be blank. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                    + \"If you don\u0027t have thing to note down, please put \u0027NIL\u0027\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * The first character of the comment must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String COMMENT_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Constructs an {@code Comment}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * @param comment A valid comment."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public Comment(String comment) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        requireNonNull(comment);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        checkArgument(isValidComment(comment), MESSAGE_COMMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        this.value \u003d comment;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Returns true if a given string is a valid comment."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static boolean isValidComment(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return test.matches(COMMENT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                || (other instanceof Comment // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                \u0026\u0026 this.value.equals(((Comment) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/CustTimeZone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.TimeZone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": " * Represents a person\u0027s timezone in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "//@@author glorialaw"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "public class CustTimeZone {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public static final String MESSAGE_TIMEZONE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \"Time zones should be have the standard time zone abbreviations, and should not be blank\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    //will convert from string to TimeZone when calendar is implemented"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public final String timeZone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public CustTimeZone(String timeZone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        requireNonNull(timeZone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        checkArgument(isValidTimeZone(timeZone), MESSAGE_TIMEZONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        this.timeZone \u003d timeZone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * Returns true if a given string is a valid time zone. Some short abbreviations are not supported such as SGT."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * Corrected with the if statement."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public static boolean isValidTimeZone(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        if (test.toUpperCase().equals(\"SGT\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            test \u003d \"Asia/Singapore\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        return Arrays.asList(TimeZone.getAvailableIDs()).contains(test);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        return timeZone; }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                || (other instanceof CustTimeZone"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                \u0026\u0026 this.timeZone.equals(((CustTimeZone) other).timeZone));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        return timeZone.hashCode(); }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "glorialaw": 54,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/HideAllPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//@@author XavierMaYuqian"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * HideAllPerson"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "public class HideAllPerson implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public HideAllPerson() {}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private final CustTimeZone timeZone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private final Comment comment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private boolean isArchived \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, CustTimeZone timeZone,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                  Comment comment, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        requireAllNonNull(name, phone, email, address, timeZone, comment, tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        this.timeZone \u003d timeZone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        this.comment \u003d comment;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // protect internal tags from changes in the arg list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d new UniqueTagList(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                  CustTimeZone timeZone, Comment comment, boolean isArchived, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        this(name, phone, email, address, timeZone, comment, tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.isArchived \u003d isArchived;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public CustTimeZone getCustTimeZone() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        return timeZone; }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public Comment getComment() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return comment;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public boolean isArchived() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return isArchived;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void setArchived(boolean value) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.isArchived \u003d value;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags.toSet());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(this.getName())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                \u0026\u0026 otherPerson.getCustTimeZone().equals(this.getCustTimeZone())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                \u0026\u0026 otherPerson.getComment().equals(this.getComment());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return Objects.hash(name, phone, email, address, timeZone, comment, tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                .append(\" Time Zone: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                .append(getCustTimeZone())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                .append(\" Comment: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                .append(getComment())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 16,
      "XavierMaYuqian": 17,
      "glorialaw": 9,
      "-": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#equals(Object)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * @see CollectionUtil#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if no such person could be found in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean remove(Person toRemove) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personFoundAndDeleted) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return personFoundAndDeleted;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final UniquePersonList replacement \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        for (final Person person : persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            replacement.add(person);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(replacement);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Sort all persons based on alphabetical order of their full names"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        internalList.sort((personA, personB) -\u003e ("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            personA.getName().fullName.toLowerCase().compareTo(personB.getName().fullName.toLowerCase())));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public ObservableList\u003cPerson\u003e asObservableList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 33,
      "-": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//@@author XavierMaYuqian"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * Signals that the operation is unable to find the specified tag."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "public class TagNotFoundException extends Exception {}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.person.Comment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.CustTimeZone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new CustTimeZone(\"PST\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                new Comment(\"NIL\"), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new CustTimeZone(\"SGT\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                new Comment(\"NIL\"), getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new CustTimeZone(\"SGT\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                new Comment(\"NIL\"), getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new CustTimeZone(\"SGT\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                new Comment(\"NIL\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new CustTimeZone(\"SGT\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                new Comment(\"NIL\"), getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new CustTimeZone(\"SGT\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                new Comment(\"NIL\"), getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return sampleAb;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String s : strings) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            tags.add(new Tag(s));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 7,
      "glorialaw": 12,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedAppointment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.AppointmentName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.AppointmentTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * JAXB-friendly version of the Appointment."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class XmlAdaptedAppointment {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e registered \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Constructs an XmlAdaptedAppointment."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public XmlAdaptedAppointment() {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Constructs an {@code XmlAdaptedAppointment} with the given appointment details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public XmlAdaptedAppointment(String name, String time, String email, List\u003cXmlAdaptedPerson\u003e registered) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (registered !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            this.registered \u003d new ArrayList\u003c\u003e(registered);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Converts a given Appointment into this class for JAXB use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedAppointment"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public XmlAdaptedAppointment(Appointment source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        name \u003d source.getName().name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        time \u003d source.getTime().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        registered \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        for (Person person : source.getPersons()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            registered.add(new XmlAdaptedPerson(person));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Converts this jaxb-friendly adapted appointment object into the model\u0027s Appointment object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public Appointment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        final UniquePersonList appointmentPersons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        for (XmlAdaptedPerson person : registered) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            appointmentPersons.add(person.toModelType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (this.name \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (!AppointmentName.isValidName(this.name)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new IllegalValueException(AppointmentName.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        final AppointmentName name \u003d new AppointmentName(this.name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (this.time \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                        AppointmentTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (!AppointmentTime.isValidTime(this.time)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new IllegalValueException(AppointmentTime.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        final AppointmentTime time \u003d new AppointmentTime(this.time);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Appointment appointment \u003d new Appointment(name, time, appointmentPersons);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return appointment;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (!(other instanceof XmlAdaptedAppointment)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        XmlAdaptedAppointment otherAppointment \u003d (XmlAdaptedAppointment) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return Objects.equals(name, otherAppointment.name)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 Objects.equals(time, otherAppointment.time)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 registered.equals(otherAppointment.registered);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPassword.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//@@author XavierMaYuqian"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * JAXB-friendly adapted version of the Password."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "public class XmlAdaptedPassword {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Constructs an XmlAdaptedPassword."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public XmlAdaptedPassword() {}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Constructs a {@code XmlAdaptedPassword} with the given {@code password}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public XmlAdaptedPassword(String password) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Converts this jaxb-friendly adapted password object into the model\u0027s password object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public String toModelType() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return this.password;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.person.Comment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.CustTimeZone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private String timeZone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private String comment;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private Boolean isArchived;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                            String timeZone, String comment, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        this.timeZone \u003d timeZone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        this.comment \u003d comment;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        timeZone \u003d source.getCustTimeZone().timeZone;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        comment \u003d source.getComment().value;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        isArchived \u003d source.isArchived();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            tagged.add(new XmlAdaptedTag(tag));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.name \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(this.name)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name name \u003d new Name(this.name);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(this.phone)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone phone \u003d new Phone(this.phone);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.email \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(this.email)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email email \u003d new Email(this.email);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.address \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(this.address)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address address \u003d new Address(this.address);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        if (this.timeZone \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    CustTimeZone.class.getSimpleName()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        if (!CustTimeZone.isValidTimeZone(this.timeZone)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            throw new IllegalValueException(CustTimeZone.MESSAGE_TIMEZONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        final CustTimeZone timeZone \u003d new CustTimeZone(this.timeZone);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        if (this.comment \u003d\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Comment.class.getSimpleName()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        if (!Comment.isValidComment(this.comment)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            throw new IllegalValueException(Comment.MESSAGE_COMMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        final Comment comment \u003d new Comment(this.comment);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, timeZone, comment, tags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (this.isArchived \u003d\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"archived\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        person.setArchived(this.isArchived);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                \u0026\u0026 Objects.equals(timeZone, otherPerson.timeZone)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                \u0026\u0026 Objects.equals(comment, otherPerson.comment)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 8,
      "XavierMaYuqian": 15,
      "glorialaw": 23,
      "-": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private List\u003cXmlAdaptedAppointment\u003e appointments;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        password \u003d \"123456\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        appointments.addAll(src.getAppointmentList().stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                .map(XmlAdaptedAppointment::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        password \u003d src.getPassword();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag} or {@code XmlAdaptedAppointment}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag t : tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addTag(t.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(p.toModelType());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        for (XmlAdaptedAppointment a : appointments) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            addressBook.addAppointment(a.toModelType());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        addressBook.setPassword(password);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return persons.equals(otherAb.persons)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 tags.equals(otherAb.tags)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 appointments.equals(otherAb.appointments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 12,
      "XavierMaYuqian": 5,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AppointmentCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * An UI component that displays information of an {@code Appointment}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class AppointmentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private static final String FXML \u003d \"AppointmentListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public final Appointment appointment;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private HBox appointmentCardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private Label datetime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private FlowPane persons;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public AppointmentCard(Appointment appointment, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        name.setText(appointment.getName().name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        datetime.setText(appointment.getTime().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        appointment.getPersons().forEach(person -\u003e persons.getChildren().add(new Label(person.getName().fullName)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (!(other instanceof AppointmentCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        AppointmentCard card \u003d (AppointmentCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                \u0026\u0026 appointment.equals(card.appointment);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AppointmentListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import org.fxmisc.easybind.EasyBind;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.events.ui.AppointmentPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Panel containing the list of appointments."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class AppointmentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private static final String FXML \u003d \"AppointmentListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AppointmentListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private ListView\u003cAppointmentCard\u003e appointmentListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public AppointmentListPanel(ObservableList\u003cAppointment\u003e appointmentList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        setConnections(appointmentList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private void setConnections(ObservableList\u003cAppointment\u003e appointmentList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        ObservableList\u003cAppointmentCard\u003e mappedList \u003d EasyBind.map("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                appointmentList, (appointment) -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                        new AppointmentCard(appointment, appointmentList.indexOf(appointment) + 1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        appointmentListView.setItems(mappedList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        appointmentListView.setCellFactory(listView -\u003e new AppointmentListViewCell());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        appointmentListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                        logger.fine(\"Selection in appointment list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                        raise(new AppointmentPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Scrolls to the {@code AppointmentCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            appointmentListView.scrollTo(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            appointmentListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code AppointmentCard}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    class AppointmentListViewCell extends ListCell\u003cAppointmentCard\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        protected void updateItem(AppointmentCard appointment, boolean empty) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            super.updateItem(appointment, empty);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            if (empty || appointment \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                setGraphic(appointment.getRoot());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import com.calendarfx.model.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import com.calendarfx.model.CalendarSource;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import com.calendarfx.model.Entry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import com.calendarfx.view.CalendarView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.scene.effect.Blend;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.scene.effect.BlendMode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.scene.effect.ColorInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class CalendarPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private static final String FXML \u003d \"CalendarPanel.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private CalendarView calendarView;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private ObservableList\u003cAppointment\u003e appointmentList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private Calendar calendar;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public CalendarPanel(ObservableList\u003cAppointment\u003e appointmentList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        calendarView.setShowAddCalendarButton(false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        calendarView.setShowPrintButton(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        calendarView.showMonthPage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // Set CSS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        String fullPath \u003d getClass().getResource(\"/view/calendar.css\").toExternalForm();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        calendarView.getStylesheets().removeAll();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        calendarView.getStylesheets().add(fullPath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        calendar \u003d new Calendar(\"Appointments\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        calendar.setReadOnly(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        CalendarSource myCalendarSource \u003d new CalendarSource(\"My Calendars\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        myCalendarSource.getCalendars().addAll(calendar);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        calendarView.getCalendarSources().addAll(myCalendarSource);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.appointmentList \u003d appointmentList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        syncAppointments();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        calendarView \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Switch to dark theme"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void switchDarkTheme() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Blend blendEffect \u003d new Blend(BlendMode.DIFFERENCE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        ColorInput colorInput \u003d new ColorInput(0, 0, 2000, 2000, Color.gray(1.0));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        blendEffect.setTopInput(colorInput);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        calendarView.setEffect(blendEffect);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Switch to light theme"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void switchLightTheme() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        calendarView.setEffect(null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Synchronises the appointments and calendar entries"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private void syncAppointments() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        calendar.clear();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        for (Appointment appointment : appointmentList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            Entry\u003cString\u003e entry \u003d new Entry(appointment.getName().name);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            entry.setInterval(appointment.getTime().time);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            entry.setLocation(appointment.getTime().time.format(DateTimeFormatter.ofPattern(\"VV\")));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            calendar.addEntry(entry);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        syncAppointments();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandInputChanged() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    commandTextField.getStyleClass().contains(ERROR_STYLE_CLASS)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    commandTextField.getStyleClass().contains(ERROR_STYLE_CLASS)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "glorialaw": 4,
      "-": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ComposeEmailWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.MessagingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import jdk.nashorn.internal.runtime.regexp.joni.exception.SyntaxException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "//@@author glorialaw"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "glorialaw"
        },
        "content": " * makes the compose email window"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "glorialaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "public class ComposeEmailWindow {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private static final String composeWindow \u003d \"/view/emailcompose.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private static final String successWindow \u003d \"/view/successwindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private Stage puWindow \u003d new Stage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private AnchorPane successPopup;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private AnchorPane emailComposePopup;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private TextField recipients;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private TextField subject;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private TextArea message;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private Button cancelButton;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private Button closeButton;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private Label results;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * Creates a new Email compose window"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public ComposeEmailWindow(String type, String email, String sub, String content)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            throws IOException, SyntaxException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        //get URL"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        FXMLLoader fxmlLoader \u003d loadScene(composeWindow);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        Parent root \u003d (Parent) fxmlLoader.load();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        recipients.setText(email);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        subject.setText(type + sub);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        if (content !\u003d \"\") {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            addPreviousEmail(type, email, sub, content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        puWindow.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        puWindow.initStyle(StageStyle.UNDECORATED);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        puWindow.setTitle(\"Compose Email\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        //puWindow.getScene().setRoot(root);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        //this.main.setRoot(root);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        puWindow.setScene(new Scene(root));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        puWindow.show();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * Shows the message that user is trying to reply to or forward"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * @param type indicates whether or not it is a forwarded email or reply"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * @param email is the person that sent the previous email"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * @param subject the subject of the previous email"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * @param content the contents of the previous email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private void addPreviousEmail(String type, String email, String subject, String content) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        String previousMessage \u003d \"\\n\\n\\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        if (type \u003d\u003d \"RE: \") {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            previousMessage \u003d previousMessage + \"-----Original Message-----\\n\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            previousMessage \u003d previousMessage + \"Begin Forwarded Message: \\n\\n\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        previousMessage \u003d previousMessage + \"From: \" + email + \"\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                + \"To: sg.salesperson@gmail.com\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                + \"Subject: \" + subject + \"\\n\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                + content + \"\\n\\n\\n\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        message.setText(previousMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public void sendEmail() throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        FXMLLoader fxmlLoader \u003d loadScene(successWindow);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        Parent confirm \u003d (Parent) fxmlLoader.load();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            new MailServer(parseRecipients(), subject.getText(), message.getText());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            results.setText(\"Email Sent Successfully\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            results.setTextFill(Color.web(\"#4cc486\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        } catch (MessagingException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            results.setText(\"Could not send email due to error.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            results.setTextFill(Color.web(\"Red\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            e.getStackTrace();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        puWindow.getScene().setRoot(confirm);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        puWindow.show();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private String[] parseRecipients() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        System.out.println(recipients.getText());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        return recipients.getText().split(\",\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * Closes window with ESC key"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        case ESCAPE:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            puWindow.close();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private void cancelWindow() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        puWindow.close();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     *loads the scene"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private FXMLLoader loadScene (String fxml) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxml);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        fxmlLoader.setLocation(fxmlFileUrl);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        fxmlLoader.setRoot(null);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        return fxmlLoader;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "glorialaw": 160
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EmailCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static java.lang.Integer.min;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.Message;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.MessagingException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.Multipart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.Part;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "glorialaw"
        },
        "content": " * the card for the email panel"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "glorialaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "//@@author glorialaw"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "public class EmailCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private static final String FXML \u003d \"EmailCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private HBox emailCardPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private Label subject;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private Label preview;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private Message msg;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public EmailCard(Message message) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        String errorMsg \u003d \"Please ensure that you are connected to the internet.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        if (message \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            email.setText(\"unknown@unknown.com\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            subject.setText(\"Error: Unable to retrieve message\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            preview.setText(errorMsg);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            this.msg \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        } else if (message !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                email.setText(message.getFrom()[0].toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                subject.setText(message.getSubject());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                this.msg \u003d message;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                //check if it is multipart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                if (message.getContent() instanceof String) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    String content \u003d (String) message.getContent();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    preview.setText(((String) message.getContent()).substring(0, min(20, content.length())));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                } else if (message.isMimeType(\"multipart/*\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    Multipart multipart \u003d (Multipart) message.getContent();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    if (multipart.getCount() \u003e 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                        String msg \u003d multipart.getBodyPart(0).getContent().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                        preview.setText(msg.substring(0, min(20, msg.length())));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                } else if (message.isMimeType(\"message/rfc822\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    Part part \u003d (Part) message.getContent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                        if (part.getContent() instanceof String) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                            String content \u003d (String) part.getContent();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                            preview.setText(((String) part.getContent()).substring(0, min(20, content.length())));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                        } else if (part.isMimeType(\"multipart/*\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                            Multipart multipart \u003d (Multipart) part.getContent();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                            if (multipart.getCount() \u003e 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                                String msg \u003d multipart.getBodyPart(0).getContent().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                                preview.setText(msg.substring(0, min(20, msg.length())));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                            preview.setText(\"This message is not in a supported format.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    } catch (MessagingException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                        System.out.println(\"Messaging Exception\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                        System.out.println(\"IOException\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    preview.setText(\"This message is not in a supported format.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            } catch (MessagingException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * opens popup window prefilled with email when email from inbox is clicked"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private void openEmail() throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            OpenEmailWindow cew \u003d new OpenEmailWindow(this.email.getText(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    this.subject.getText(), this.msg);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "glorialaw": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MailPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import java.util.Properties;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import java.util.concurrent.Executors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import java.util.concurrent.ScheduledExecutorService;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.Folder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.Message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.MessagingException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.NoSuchProviderException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.Session;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.event.MessageCountAdapter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.event.MessageCountEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import com.sun.mail.imap.IMAPFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import com.sun.mail.imap.IMAPStore;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.concurrent.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "glorialaw"
        },
        "content": " * Mail panel"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "glorialaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "//@@author glorialaw"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "public class MailPanel extends UiPart\u003cVBox\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private static final long freq \u003d 30;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private static final String FXML \u003d \"EmailPanel.fxml\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MailPanel.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private final ObservableList\u003cEmailCard\u003e emailList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private int messageCount \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private final IMAPFolder inbox \u003d getInbox();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private Label loading;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private ListView\u003cEmailCard\u003e emailListView;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public MailPanel() throws MessagingException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        Task\u003cVoid\u003e fetchEmails \u003d new Task\u003cVoid\u003e() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            protected Void call() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                setConnections();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            protected void succeeded() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                MailPanel.this.getRoot().getChildren().remove(loading);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        };"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        new Thread(fetchEmails).start();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        ScheduledExecutorService runChecks \u003d Executors.newScheduledThreadPool(1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        Runnable rc \u003d new Runnable() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                Platform.setImplicitExit(false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                refreshMessages();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        };"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        runChecks.scheduleAtFixedRate(rc, freq, freq, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private void setConnections() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        loading.setText(\"Loading Emails...\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        //gets the list of messages"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        int length \u003d 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        Message[] messages \u003d messageList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        if (messages !\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            length \u003d messages.length;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            messageCount \u003d length;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            for (int i \u003d 0; i \u003c length; i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                emailList.add(new EmailCard(messages[i]));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        } else if (messages \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            emailList.add(new EmailCard(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        FXCollections.reverse(emailList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        emailListView.setItems(emailList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        emailListView.setCellFactory(listView -\u003e new EmailListViewCell());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * Returns a list of messages in the inbox"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * @return list of messages"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public Message[] messageList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        if (inbox !\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                inbox.open(Folder.READ_ONLY);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                //gets \u0026 returns messages"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                Message[] messages \u003d inbox.getMessages();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                inbox.addMessageCountListener(new MessageCountAdapter() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    public void messagesAdded(MessageCountEvent mce) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                        //System.out.println(\"Listener finally worked\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                            Message[] newMessages \u003d mce.getMessages();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                            FXCollections.reverse(emailList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                            for (Message message : newMessages) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                                emailList.add(new EmailCard(message));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                            FXCollections.reverse(emailList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                });"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                return messages;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            } catch (NoSuchProviderException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            } catch (MessagingException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * Refreshes the inbox so that the contents can be updated"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private void refreshMessages() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        //System.out.println(\"Inside refresh messages\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            if (!inbox.isOpen()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                inbox.open(Folder.READ_ONLY);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                inbox.idle();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        } catch (MessagingException me) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            me.getCause();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private IMAPFolder getInbox() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        String username \u003d \"sg.salesperson@gmail.com\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        String password \u003d \"gloriacs2103\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        String host \u003d \"imap.gmail.com\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        Properties props \u003d new Properties();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        props.put(\"mail.store.protocol\", \"imaps\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        props.put(\"mail.imaps.host\", host);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        props.put(\"mail.imaps.port\", \"993\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        props.put(\"mail.imaps.ssl.trust\", host);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        props.put(\"mail.imaps.timeout\", \"10000\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        Session session \u003d Session.getInstance(props);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        IMAPStore store \u003d null;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        Folder inbox \u003d null;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            store \u003d (IMAPStore) session.getStore(\"imaps\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            store.connect(username, password);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            inbox \u003d (IMAPFolder) store.getFolder(\"INBOX\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            return (IMAPFolder) inbox;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        } catch (NoSuchProviderException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        } catch (MessagingException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            System.out.println(e.getCause());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code EmailCard}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    class EmailListViewCell extends ListCell\u003cEmailCard\u003e {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        protected void updateItem(EmailCard email, boolean empty) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            super.updateItem(email, empty);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            if (empty || email \u003d\u003d null) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                setGraphic(email.getRoot());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 3,
      "glorialaw": 194
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MailServer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import java.util.Properties;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.Authenticator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.Message;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.MessagingException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.PasswordAuthentication;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.Session;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.Transport;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.internet.InternetAddress;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.internet.MimeMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "glorialaw"
        },
        "content": " * Mail Server activities"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "glorialaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "//@@author glorialaw"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "public class MailServer {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private static String username \u003d \"sg.salesperson@gmail.com\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private static String password \u003d \"gloriacs2103\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private static String host \u003d \"smtp.gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public MailServer(String[] recipient, String subject, String msg) throws MessagingException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        sendEmail(recipient, subject, msg);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * starts a new smtp session"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public static Session startSession() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        Properties props \u003d System.getProperties();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        props.put(\"mail.smtp.starttls.enable\", \"true\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        props.put(\"mail.smtp.host\", host);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        props.put(\"mail.smtp.user\", username);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        props.put(\"mail.smtp.password\", password);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        props.put(\"mail.smtp.ssl.trust\", \"smtp.gmail.com\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        props.put(\"mail.smtp.port\", \"587\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        props.put(\"mail.smtp.auth\", \"true\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        Authenticator auth \u003d new Authenticator() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            protected PasswordAuthentication getPasswordAuthentication() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                return new PasswordAuthentication(username, password);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        Session session \u003d Session.getInstance(props, auth);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        return session;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * Puts together the email message and sends it"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * @param recipients - the addresses the message is sent to"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * @param subject    - user chooses subject"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * @param msg        - contents the user types"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private static void sendEmail(String[] recipients, String subject, String msg) throws MessagingException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        Session session \u003d startSession();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        //create the message"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        MimeMessage message \u003d new MimeMessage(session);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        message.setFrom(new InternetAddress(username));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        for (String recipient : recipients) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            message.addRecipients(Message.RecipientType.TO, InternetAddress.parse(recipient));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        message.setSubject(subject);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        message.setText(msg);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        //send the message"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        Transport.send(message);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "glorialaw": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.MessagingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.commons.events.ui.SwitchThemeRequestEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String LIGHT_THEME \u003d \"/view/LightTheme.css\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String DARK_THEME \u003d \"/view/DarkTheme.css\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private String theme;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private CalendarPanel calendarPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private AppointmentListPanel appointmentListPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private MailPanel mailPanel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private StackPane calendarPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private StackPane appointmentListPanelPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private StackPane emailPanelPlaceholder;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        setDefaultTheme(prefs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        calendarPanel \u003d new CalendarPanel(logic.getFilteredAppointmentList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        calendarPlaceholder.getChildren().add(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        appointmentListPanel \u003d new AppointmentListPanel(logic.getFilteredAppointmentList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        appointmentListPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath(),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                logic.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            mailPanel \u003d new MailPanel();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            emailPanelPlaceholder.getChildren().add(mailPanel.getRoot());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            System.out.println(\"Caught IOException\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        } catch (MessagingException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            System.out.println(\"Caught MessagingException @ Main\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (this.theme.equals(DARK_THEME)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            calendarPanel.switchDarkTheme();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            calendarPanel.switchLightTheme();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //@@author ongkuanyang"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Sets the default theme based on UserPrefs"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private void setDefaultTheme(UserPrefs prefs) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        this.theme \u003d prefs.getGuiSettings().getTheme();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        String fullPath \u003d getClass().getResource(this.theme).toExternalForm();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        primaryStage.getScene().getStylesheets().add(fullPath);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY(), this.theme);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        HelpWindow helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.show();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //@@author ongkuanyang"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Switches the current theme"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void handleSwitchTheme() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        String fullPath \u003d getClass().getResource(this.theme).toExternalForm();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        primaryStage.getScene().getStylesheets().remove(fullPath);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (this.theme.equals(LIGHT_THEME)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            this.theme \u003d DARK_THEME;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            calendarPanel.switchDarkTheme();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            this.theme \u003d LIGHT_THEME;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            calendarPanel.switchLightTheme();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        fullPath \u003d getClass().getResource(this.theme).toExternalForm();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        primaryStage.getScene().getStylesheets().add(fullPath);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.personListPanel;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        calendarPanel.freeResources();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private void handleSwitchThemeEvent(SwitchThemeRequestEvent event) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        handleSwitchTheme();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 49,
      "XavierMaYuqian": 18,
      "glorialaw": 17,
      "-": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OpenEmailWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.Message;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.MessagingException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javax.mail.Multipart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import jdk.nashorn.internal.runtime.regexp.joni.exception.SyntaxException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "//@@author glorialaw"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "glorialaw"
        },
        "content": " * Generates the full email that was received"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "glorialaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "public class OpenEmailWindow {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private static final String openWindow \u003d \"/view/emailOpen.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private Stage puWindow \u003d new Stage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private AnchorPane emailComposePopup;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private Label fromContent;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private Label subjectContent;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private TextArea msgContent;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private Button newEmailButton;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private Button replyButton;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private Button forwardButton;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private Button closeButton;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * Open the email message window"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public OpenEmailWindow(String email, String subject, Message msg) throws IOException, SyntaxException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        String errorMsg \u003d \"Please ensure that you are connected to the internet.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        //get URL"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        FXMLLoader fxmlLoader \u003d loadScene(openWindow);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        Parent root \u003d (Parent) fxmlLoader.load();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        fromContent.setText(email);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        subjectContent.setText(subject);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        if (msg !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            setContent(msg);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            msgContent.setText(errorMsg);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        puWindow.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        puWindow.initStyle(StageStyle.UNDECORATED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        puWindow.setTitle(\"Compose Email\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        puWindow.setScene(new Scene(root));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        puWindow.show();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * Parses the message content into a string."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * @param message is the email message packet"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private void setContent (Message message) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            if (message.getContent() instanceof String) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                content \u003d (String) message.getContent();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                msgContent.setText(content);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            } else if (message.isMimeType(\"multipart/*\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                Multipart multipart \u003d (Multipart) message.getContent();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                if (multipart.getCount() \u003e 0) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    int i;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    for (i \u003d 0; i \u003c multipart.getCount(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                        content +\u003d multipart.getBodyPart(i).getContent().toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    msgContent.setText(content);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                msgContent.setText(\"This message is in an unsupported format.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        } catch (MessagingException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * Closes window with ESC key"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        case ESCAPE:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            puWindow.close();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * opens a new email window"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private void openComposeWindow() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            ComposeEmailWindow cew \u003d new ComposeEmailWindow(\"\", \"\", \"\", \"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * opens a new reply email window"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private void openReplyWindow() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            ComposeEmailWindow cew \u003d new ComposeEmailWindow(\"RE: \", this.fromContent.getText(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                    this.subjectContent.getText(), this.msgContent.getText());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * opens a new forward email window"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private void openForwardWindow() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            ComposeEmailWindow cew \u003d new ComposeEmailWindow(\"FWD: \", \"\","
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                     this.subjectContent.getText(), this.msgContent.getText());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private void closeWindow () {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        puWindow.close();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     *loads the scene"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private FXMLLoader loadScene (String fxml) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxml);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        fxmlLoader.setLocation(fxmlFileUrl);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        fxmlLoader.setRoot(null);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        return fxmlLoader;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "glorialaw": 178
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private static final String ARCHIVED_STYLE \u003d \"archived\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private Label timeZone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private Label comment;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        timeZone.setText(person.getCustTimeZone().timeZone);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        comment.setText(person.getComment().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        if (person.isArchived()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            name.getStyleClass().add(ARCHIVED_STYLE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    //@@author glorialaw"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * opens email sender when email is pushed"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private void writeEmail() throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            ComposeEmailWindow cew \u003d new ComposeEmailWindow(\"\", this.email.getText(), \"\", \"\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            System.out.println(\"IOException\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 5,
      "XavierMaYuqian": 3,
      "glorialaw": 20,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        if (event.hasError) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            resultDisplay.getStyleClass().add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "glorialaw": 7,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String TOTAL_PERSONS_STATUS \u003d \"%d person(s) in total\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private StatusBar totalPersonsStatus;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public StatusBarFooter(String saveLocation, int totalPersons) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(\"./\" + saveLocation);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        setTotalPersons(totalPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e this.syncStatus.setText(status));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private void setTotalPersons(int totalPersons) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        Platform.runLater(() -\u003e this.totalPersonsStatus.setText(String.format(TOTAL_PERSONS_STATUS, totalPersons)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        setTotalPersons(abce.data.getPersonList().size());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 19,
      "-": 72
    }
  },
  {
    "path": "src/main/resources/view/AppointmentListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003c!-- @@author ongkuanyang --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003cHBox id\u003d\"appointmentCardPane\" fx:id\u003d\"appointmentCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"persons\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "      \u003cLabel fx:id\u003d\"datetime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 35
    }
  },
  {
    "path": "src/main/resources/view/AppointmentListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003c!-- @@author ongkuanyang --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "  \u003cListView fx:id\u003d\"appointmentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 9
    }
  },
  {
    "path": "src/main/resources/view/CalendarPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003c?import com.calendarfx.view.CalendarView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "  \u003cCalendarView fx:id\u003d\"calendarView\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 8
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    background-color: #555555; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".list-cell:filled:selected #appointmentCardPane #emailCardPane {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".anchor-pane {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .anchor-pane {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#appointmentCardPane {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#emailCardPane {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#filterField, #personListPanel, #appointmentListPanel, #personWebpage #mailPanel {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#persons {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#persons .label {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 31,
      "-": 349
    }
  },
  {
    "path": "src/main/resources/view/EmailCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c!-- @@author glorialaw --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" onMouseClicked\u003d\"#openEmail\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"103.0\" prefHeight\u003d\"104.0\" prefWidth\u003d\"229.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"20.0\" prefWidth\u003d\"323.0\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_big_label\" text\u003d\"\\\\$sender\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                  \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "               \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cLabel fx:id\u003d\"subject\" prefHeight\u003d\"17.0\" prefWidth\u003d\"324.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$subject\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "               \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "         \u003cLabel fx:id\u003d\"preview\" prefHeight\u003d\"51.0\" prefWidth\u003d\"321.0\" text\u003d\"\\$preview\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "glorialaw": 39
    }
  },
  {
    "path": "src/main/resources/view/EmailPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c!-- @@author glorialaw --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    \u003cLabel fx:id\u003d\"loading\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    \u003cListView fx:id\u003d\"emailListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "glorialaw": 11
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".archived.label .text {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-strikethrough: true;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-fill: #d06651;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background: #888888;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 6,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    background-color: #c7c7c7; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: #aaaaaa;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-base: #e2e2e2;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-control-inner-background: #e2e2e2;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: transparent transparent transparent #b2b2b2;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: #c3c1c0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: #aea9a7;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: #bdb2a0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: #bdb2a0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".list-cell:filled:selected #appointmentCardPane #emailCardPane {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: #bdb2a0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: #fefafb;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: #fefafb;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".anchor-pane {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     -fx-border-color: derive(#e2e2e2, 10%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 30%);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: derive(#e2e2e2, 25%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 30%);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: derive(#e2e2e2, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".grid-pane .anchor-pane {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 30%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 50%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "  -fx-background-color: black;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "  -fx-text-fill: #e2e2e2;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: black, black;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 25%);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 20%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(#e2e2e2, 50%);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#appointmentCardPane {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#emailCardPane {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent #c7c7c7 transparent #c7c7c7;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: #c7c7c7 #c7c7c7 #ffffff #c7c7c7;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#filterField, #personListPanel, #appointmentListPanel, #personWebpage #mailPanel {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-effect: innershadow(gaussian, white, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent, #c7c7c7, transparent, #c7c7c7;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: #c1846e;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#persons {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#persons .label {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: #c1846e;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 381
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "         minWidth\u003d\"1400\" minHeight\u003d\"500\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "          \u003cVBox fx:id\u003d\"appointmentList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            \u003cStackPane fx:id\u003d\"appointmentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "          \u003cVBox fx:id\u003d\"emailList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cStackPane fx:id\u003d\"emailPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "          \u003cStackPane fx:id\u003d\"calendarPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 9,
      "glorialaw": 7,
      "-": 62
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"150\" prefHeight\u003d\"150.0\" prefWidth\u003d\"135.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" onMousePressed\u003d\"#writeEmail\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "      \u003cLabel fx:id\u003d\"timeZone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$timeZone\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "      \u003cLabel fx:id\u003d\"comment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$comment\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 2,
      "glorialaw": 9,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import org.controlsfx.control.StatusBar?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cGridPane styleClass\u003d\"grid-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cStatusBar styleClass\u003d\"anchor-pane\" fx:id\u003d\"syncStatus\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "  \u003cStatusBar styleClass\u003d\"anchor-pane\" fx:id\u003d\"totalPersonsStatus\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "  \u003cStatusBar styleClass\u003d\"anchor-pane\" fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"2\" nodeOrientation\u003d\"RIGHT_TO_LEFT\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/resources/view/calendar.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " *  Copyright (C) 2017 Dirk Lemmermann Software \u0026 Consulting (dlsc.com)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " *  Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " *  you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " *  You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " *          http://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " *  Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " *  distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " *  See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " *  limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Base colors for the predefined styles"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "* {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -style1-color: rgba(119.0, 192.0, 75.0, 0.9);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -style2-color: rgba(65.0, 143.0, 203.0, 0.9);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -style3-color: rgba(247.0, 209.0, 91.0, 0.9);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -style4-color: rgba(157.0, 91.0, 159.0, 0.9);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -style5-color: rgba(208.0, 82.0, 95.0, 0.9);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -style6-color: rgba(249.0, 132.0, 75.0, 0.9);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -style7-color: rgba(174.0, 102.0, 62.0, 0.9);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -weekend-fill-color: rgb(245.0, 245.0, 245.0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -today-fill-color: firebrick;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -usage-very-low-color: lightgreen;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -usage-low-color: green;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -usage-medium-color: gold;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -usage-high-color: darkorange;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -usage-very-high-color: red;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -usage-very-low-text-color: green;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -usage-low-text-color: lightgreen;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -usage-medium-text-color: black;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -usage-high-text-color: black;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -usage-very-high-text-color: white;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".calendar-view {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: lightgray;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * A few ID-based styes."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#toolbar {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 10.0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 0.0 0.0 0.5 0.0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: gray;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#switcher {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#search-field {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-radius: 100.0px;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-pref-width: 200.0px;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#search-icon {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -glyph-name: \"SEARCH\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -glyph-size: 1.0em;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#date-picker {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: lightgray transparent transparent transparent;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-insets: 0.0 6.0 0.0 6.0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: rgb(245.0, 245.0, 245.0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-min-width: 200.0px;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-min-height: 180.0px;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "#tray-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".date-hyperlink {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-cursor: hand;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles for CalendarView."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".calendar-view .master-detail-pane \u003e .split-pane \u003e .split-pane-divider {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0 0.0 0.0 0.0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".calendar-view .master-detail-pane \u003e .split-pane {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-insets: 0.0, 0.0, 0.0, 0.0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".calendar-view .button-icon {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-fill: rgb(255, 255, 255);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -glyph-size: 14.0px;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles for the PageBase abstract superclass of the day, week, month, and year page."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * The page base consists of a big content node in the middle and a header that displays"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * navigation buttons to go forward, back, to today and the currently shown date (range)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".calendar-page {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".calendar-page \u003e .container \u003e .content {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 10px;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".calendar-page \u003e .container \u003e .header \u003e .date-text {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 2.2em;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".calendar-page \u003e .container \u003e .header \u003e .navigation-button-bar {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: darkgray;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".calendar-page \u003e .container \u003e .header \u003e .navigation-button-bar \u003e .container \u003e .previous-date-button {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: darkgray;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 3 7 3 7;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".calendar-page \u003e .container \u003e .header \u003e .navigation-button-bar \u003e .container \u003e .next-date-button {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: darkgray;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 3 7 3 7;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed by the \"days\" page."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-page \u003e .container \u003e .content \u003e .left-side \u003e .header {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: gray;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-radius: 6px;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0 1em 0 1em;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-page \u003e .container \u003e .content \u003e .left-side \u003e .header \u003e .today-label {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-family: Arial;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 12.0em;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-page \u003e .container \u003e .content \u003e .left-side \u003e .agenda-view {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 2em 0 0 0;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-insets: 0.0px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-page .day-view {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-pref-width: 350px;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-page \u003e .container \u003e .content \u003e .left-side \u003e .header \u003e .year-month-view \u003e .container \u003e .day-of-week-label {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: transparent transparent lightgray transparent;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0 0.0 5.0 0.0;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-page \u003e .container \u003e .content \u003e .left-side \u003e .header \u003e .year-month-view \u003e .container \u003e .week-label,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-page \u003e .container \u003e .content \u003e .left-side \u003e .header \u003e .year-month-view \u003e .container \u003e .day-of-week-label {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 10.0px;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-page \u003e .container \u003e .content \u003e .left-side \u003e .header \u003e .year-month-view \u003e .container \u003e .week-label {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0 2.0 0.0 0.0;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-min-width: 2.0em;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-min-height: 2.0em;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-page \u003e .container \u003e .content \u003e .left-side \u003e .header \u003e .year-month-view \u003e .container \u003e .current-date-label {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: firebrick;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-page \u003e .container \u003e .content \u003e .left-side \u003e .header \u003e .year-month-view \u003e .container \u003e .current-date-border {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: transparent transparent firebrick transparent;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 2.0;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-page \u003e .container \u003e .content \u003e .left-side \u003e .header \u003e .year-month-view \u003e .container \u003e .month-day {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: .2em .3em .2em .3em;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-page \u003e .container \u003e .content \u003e .left-side \u003e .header \u003e .year-month-view \u003e .container \u003e .day-of-month-label {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: .9em;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-page \u003e .container \u003e .content \u003e .left-side \u003e .header \u003e .year-month-view \u003e .container \u003e .day-not-of-month-label {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: lightgray;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-stroke: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: .8em;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-page \u003e .container \u003e .content \u003e .left-side \u003e .header \u003e .year-month-view \u003e .container \u003e .weekend-day {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, .2);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed by the DatePopOver control."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".date-popover \u003e .border {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-fill: linear-gradient(#f6f6f6 50.0%, #e6e6e6 100.0%) !important;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".date-popover \u003e .content \u003e .entries-pane {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.5em;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".date-popover \u003e .content \u003e .entries-pane \u003e .entry \u003e .title {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 2.0;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".date-popover \u003e .content \u003e .no-entries-label {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 4.0;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".date-popover \u003e .content \u003e .entries-pane \u003e .entry \u003e .time {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 2.0 2.0 2.0 40.0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 10px;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed for the EntryDetailsView."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".entry-details-view \u003e .content {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-hgap: 1.0em;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-vgap: 1.0em;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".entry-details-view \u003e .content \u003e .recurrence-summary-label {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed by the source view. This control displays the currently known"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * calendar sources and for each source the calendars inside of it."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".source-view \u003e .container \u003e .titled-pane \u003e .title \u003e .arrow-button .arrow {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-opacity: 0.0;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".source-view \u003e .container \u003e .titled-pane \u003e .title \u003e .arrow-button {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-pref-width: 0.0;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-pref-height: 0.0;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".source-view \u003e .container \u003e .titled-pane {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-animated: true;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".source-view \u003e .container \u003e .titled-pane:expanded {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".source-view \u003e .container \u003e .titled-pane \u003e .title {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: transparent transparent transparent transparent;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-insets: 1.0 10.0 1.0 10.0;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".source-view \u003e .container \u003e .titled-pane:collapsed \u003e .title {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: transparent transparent lightgray transparent;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-effect: null;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".source-view \u003e .container \u003e .titled-pane \u003e .content {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0 20.0 0.0 20.0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".source-view \u003e .container \u003e .titled-pane \u003e .title \u003e .arrow-button \u003e .arrow {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-pref-width: 0.0;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-pref-height: 0.0;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".source-view \u003e .container \u003e .single-calendar-group {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 1em;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed by the scroll pane that wraps the source view."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".source-view-scroll-pane,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".source-view-scroll-pane:focused {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-radius: 0.0;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-insets: 0.0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-radius: 0.0;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-insets: 0.0;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-fit-to-width: true;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-fit-to-height: true;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".source-view-scroll-pane .corner {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-insets: 0.0px;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed by the year view."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-view \u003e .container {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-hgap: 20px;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-vgap: 20px;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed by the year month view."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0 0.0 10.0 0.0;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header \u003e .month-header {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header \u003e .year-header {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header \u003e .month-header \u003e .month-label {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 18.0px;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header \u003e .year-header \u003e .year-label {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 18.0px;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 1em;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header \u003e .year-header \u003e .previous-button,"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header \u003e .year-header \u003e .next-button,"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header \u003e .month-header \u003e .previous-button,"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header \u003e .month-header \u003e .next-button {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: gray;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-pref-width: 8.0;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-pref-height: 8.0;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-max-width: 8.0;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-max-height: 8.0;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header \u003e .year-header \u003e .previous-button:hover,"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header \u003e .year-header \u003e .next-button:hover,"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header \u003e .month-header \u003e .previous-button:hover,"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header \u003e .month-header \u003e .next-button:hover {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: lightgray;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header \u003e .year-header \u003e .previous-button:pressed,"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header \u003e .year-header \u003e .next-button:pressed,"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header \u003e .month-header \u003e .previous-button:pressed,"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header \u003e .month-header \u003e .next-button:pressed {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: gray;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header \u003e .year-header \u003e .previous-button,"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header \u003e .month-header \u003e .previous-button {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-shape: \"M3,0 V3 L0 1.5 L3,0 Z\";"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header \u003e .year-header \u003e .next-button,"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .header \u003e .month-header \u003e .next-button {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-shape: \"M0,0 L3 1.5 L0,3 V0 Z\";"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .day-of-week-label {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: transparent transparent lightgray transparent;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0 0.0 5.0 0.0;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .week-label,"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .day-of-week-label {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 10.0px;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .week-label {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0 2.0 0.0 0.0;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-min-width: 2.0em;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-min-height: 2.0em;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .current-date-label {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: firebrick;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .current-date-border {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: transparent transparent firebrick transparent;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 2.0;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .month-day {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: .2em .3em .2em .3em;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .day-of-month-label {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: rgba(0.0, 0.0, 0.0, 0.66);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .day-not-of-month-label {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: lightgray;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .weekend-day {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: rgb(245.0, 245.0, 245.0);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .usage-very-low {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -usage-very-low-color;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: -usage-very-low-text-color;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .usage-low {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -usage-low-color;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: -usage-low-text-color;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .usage-medium {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -usage-medium-color;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: -usage-medium-text-color;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .usage-high {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -usage-high-color;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: -usage-high-text-color;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .usage-very-high {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -usage-very-high-color;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: -usage-very-high-text-color;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .selected-month-date {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: lightgray;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".year-month-view \u003e .container \u003e .today {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -today-fill-color;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed by the month view."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .day {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0px;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-insets: 0.0px;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: lightgray transparent transparent transparent;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-insets: 0.0;"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 1.0 0.0 0.0 0.0;"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .day:selected {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: aliceblue;"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .today,"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .current-week {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-insets: 0.0;"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 5.0 0.0 0.0 0.0;"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .current-week {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: salmon transparent transparent transparent;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .today {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: lavenderblush;"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: red;"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: firebrick transparent transparent transparent;"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .day \u003e .entries-pane {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-spacing: 1.0px;"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .day \u003e .header {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 2.0 4.0 2.0 0.0;"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .day \u003e .header \u003e .day-of-month-label,"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .day \u003e .header \u003e .day-not-of-month-label {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-alignment: center-right;"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .day \u003e .header \u003e .day-of-month-label {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(gray, -40.0%);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .day \u003e .header \u003e .day-not-of-month-label {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: lightgray;"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .day \u003e .header \u003e .weekend-day {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .day \u003e .header \u003e .week-of-year-label,"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .day \u003e .header \u003e .current-week-of-year-label {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 0.8em;"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.25em;"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .day \u003e .header \u003e .week-of-year-label {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: gray;"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .day \u003e .header \u003e .current-week-of-year-label {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: lightcoral;"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: lavenderblush;"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .day-of-week-label,"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .day-of-weekend-label {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(gray, -40.0%);"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0 0.0 5.0px 0.0;"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 1.1em;"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .day-of-weekend-label {"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(gray, 10.0%);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .weekend-day {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: rgb(245.0, 245.0, 245.0);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .day \u003e .entries-pane \u003e .more-label {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0 0.0 0.0 10.0px;"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-view \u003e .container \u003e .day \u003e .header \u003e .today-label {"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: firebrick;"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-insets: 0.0 4.0px 0.0 4.0px;"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-alignment: center-right;"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed by the day view."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-view {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0 0.0 0.0 0.0;"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-view.today {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-view.weekend-day {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: rgb(245.0, 245.0, 245.0);"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-view \u003e .half-hour-line {"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-stroke: derive(lightgray, +40%);"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-view \u003e .full-hour-line {"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-stroke: lightgray;"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-view \u003e .current-time-line {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-stroke: firebrick;"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-view \u003e .early-hour-line,"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-view \u003e .late-hour-line {"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-opacity: 0.5;"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-view \u003e .early-hours-region,"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-view \u003e .late-hours-region {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: rgba(200.0, 200.0, 200.0, 0.2);"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".day-view \u003e .current-time-circle {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-stroke: firebrick;"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-fill: firebrick;"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed by the weekday view."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".weekday-view {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".weekday-view.today {"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: lavenderblush;"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".weekday-view.weekend-day {"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: rgb(245.0, 245.0, 245.0);"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed by the time scale (01:00, 02:00, .... 24:00)."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".time-scale {"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0 5.0 0.0 5.0;"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".time-scale \u003e .time-label {"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 0.8em;"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".time-scale \u003e .current-time-label {"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 0.8em;"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: firebrick;"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".time-scale \u003e .early-hour-label,"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".time-scale \u003e .late-hour-label {"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-opacity: 0.5;"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed by the WeekDayHeaderView."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".weekday-header-view \u003e .container \u003e .cell {"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 1.1em;"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0 0.0 4.0 0.0;"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-insets: 0.0 0.0 0.0 0.0;"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: transparent transparent lightgray transparent;"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".weekday-header-view \u003e .container \u003e .today {"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: firebrick;"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed by the AllDayView."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".all-day-view {"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-min-height: 2.0em;"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-row-height: 20.0px; /* custom styleable property */"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-row-spacing: 2.0px; /* custom styleable property */"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-column-spacing: 2.0px; /* custom styleable property */"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".all-day-view \u003e .container \u003e .day-region {"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 0.0 0.0 5.0 0.0;"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: transparent transparent lightgray transparent;"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".all-day-view \u003e .container \u003e .today {"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: transparent transparent firebrick transparent;"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: lavenderblush;"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".all-day-view \u003e .container \u003e .weekend {"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: rgb(245.0, 245.0, 245.0);"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed by the AgendaView."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".agenda-view \u003e .container \u003e .list-view \u003e .placeholder-label {"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 2.5em;"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".agenda-view \u003e .container {"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0;"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".agenda-view \u003e .container \u003e .list-view {"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".agenda-view \u003e .container \u003e .status-label {"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".agenda-view \u003e .container \u003e .list-view \u003e .virtual-flow \u003e .scroll-bar:vertical,"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".agenda-view \u003e .container \u003e .list-view \u003e .virtual-flow \u003e .scroll-bar:vertical .decrement-arrow,"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".agenda-view \u003e .container \u003e .list-view \u003e .virtual-flow \u003e .scroll-bar:vertical .increment-arrow {"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-pref-width: 0.0;"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".agenda-view-list-cell {"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".agenda-view-list-cell \u003e .container \u003e .header {"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: transparent transparent lightgray transparent;"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 3.0;"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-insets: 0.0 0.0 4.0 0.0;"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".agenda-view-list-cell \u003e .container \u003e .header.today {"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: transparent transparent firebrick transparent;"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".agenda-view-list-cell \u003e .container \u003e .header \u003e .date-label,"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".agenda-view-list-cell \u003e .container \u003e .header \u003e .weekday-label {"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0 0.0 4.0 0.0;"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 0.8em;"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".agenda-view-list-cell \u003e .container \u003e .header \u003e .today,"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".agenda-view-list-cell \u003e .container \u003e .header \u003e .today {"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: firebrick;"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".agenda-view-list-cell \u003e .container \u003e .body {"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0 0.0 20.0 0.0;"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-vgap: 5.0px;"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-hgap: 8.0px;"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".agenda-view-list-cell \u003e .container \u003e .body \u003e .title-label {"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 4.0 4.0 4.0 0.0;"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".agenda-view-list-cell \u003e .container \u003e .body \u003e .time-label {"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".agenda-view-list-cell \u003e .container \u003e .body \u003e .separator {"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-pref-height: 1.0;"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: lightgray;"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-style: dashed none none none;"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed by the SearchResultView."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".search-result-view \u003e .list-view,"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".search-result-view \u003e .list-view:focused {"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-pref-width: 200.0px;"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: rgb(245.0, 245.0, 245.0);"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".search-result-view \u003e .list-view \u003e .placeholder-label {"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 1.5em;"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".search-result-cell:selected {"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: rgb(235.0, 235.0, 235.0);"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".search-result-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: rgb(235.0, 235.0, 235.0);"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".search-result-cell {"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: transparent transparent lightgray transparent;"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-insets: 0.0 6.0 0.0 6.0;"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".search-result-cell \u003e .container \u003e .title-label {"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 0.9em;"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".search-result-cell \u003e .container \u003e .date-time-pane \u003e .date-label,"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".search-result-cell \u003e .container \u003e .date-time-pane \u003e .time-label {"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 0.8em;"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed by the MonthEntryView."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-entry-view {"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: .9em;"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Default styles for calendar entries."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry {"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: magenta;"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-radius: 0.0px;"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-insets: 0.0 2.0 0.0 2.0;"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-insets: 0.0 0.0 0.0 2.0;"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 0.0 0.0 0.0 4.0;"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry:dragged {"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-opacity: 0.5;"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry:dragged-start,"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry:dragged-end {"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-opacity: 0.0;"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry:selected {"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 0.0;"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry-time-label {"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 0.9em;"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 4.0 4.0 2.0 4.0;"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry-title-label {"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 0.9em;"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0 4.0 0.0 4.0;"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry-title-label-full-day {"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 0.9em;"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0 4.0 0.0 4.0;"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry:selected .default-style-entry-time-label {"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry:selected .default-style-entry-title-label {"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-visibility-checkbox \u003e .box {"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-visibility-checkbox \u003e .box {"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border,"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-inner-border, -fx-body-color;"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-radius: 3.0, 2.0, 1.0;"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.166667em 0.166667em 0.25em 0.25em; /* 2 2 3 3 */"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-visibility-checkbox:focused \u003e .box {"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-focus-color, -fx-inner-border, -fx-body-color,"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-faint-focus-color, -fx-body-color;"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-insets: -0.2, 1.0, 2.0, -1.4, 2.6;"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-radius: 3.0, 2.0, 1.0, 4.0, 1.0;"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry-popover-title {"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/* Small entries */"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry-small {"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.15em 0.5em 0.15em 0.5em;"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry-small-only, .default-style-entry-small-last {"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-insets: 0.0 2.0 0.0 0.0;"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry-small:selected \u003e .default-style-entry-small-title-label {"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 0.9em;"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry-small:selected \u003e .default-style-entry-small-time-label {"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry-small:selected \u003e * \u003e .default-style-icon,"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry-small:selected \u003e * \u003e .default-style-icon-small {"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-stroke: white;"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry-small-time-label {"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 0.8em;"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry-small-time-label-full-day {"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 0.8em;"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(gray, -25.0%);"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry-small-title-label {"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(gray, -40.0%);"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry-small-title-label-full-day {"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(gray, -40.0%);"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry-small-full-day {"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry-small-full-day:selected \u003e .default-style-entry-small-time-label {"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-entry-small-full-day:selected \u003e .default-style-entry-small-title-label {"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-calendar-header {"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: magenta;"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.25em;"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-overrun: clip;"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-calendar-header:first,"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-calendar-header:middle,"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".default-style-calendar-header:last {"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed for calendar type 1 (green)."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style1-icon, .style1-icon-small {"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-fill: -style1-color;"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-stroke: -style1-color;"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style1-entry {"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style1-color, 70.0%);"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: -style1-color;"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style1-entry:selected {"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style1-color;"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style1-entry-time-label, .style1-entry-title-label {"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style1-color, -30.0%);"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style1-entry-small:selected {"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style1-color;"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style1-entry-small-full-day {"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style1-color, 70.0%);"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style1-entry-small-title-label-full-day {"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style1-color, -30.0%);"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style1-entry-small-full-day:selected {"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style1-color;"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style1-visibility-checkbox \u003e .box,"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style1-source-grid-item-box {"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border,"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-inner-border, derive(-style1-color, 70.0%);"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style1-visibility-checkbox:focused \u003e .box {"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-focus-color, -fx-inner-border, -fx-body-color,"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-faint-focus-color, derive(-style1-color, 70.0%);"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style1-entry-popover-title {"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style1-color, -50.0%) !important;"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style1-calendar-header {"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style1-color, 70.0%);"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed for calendar type 2 (blue)."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style2-icon, .style2-icon-small {"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-fill: -style2-color;"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-stroke: -style2-color;"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style2-entry {"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style2-color, 70.0%);"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: -style2-color;"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style2-entry:selected {"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style2-color;"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style2-entry-time-label, .style2-entry-title-label {"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style2-color, -50.0%);"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style2-entry-small:selected {"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style2-color;"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style2-entry-small-full-day {"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style2-color, 70.0%);"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style2-entry-small-title-label-full-day {"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style2-color, -30.0%);"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style2-entry-small-full-day:selected {"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style2-color;"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style2-visibility-checkbox \u003e .box,"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style2-source-grid-item-box {"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border,"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-inner-border, derive(-style2-color, 70.0%);"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style2-visibility-checkbox:focused \u003e .box {"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-focus-color, -fx-inner-border, -fx-body-color,"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-faint-focus-color, derive(-style2-color, 70.0%);"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style2-entry-popover-title {"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style2-color, -30.0%) !important;"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style2-calendar-header {"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style2-color, 70.0%);"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed for calendar type 3 (yellow)."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style3-icon, .style3-icon-small {"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-fill: -style3-color;"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-stroke: -style3-color;"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style3-entry {"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style3-color, 70.0%);"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: -style3-color;"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style3-entry:selected {"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style3-color;"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style3-entry-time-label, .style3-entry-title-label {"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style3-color, -50.0%);"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style3-entry-small:selected {"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style3-color;"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style3-entry-small-full-day {"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style3-color, 70.0%);"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style3-entry-small-title-label-full-day {"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style3-color, -30.0%);"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style3-entry-small-full-day:selected {"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style3-color;"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style3-visibility-checkbox \u003e .box,"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style3-source-grid-item-box {"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border,"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-inner-border, derive(-style3-color, 70.0%);"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style3-visibility-checkbox:focused \u003e .box {"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-focus-color, -fx-inner-border, -fx-body-color,"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-faint-focus-color, derive(-style3-color, 70.0%);"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style3-entry-popover-title {"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style3-color, -30.0%) !important;"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style3-calendar-header {"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style3-color, 70.0%);"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed for calendar type 4 (purple)."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style4-icon, .style4-icon-small {"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-fill: -style4-color;"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-stroke: -style4-color;"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style4-entry {"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style4-color, 70.0%);"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: -style4-color;"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style4-entry:selected {"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style4-color;"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style4-entry-time-label, .style4-entry-title-label {"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style4-color, -50.0%);"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style4-entry-small:selected {"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style4-color;"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style4-entry-small-full-day {"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style4-color, 70.0%);"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style4-entry-small-title-label-full-day {"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style4-color, -30.0%);"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style4-entry-small-full-day:selected {"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style4-color;"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style4-visibility-checkbox \u003e .box,"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style4-source-grid-item-box {"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border,"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-inner-border, derive(-style4-color, 70.0%);"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style4-visibility-checkbox:focused \u003e .box {"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-focus-color, -fx-inner-border, -fx-body-color,"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-faint-focus-color, derive(-style4-color, 70.0%);"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style4-entry-popover-title {"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style4-color, -30.0%) !important;"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style4-calendar-header {"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style4-color, 70.0%);"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed for calendar type 5 (red)."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style5-icon, .style5-icon-small {"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-fill: -style5-color;"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-stroke: -style5-color;"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style5-entry {"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style5-color, 70.0%);"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: -style5-color;"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style5-entry:selected {"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style5-color;"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style5-entry-time-label, .style5-entry-title-label {"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style5-color, -50.0%);"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style5-entry-small:selected {"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style6-color;"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style5-entry-small-full-day {"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style5-color, 70.0%);"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style5-entry-small-title-label-full-day {"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style5-color, -30.0%);"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style5-entry-small-full-day:selected {"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style5-color;"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style5-visibility-checkbox \u003e .box {"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border,"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-inner-border, derive(-style5-color, 70.0%);"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style5-visibility-checkbox:focused \u003e .box,"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style5-source-grid-item-box {"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-focus-color, -fx-inner-border, -fx-body-color,"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-faint-focus-color, derive(-style5-color, 70.0%);"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style5-entry-popover-title {"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style5-color, -30.0%) !important;"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style5-calendar-header {"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style5-color, 70.0%);"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed for calendar type 6 (orange)."
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style6-icon, .style6-icon-small {"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-fill: -style6-color;"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-stroke: -style6-color;"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style6-entry {"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style6-color, 70.0%);"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: -style6-color;"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style6-entry:selected {"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style6-color;"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style6-entry-time-label, .style6-entry-title-label {"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style6-color, -50.0%);"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style6-entry-small:selected {"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style6-color;"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style6-entry-small-full-day {"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style6-color, 70.0%);"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style6-entry-small-title-label-full-day {"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style6-color, -30.0%);"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style6-entry-small-full-day:selected {"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style6-color;"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style6-visibility-checkbox \u003e .box,"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style6-source-grid-item-box {"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border,"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-inner-border, derive(-style6-color, 70.0%);"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style6-visibility-checkbox:focused \u003e .box {"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-focus-color, -fx-inner-border, -fx-body-color,"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-faint-focus-color, derive(-style6-color, 70.0%);"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style6-entry-popover-title {"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style6-color, -30.0%) !important;"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style6-calendar-header {"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style6-color, 70.0%);"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed for calendar type 7 (brown)."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style7-icon, .style7-icon-small {"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-fill: -style7-color;"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-stroke: -style7-color;"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style7-entry {"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style7-color, 70.0%);"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: -style7-color;"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style7-entry:selected {"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style7-color;"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style7-entry-time-label, .style7-entry-title-label {"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style7-color, -50.0%);"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style7-entry-small:selected {"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style7-color;"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style7-entry-small-full-day {"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style7-color, 70.0%);"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style7-entry-small-title-label-full-day {"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style7-color, -30.0%);"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style7-entry-small-full-day:selected {"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -style7-color;"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style7-visibility-checkbox \u003e .box,"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style7-source-grid-item-box {"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border,"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-inner-border, derive(-style7-color, 70.0%);"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style7-visibility-checkbox:focused \u003e .box {"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-focus-color, -fx-inner-border, -fx-body-color,"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-faint-focus-color, derive(-style7-color, 70.0%);"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style7-entry-popover-title {"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: derive(-style7-color, -30.0%) !important;"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".style7-calendar-header {"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(-style7-color, 70.0%);"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles for the entry popover control."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".popover-header {"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 10.0 0.0 10.0 10.0;"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: transparent transparent lightgray transparent;"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-insets: 0.0 10.0 0.0 10.0;"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".popover-header \u003e .title {"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0;"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 16.0px;"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: null;"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: null;"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".popover-header \u003e .location {"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0;"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: null;"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: null;"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".popover-footer {"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 10.0 10.0 10.0 10.0;"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".popover-accordion \u003e .titled-pane \u003e .title \u003e .arrow-button .arrow {"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-opacity: 0.0;"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".popover-accordion \u003e .titled-pane \u003e .title \u003e .arrow-button {"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-pref-width: 0.0;"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-pref-height: 0.0;"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".popover-accordion \u003e .titled-pane {"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-animated: true;"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".popover-accordion \u003e .titled-pane:expanded {"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".popover-accordion \u003e .titled-pane \u003e .title {"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-style: dashed;"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: lightgray transparent transparent transparent;"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-insets: 1.0 10.0 1.0 10.0;"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".popover-accordion \u003e .first-titled-pane \u003e .title {"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: transparent transparent transparent transparent;"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".popover-accordion \u003e .titled-pane:collapsed \u003e .title {"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: lightgray transparent transparent transparent;"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".popover-accordion \u003e .first-titled-pane:collapsed \u003e .title {"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: transparent transparent transparent transparent;"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".popover-accordion \u003e .titled-pane \u003e .content {"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: rgba(245.0, 245.0, 235.0, 0.5);"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: linear-gradient(to bottom, rgba(0.0, 0.0, 0.0, 0.2), rgba(0.0, 0.0, 0.0, 0.0));"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 6.0 0.0 0.0 0.0;"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 20.0;"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".popover-accordion \u003e .titled-pane \u003e .title \u003e .arrow-button \u003e .arrow {"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-pref-width: 0.0;"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-pref-height: 0.0;"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".popover-accordion \u003e .titled-pane:expanded \u003e * {"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: rgba(240.0, 240.0, 240.0, 0.95);"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles needed by the RecurrenceView control."
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".recurrence-view {"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".recurrence-view \u003e .container {"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-hgap: 1.0em;"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-vgap: 1.0em;"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".recurrence-view \u003e .container \u003e .ends-after-box,"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".recurrence-view \u003e .container \u003e .ends-on-box,"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".recurrence-view \u003e .container \u003e .repeat-count-box {"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-spacing: 0.5em;"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".recurrence-view \u003e .container \u003e .label {"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".recurrence-view \u003e .container \u003e .weekday-box {"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".recurrence-view \u003e .container \u003e .repeat-by-box {"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-spacing: 1.0em;"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".recurrence-view \u003e .container \u003e .weekday-box \u003e .toggle-button {"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-radius: 0.0;"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles used for the RecurrencePopup control."
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".recurrence-popup {"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 1.0em;"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: rgba(255.0, 255.0, 255.0, 0.95);"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-radius: 4.0px;"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-effect: dropshadow(gaussian, rgba(0.0, 0.0, 0.0, 0.2), 10.0, 0.5, 2.0, 2.0);"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-radius: 4.0px;"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: linear-gradient(to bottom, rgba(0.0, 0.0, 0.0, 0.3), rgba(0.0, 0.0, 0.0, 0.7));"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 0.5;"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".recurrence-popup \u003e .content {"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".recurrence-popup \u003e .content \u003e .recurrence-view {"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".recurrence-popup \u003e .content \u003e .button-pane {"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-spacing: 1.0em;"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 2.0em 1.0em 0.5em 1.0em;"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles used for MonthSheetView control."
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view {"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view .month-header {"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-alignment: center;"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 1.1em;"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: firebrick;"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 0.0 0.0 2.0 0.0;"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view .date-cell {"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 2.0;"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: lightgray;"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 0.0 1.0 1.0 0.0;"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: .8em;"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view .date-cell:today {"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -today-fill-color;"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view .date-cell .week-number-label {"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 0.7em;"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-alignment: top-right;"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view .date-cell.weekend-day {"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -weekend-fill-color;"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell .day-of-month-label {"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-pref-width: 2.0em;"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell.first-month {"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 0.0 1.0 1.0 1.0;"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell.last-month {"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 0.0 1.0 1.0 0.0;"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell.first-day-of-week {"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell:today \u003e .day-of-month-label,"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell:today \u003e .day-of-week-label,"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell:today \u003e .week-number-label {"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell.usage-very-low {"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -usage-very-low-color;"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell.usage-low {"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -usage-low-color;"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell.usage-medium {"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -usage-medium-color;"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell.usage-high {"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -usage-high-color;"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell.usage-very-high {"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -usage-very-high-color;"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell.usage-very-low \u003e .label {"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: -usage-very-low-text-color;"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell.usage-low \u003e .label {"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: -usage-low-text-color;"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell.usage-medium \u003e .label {"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: -usage-medium-text-color;"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell.usage-high \u003e .label {"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: -usage-high-text-color;"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell.usage-very-high \u003e .label {"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: -usage-very-high-text-color;"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .badge-date-cell {"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-min-width: 100.0;"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .badge-date-cell \u003e .badge-label {"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-pref-width: 2em;"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 0.8em;"
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-alignment: right;"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 1.0 4.0 1.0 4.0;"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .badge-date-cell \u003e .badge-label.usage-very-low {"
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -usage-very-low-color;"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: -usage-very-low-text-color;"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .badge-date-cell \u003e .badge-label.usage-low {"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -usage-low-color;"
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: -usage-low-text-color;"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .badge-date-cell \u003e .badge-label.usage-medium {"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -usage-medium-color;"
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: -usage-medium-text-color;"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .badge-date-cell \u003e .badge-label.usage-high {"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -usage-high-color;"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: -usage-high-text-color;"
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .badge-date-cell \u003e .badge-label.usage-very-high {"
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -usage-very-high-color;"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: -usage-very-high-text-color;"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .extended-date-cell.weekend-day {"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: derive(blanchedalmond, -5.0%);"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .extended-date-cell {"
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: blanchedalmond;"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell:selected {"
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-selection-bar;"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: derive(-fx-selection-bar, -10.0%);"
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell:selected \u003e .day-of-month-label,"
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell:selected \u003e .day-of-week-label,"
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".month-sheet-view \u003e .container \u003e .date-cell:selected \u003e .week-number-label {"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles for the PaperView control."
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".paper-view {"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".paper-view \u003e .container {"
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-hgap: 10;"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-vgap: 10;"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".paper-view \u003e .container \u003e .custom-fields {"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-hgap: 5.0;"
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-vgap: 5.0;"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".paper-view \u003e .container \u003e .custom-fields \u003e .text-field {"
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-pref-width: 3em;"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles for the TimeRangeView control."
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".time-range-view {"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".time-range-view \u003e .container {"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-hgap: 10;"
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-vgap: 10;"
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles for the SettingsView control."
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-settings-view {"
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-settings-view \u003e .container {"
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-spacing: 15.0;"
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-settings-view \u003e .container \u003e .section-title \u003e .label {"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles for the SourceGridView control."
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".source-grid-view {"
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-spacing: 7.0;"
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".source-grid-view .column {"
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-spacing: 5.0;"
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".source-grid-view .column .item-box {"
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-pref-width: 20.0;"
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-pref-height: 10.0;"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles for the PrintablePage control."
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-page {"
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-page \u003e .container {"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 10.0;"
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-page \u003e .container \u003e .header {"
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0 0.0 10.0 0.0;"
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-page \u003e .container \u003e .header \u003e .title-section {"
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-spacing: 20.0;"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-page \u003e .container \u003e .header \u003e .title-section \u003e .period-label {"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 28.0px;"
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-page \u003e .container \u003e .header \u003e .mini-calendars {"
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0 0.0 0.0 0.0;"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-page .year-month-view \u003e .container {"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 5.0 10.0 5.0 10.0;"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * The YearMonthView instances shown inside the PrintablePage control should be smaller than"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * normally. Otherwise they waste too much space."
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-page .year-month-view \u003e .container \u003e .day-of-week-label,"
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-page .year-month-view \u003e .container \u003e .day-of-month-label,"
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-page .year-month-view \u003e .container \u003e .day-not-of-month-label {"
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 10.0px;"
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-page .year-month-view \u003e .container \u003e .header \u003e .month-header \u003e .month-label,"
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-page .year-month-view \u003e .container \u003e .header \u003e .year-header \u003e .year-label {"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: 14.0px;"
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles for the PreviewPane control."
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-preview {"
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 10.0;"
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-preview \u003e .container \u003e .center {"
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: lightgrey;"
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 1.0px;"
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: black;"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-preview \u003e .container \u003e .footer {"
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 20.0 0.0 0.0 0.0;"
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-spacing: 10.0;"
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-preview \u003e .container \u003e .center \u003e .zoom-pane \u003e .print-page {"
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: gray;"
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 1.0;"
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-effect: dropshadow(three-pass-box, gray, 10.0, 0.0, 0.0, 0.0);"
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles for the PrintView control."
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-view {"
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 15.0;"
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-view \u003e .container \u003e .button-bar {"
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-alignment: center-right;"
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-spacing: 10;"
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".print-view \u003e .container \u003e .separator {"
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0 10 0 10;"
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles for the ButtonBar control."
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".button-bar \u003e .container \u003e .button {"
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 3 15 3 15;"
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;"
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1874,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1875,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".button-bar \u003e .container \u003e .button:focused {"
      },
      {
        "lineNumber": 1876,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;"
      },
      {
        "lineNumber": 1877,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-insets: 0 0 -1 0, 0, 1, 2;"
      },
      {
        "lineNumber": 1878,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1879,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1880,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".button-bar \u003e .container \u003e .button.left-pill {"
      },
      {
        "lineNumber": 1881,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-radius: 3 0 0 3;"
      },
      {
        "lineNumber": 1882,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1883,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1884,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".button-bar \u003e .container \u003e .button.left-pill:focused {"
      },
      {
        "lineNumber": 1885,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-radius: 3 0 0 3;"
      },
      {
        "lineNumber": 1886,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1887,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1888,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".button-bar \u003e .container \u003e .button.right-pill {"
      },
      {
        "lineNumber": 1889,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-radius: 0 3 3 0;"
      },
      {
        "lineNumber": 1890,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1891,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1892,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".button-bar \u003e .container \u003e .button.right-pill:focused {"
      },
      {
        "lineNumber": 1893,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-radius: 0 3 3 0;"
      },
      {
        "lineNumber": 1894,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-insets: -2 -2 -2 0, 0, 1 1 1 0, 2 2 2 1;"
      },
      {
        "lineNumber": 1895,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1896,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1897,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".button-bar \u003e .container \u003e .button.center-pill {"
      },
      {
        "lineNumber": 1898,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 1899,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1900,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1901,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".button-bar \u003e .container \u003e .button.center-pill:focused {"
      },
      {
        "lineNumber": 1902,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 1903,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-background-insets: -2 0 -2 -1, 0 0 0 -1, 1 1 1 0, 2 2 2 1;"
      },
      {
        "lineNumber": 1904,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1905,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1906,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1907,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1908,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles for the DetailedDayView control."
      },
      {
        "lineNumber": 1909,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1910,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1911,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".detailed-day-view {"
      },
      {
        "lineNumber": 1912,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0.0;"
      },
      {
        "lineNumber": 1913,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1914,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1915,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".detailed-day-view \u003e .container \u003e .separator {"
      },
      {
        "lineNumber": 1916,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 5px;"
      },
      {
        "lineNumber": 1917,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1918,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1919,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".detailed-day-view \u003e .container \u003e .all-day-label {"
      },
      {
        "lineNumber": 1920,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: normal;"
      },
      {
        "lineNumber": 1921,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 1922,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: .9em;"
      },
      {
        "lineNumber": 1923,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: lightgray;"
      },
      {
        "lineNumber": 1924,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 0 0 5 0;"
      },
      {
        "lineNumber": 1925,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0 2 0 0;"
      },
      {
        "lineNumber": 1926,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-alignment: center-right;"
      },
      {
        "lineNumber": 1927,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1928,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1929,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1930,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1931,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles for the DetailedWeekView control."
      },
      {
        "lineNumber": 1932,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1933,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1934,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".detailed-week-view \u003e .container \u003e .filler-right,"
      },
      {
        "lineNumber": 1935,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".detailed-week-view \u003e .container \u003e .filler-left {"
      },
      {
        "lineNumber": 1936,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: lightgray;"
      },
      {
        "lineNumber": 1937,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 1938,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1939,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1940,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".detailed-week-view \u003e .container \u003e .all-day-filler {"
      },
      {
        "lineNumber": 1941,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: lightgray;"
      },
      {
        "lineNumber": 1942,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 0 0 5 0;"
      },
      {
        "lineNumber": 1943,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1944,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1945,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".detailed-week-view \u003e .container \u003e .all-day-label {"
      },
      {
        "lineNumber": 1946,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-weight: normal;"
      },
      {
        "lineNumber": 1947,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 1948,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-font-size: .9em;"
      },
      {
        "lineNumber": 1949,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-color: lightgray;"
      },
      {
        "lineNumber": 1950,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-border-width: 0 0 5 0;"
      },
      {
        "lineNumber": 1951,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-padding: 0 2 0 0;"
      },
      {
        "lineNumber": 1952,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-alignment: center-right;"
      },
      {
        "lineNumber": 1953,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1954,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1955,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1956,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * --------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1957,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Styles for the WeekFieldsView control."
      },
      {
        "lineNumber": 1958,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 1959,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1960,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".week-fields {"
      },
      {
        "lineNumber": 1961,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 1962,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1963,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ".week-fields \u003e .content {"
      },
      {
        "lineNumber": 1964,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-hgap: 10;"
      },
      {
        "lineNumber": 1965,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    -fx-vgap: 10;"
      },
      {
        "lineNumber": 1966,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 1966
    }
  },
  {
    "path": "src/main/resources/view/emailOpen.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c!-- @@author glorialaw --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.control.ToolBar?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"emailComposePopup\" onKeyPressed\u003d\"#handleKeyPress\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003cGridPane layoutX\u003d\"-7.0\" layoutY\u003d\"41.0\" prefHeight\u003d\"379.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"499.3333206176758\" minWidth\u003d\"10.0\" prefWidth\u003d\"64.33333714803061\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"568.6666831970215\" minWidth\u003d\"10.0\" prefWidth\u003d\"462.6666870117187\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                \u003cRowConstraints maxHeight\u003d\"127.99999237060547\" minHeight\u003d\"9.333323001861572\" prefHeight\u003d\"30.333338419596345\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                \u003cRowConstraints maxHeight\u003d\"257.6666769981384\" minHeight\u003d\"3.3333435058594034\" prefHeight\u003d\"30.66665649414061\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                \u003cRowConstraints maxHeight\u003d\"335.6666564941406\" minHeight\u003d\"10.0\" prefHeight\u003d\"292.00001017252606\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                \u003cLabel prefHeight\u003d\"17.0\" prefWidth\u003d\"41.0\" text\u003d\"From:\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                \u003cLabel text\u003d\"Subject:\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                \u003cLabel text\u003d\"Message:\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cLabel fx:id\u003d\"fromContent\" prefHeight\u003d\"17.0\" prefWidth\u003d\"492.0\" text\u003d\"Label\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cLabel fx:id\u003d\"subjectContent\" prefHeight\u003d\"17.0\" prefWidth\u003d\"507.0\" text\u003d\"Label\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cTextArea fx:id\u003d\"msgContent\" blendMode\u003d\"DARKEN\" editable\u003d\"false\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "      \u003cToolBar layoutY\u003d\"4.0\" prefHeight\u003d\"47.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: white;\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cButton fx:id\u003d\"newEmailButton\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#openComposeWindow\" text\u003d\"New Email\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cButton fx:id\u003d\"replyButton\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#openReplyWindow\" text\u003d\"Reply\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cButton fx:id\u003d\"forwardButton\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#openForwardWindow\" text\u003d\"Forward\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cButton fx:id\u003d\"closeButton\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#closeWindow\" text\u003d\"Close\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cInsets left\u003d\"20.0\" right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "      \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "glorialaw": 53
    }
  },
  {
    "path": "src/main/resources/view/emailcompose.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c!-- @@author glorialaw --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"emailComposePopup\" onKeyPressed\u003d\"#handleKeyPress\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "      \u003cGridPane layoutX\u003d\"-7.0\" prefHeight\u003d\"420.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"499.3333206176758\" minWidth\u003d\"10.0\" prefWidth\u003d\"64.33333714803061\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"568.6666831970215\" minWidth\u003d\"10.0\" prefWidth\u003d\"462.6666870117187\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"568.6666831970215\" minWidth\u003d\"10.0\" prefWidth\u003d\"57.99997965494788\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "          \u003cRowConstraints maxHeight\u003d\"127.99999237060547\" minHeight\u003d\"9.333323001861572\" prefHeight\u003d\"9.333323001861572\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "          \u003cRowConstraints maxHeight\u003d\"257.6666769981384\" minHeight\u003d\"3.3333435058594034\" prefHeight\u003d\"28.00001525878909\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "          \u003cRowConstraints maxHeight\u003d\"335.6666564941406\" minHeight\u003d\"10.0\" prefHeight\u003d\"310.99998474121094\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cTextField id\u003d\"recipients\" fx:id\u003d\"recipients\" prefHeight\u003d\"25.0\" prefWidth\u003d\"473.0\" promptText\u003d\"separate recipients with ,\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003c/TextField\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cLabel text\u003d\"To:\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cLabel text\u003d\"Subject:\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cTextField id\u003d\"subject\" fx:id\u003d\"subject\" promptText\u003d\"enter subject...\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cTextArea id\u003d\"message\" fx:id\u003d\"message\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" promptText\u003d\"your message here...\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cLabel text\u003d\"Message:\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"232.0\" prefWidth\u003d\"59.0\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"CENTER\" GridPane.rowIndex\u003d\"2\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                  \u003cButton fx:id\u003d\"sendButton\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" defaultButton\u003d\"true\" mnemonicParsing\u003d\"false\" onAction\u003d\"#sendEmail\" prefHeight\u003d\"25.0\" prefWidth\u003d\"51.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                  \u003cButton fx:id\u003d\"cancelButton\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#cancelWindow\" text\u003d\"Cancel\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "      \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "glorialaw": 56
    }
  },
  {
    "path": "src/main/resources/view/successwindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c!-- @@author glorialaw --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"successPopup\" onKeyPressed\u003d\"#handleKeyPress\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "      \u003cPane layoutX\u003d\"200.0\" layoutY\u003d\"89.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            \u003cLabel fx:id\u003d\"results\" layoutX\u003d\"-7.0\" layoutY\u003d\"-7.0\" prefHeight\u003d\"215.0\" prefWidth\u003d\"217.0\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "      \u003c/Pane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "      \u003cButton fx:id\u003d\"closeButton\" layoutX\u003d\"537.0\" layoutY\u003d\"14.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#cancelWindow\" text\u003d\"return\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "glorialaw": 19
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Valid Person --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone isPrivate\u003d\"false\"\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment isPrivate\u003d\"false\"\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone isPrivate\u003d\"false\"\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment isPrivate\u003d\"false\"\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 2,
      "glorialaw": 3,
      "-": 17
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone isPrivate\u003d\"false\"\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment isPrivate\u003d\"false\"\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 1,
      "glorialaw": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone isPrivate\u003d\"false\"\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment isPrivate\u003d\"false\"\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 1,
      "glorialaw": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "{@code TypicalPersons#getTypicalAddressBook()}--\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e85355255\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone\u003eSGT\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone\u003eSGT\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctags\u003efriends\u003c/tags\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctags\u003eowesMoney\u003c/tags\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 7,
      "XavierMaYuqian": 7,
      "glorialaw": 7,
      "-": 52
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    \u003ctimeZone\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    \u003ccomment\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 1,
      "glorialaw": 2,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    \u003ctimeZone\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    \u003ccomment\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 1,
      "glorialaw": 2,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/tempAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cid\u003e1\u003c/id\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfirstName\u003eJohn\u003c/firstName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003clastName\u003eDoe\u003c/lastName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cgithubUsername\u003e\u003c/githubUsername\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cstreet\u003e\u003c/street\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpostalCode\u003e\u003c/postalCode\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccity\u003e\u003c/city\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone\u003e\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment\u003e\u003c/comment\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctags\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFriends\u003c/name\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tags\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 1,
      "glorialaw": 1,
      "-": 15
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        \u003cisArchived\u003etrue\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        \u003ctimeZone\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        \u003ccomment\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 9,
      "XavierMaYuqian": 9,
      "glorialaw": 9,
      "-": 57
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    \u003ctimeZone\u003ePST\u003c/timeZone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    \u003ccomment\u003eNIL\u003c/comment\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    \u003cisArchived\u003efalse\u003c/isArchived\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 1,
      "XavierMaYuqian": 1,
      "glorialaw": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private static final String TIMEZONE_FIELD_ID \u003d \"#timeZone\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private static final String COMMENT_FIELD_ID \u003d \"#comment\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private final Label timeZoneLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private final Label commentLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        this.timeZoneLabel \u003d getChildNode(TIMEZONE_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        this.commentLabel \u003d getChildNode(COMMENT_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public String getCustTimeZone() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        return timeZoneLabel.getText(); }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public String getComment() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return commentLabel.getText();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 7,
      "glorialaw": 6,
      "-": 71
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private static final String TOTAL_PERSONS_STATUS_ID \u003d \"#totalPersonsStatus\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar syncStatusNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private final StatusBar totalPersonsStatusNode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar saveLocationNode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSyncStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private String lastRememberedTotalPersonsStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSaveLocation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        this.totalPersonsStatusNode \u003d getChildNode(TOTAL_PERSONS_STATUS_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the sync status portion of the status bar."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSyncStatus() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return syncStatusNode.getText();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Returns the text of the \u0027total persons\u0027 portion of the status bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public String getTotalPersonsStatus() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return totalPersonsStatusNode.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Returns the text of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public String getSaveLocation() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return saveLocationNode.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Remembers the content of the sync status portion of the status bar."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void rememberSyncStatus() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        lastRememberedSyncStatus \u003d getSyncStatus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Returns true if the current content of the sync status is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * {@code rememberSyncStatus()} call."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public boolean isSyncStatusChanged() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return !lastRememberedSyncStatus.equals(getSyncStatus());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Remembers the content of the \u0027total persons\u0027 portion of the status bar."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void rememberTotalPersonsStatus() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        lastRememberedTotalPersonsStatus \u003d getTotalPersonsStatus();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Returns true if the current content of the \u0027total persons\u0027 is different from the value remembered by the most"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * recent {@code rememberTotalPersonsStatus()} call."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public boolean isTotalPersonsStatusChanged() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return !lastRememberedTotalPersonsStatus.equals(getTotalPersonsStatus());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Remembers the content of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void rememberSaveLocation() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        lastRememberedSaveLocation \u003d getSaveLocation();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * recent {@code rememberSaveLocation()} call."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public boolean isSaveLocationChanged() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return !lastRememberedSaveLocation.equals(getSaveLocation());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 65,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : SellIt\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private static final String VALID_TIMEZONE \u003d \"PST\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private static final String VALID_COMMENT \u003d \"NIL\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private static final String VALID_ARCHIVED \u003d \"false\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, dataFromFile.getTagList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TIMEZONE, VALID_COMMENT, VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TIMEZONE, VALID_COMMENT, VALID_TAGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TIMEZONE, VALID_COMMENT, VALID_TAGS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        TEMP_FILE.createNewFile();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 4,
      "glorialaw": 2,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddAppointmentCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.AppointmentName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.AppointmentTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class AddAppointmentCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void constructor_nullName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        new AddAppointmentCommand(null,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                new AppointmentTime(\"13 Jan 2018 13:22 Asia/Singapore\"), new ArrayList\u003cIndex\u003e());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void constructor_nullTime_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        new AddAppointmentCommand(new AppointmentName(\"testname\"), null, new ArrayList\u003cIndex\u003e());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void constructor_nullIndexes_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        new AddAppointmentCommand(new AppointmentName(\"testname\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                new AppointmentTime(\"13 Jan 2018 13:22 Asia/Singapore\"), null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void execute_appointmentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        ModelStubAcceptingAppointmentAdded modelStub \u003d new ModelStubAcceptingAppointmentAdded();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Appointment validAppointment \u003d new Appointment(new AppointmentName(\"testname\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                new AppointmentTime(\"13 Jan 2018 13:22 Asia/Singapore\"), new UniquePersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        CommandResult commandResult \u003d getAddCommandForAppointment(validAppointment, modelStub).execute();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertEquals(String.format(AddAppointmentCommand.MESSAGE_SUCCESS, validAppointment),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertEquals(Arrays.asList(validAppointment), modelStub.appointmentsAdded);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void execute_duplicateAppointment_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubThrowingDuplicateAppointmentException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Appointment validAppointment \u003d new Appointment(new AppointmentName(\"testname\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                new AppointmentTime(\"13 Jan 2018 13:22 Asia/Singapore\"), new UniquePersonList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        thrown.expectMessage(AddAppointmentCommand.MESSAGE_DUPLICATE_APPOINTMENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        getAddCommandForAppointment(validAppointment, modelStub).execute();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Generates a new AddAppointmentCommand with the details of the given appointment."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private AddAppointmentCommand getAddCommandForAppointment(Appointment appointment, Model model) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        AddAppointmentCommand command \u003d new AddAppointmentCommand(appointment.getName(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                appointment.getTime(), new ArrayList\u003cIndex\u003e());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public void sort() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public void deletePerson(Person target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                throws DuplicatePersonException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public void deleteAppointment(Appointment target) throws AppointmentNotFoundException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public void addAppointment(Appointment appointment) throws DuplicateAppointmentException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public void updateAppointment(Appointment target, Appointment editedAppointment)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                throws DuplicateAppointmentException, AppointmentNotFoundException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return new UniquePersonList().asObservableList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public String getPassword() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public void setPassword(String e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public void archivePerson(Person target) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public void unarchivePerson(Person target) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * A Model stub that always throw a DuplicateAppointmentException when trying to add an appointment."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private class ModelStubThrowingDuplicateAppointmentException extends ModelStub {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public void addAppointment(Appointment appointment) throws DuplicateAppointmentException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            throw new DuplicateAppointmentException();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * A Model stub that always accept the appointment being added."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private class ModelStubAcceptingAppointmentAdded extends ModelStub {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        final ArrayList\u003cAppointment\u003e appointmentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public void addAppointment(Appointment appointment) throws DuplicateAppointmentException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            requireNonNull(appointment);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            appointmentsAdded.add(appointment);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 228
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        getAddCommandForPerson(validPerson, modelStub).execute();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a new AddCommand with the details of the given person."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommand getAddCommandForPerson(Person person, Model model) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d new AddCommand(person);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public void sort() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public void deletePerson(Person target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                throws DuplicatePersonException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public void deleteAppointment(Appointment target) throws AppointmentNotFoundException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public void addAppointment(Appointment appointment) throws DuplicateAppointmentException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public void updateAppointment(Appointment target, Appointment editedAppointment)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                throws DuplicateAppointmentException, AppointmentNotFoundException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public String getPassword() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public void setPassword(String e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public void archivePerson(Person target) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public void unarchivePerson(Person target) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * A Model stub that always throw a DuplicatePersonException when trying to add a person."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 3,
      "XavierMaYuqian": 132,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ArchiveCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "//@@author ongkuanyang"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_UNARCHIVED_PERSONS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " * {@code ArchiveCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "public class ArchiveCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Person personToArchive \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        ArchiveCommand archiveCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        String expectedMessage \u003d String.format(ArchiveCommand.MESSAGE_ARCHIVE_PERSON_SUCCESS, personToArchive);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Person personToArchive2 \u003d expectedModel.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        expectedModel.archivePerson(personToArchive2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_UNARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertCommandSuccess(archiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertTrue(personToArchive.isArchived());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        ArchiveCommand archiveCommand \u003d prepareCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertCommandFailure(archiveCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void execute_validIndexFilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Person personToArchive \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        ArchiveCommand archiveCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        String expectedMessage \u003d String.format(ArchiveCommand.MESSAGE_ARCHIVE_PERSON_SUCCESS, personToArchive);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Person personToArchive2 \u003d expectedModel.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        expectedModel.archivePerson(personToArchive2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_UNARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertCommandSuccess(archiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertTrue(personToArchive.isArchived());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        ArchiveCommand archiveCommand \u003d prepareCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertCommandFailure(archiveCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Person personToArchive \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        ArchiveCommand archiveCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        archiveCommand.execute();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        undoRedoStack.push(archiveCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        expectedModel.archivePerson(personToArchive);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        ArchiveCommand archiveCommand \u003d prepareCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertCommandFailure(archiveCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * 1. Archives a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * 2. Undo the archival."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously archived person in the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * 4. Redo the archival. This ensures {@code RedoCommand} archives the person object regardless of indexing."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        ArchiveCommand archiveCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Person personToArchive \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // archives -\u003e archives second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        archiveCommand.execute();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        undoRedoStack.push(archiveCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        expectedModel.archivePerson(personToArchive);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertNotEquals(personToArchive, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void equals() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        ArchiveCommand archiveFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        ArchiveCommand archiveSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertTrue(archiveFirstCommand.equals(archiveFirstCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        ArchiveCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertTrue(archiveFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // one command preprocessed when previously equal -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        deleteFirstCommandCopy.preprocessUndoableCommand();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(1));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(archiveSecondCommand));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Returns a {@code ArchiveCommand} with the parameter {@code index}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private ArchiveCommand prepareCommand(Index index) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(index);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        archiveCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        return archiveCommand;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 202
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String VALID_TAG_UNUSED \u003d \"unused\"; // do not use this tag when creating a person"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public static final String VALID_TIMEZONE_AMY \u003d \"SGT\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public static final String VALID_TIMEZONE_BOB \u003d \"SGT\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String VALID_COMMENT_AMY \u003d \"NIL\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String VALID_COMMENT_BOB \u003d \"NIL\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public static final String TIMEZONE_DESC_AMY \u003d \" \" + PREFIX_TIMEZONE + VALID_TIMEZONE_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public static final String TIMEZONE_DESC_BOB \u003d \" \" + PREFIX_TIMEZONE + VALID_TIMEZONE_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String COMMENT_DESC_AMY \u003d \" \" + PREFIX_COMMENT + VALID_COMMENT_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String COMMENT_DESC_BOB \u003d \" \" + PREFIX_COMMENT + VALID_COMMENT_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public static final String BLANK_TIMEZONE_DESC \u003d \" \" + PREFIX_TIMEZONE; //empty string not allowed for timezones"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TIMEZONE_DESC \u003d \" \" + PREFIX_TIMEZONE + \"P$T\"; //invalid timezone"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String INVALID_COMMENT_DESC \u003d \" \" + PREFIX_COMMENT; //empty string not allowed for comments"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                .withTimeZone(VALID_TIMEZONE_AMY).withComment(VALID_COMMENT_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                .withTimeZone(VALID_TIMEZONE_BOB).withComment(VALID_COMMENT_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return undoCommand;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return redoCommand;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 10,
      "glorialaw": 11,
      "-": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "//@@author XavierMaYuqian"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " * Including integration tests and unit tests of the SortCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private SortCommand sortCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        sortCommand \u003d new SortCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        sortCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertCommandSuccess(sortCommand, model, SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMMENT_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMEZONE_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMMENT_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMMENT_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMEZONE_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMEZONE_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                .withTimeZone(VALID_TIMEZONE_BOB).withComment(VALID_COMMENT_BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + ADDRESS_DESC_BOB + TIMEZONE_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + COMMENT_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + ADDRESS_DESC_BOB + TIMEZONE_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + COMMENT_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + ADDRESS_DESC_BOB + TIMEZONE_DESC_BOB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + COMMENT_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + ADDRESS_DESC_BOB + TIMEZONE_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + COMMENT_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + ADDRESS_DESC_BOB + TIMEZONE_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + COMMENT_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTimeZone(VALID_TIMEZONE_BOB)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                .withComment(VALID_COMMENT_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + TIMEZONE_DESC_BOB + COMMENT_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                           + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                .withTimeZone(VALID_TIMEZONE_AMY).withComment(VALID_COMMENT_AMY).withTags().build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                        + TIMEZONE_DESC_BOB + COMMENT_DESC_BOB,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                        + TIMEZONE_DESC_BOB + COMMENT_DESC_BOB,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                        + TIMEZONE_DESC_BOB + COMMENT_DESC_BOB,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                        + TIMEZONE_DESC_BOB + COMMENT_DESC_BOB,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                        + TIMEZONE_DESC_BOB + COMMENT_DESC_BOB,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                        + TIMEZONE_DESC_BOB + COMMENT_DESC_BOB,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + TIMEZONE_DESC_BOB + COMMENT_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + TIMEZONE_DESC_BOB + COMMENT_DESC_BOB"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + TIMEZONE_DESC_BOB + COMMENT_DESC_BOB"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + TIMEZONE_DESC_BOB + COMMENT_DESC_BOB"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + TIMEZONE_DESC_BOB + COMMENT_DESC_BOB"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                        + TIMEZONE_DESC_BOB + COMMENT_DESC_BOB,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + ADDRESS_DESC_BOB + TIMEZONE_DESC_BOB + COMMENT_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 36,
      "glorialaw": 13,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void parseCommand_addAlias() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void parseCommand_clearAlias() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void parseCommand_deleteAlias() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void parseCommand_editAlias() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void parseCommand_findAlias() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void parseCommand_historyAlias() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void parseCommand_listAlias() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void parseCommand_selectAlias() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS + \" 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS + \" 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 70,
      "-": 144
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private final AddressBook addressBookWithBobAndAmy \u003d new AddressBookBuilder().withPerson(BOB)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            .withPerson(AMY).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getTagList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsAssertionError() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Repeat ALICE twice"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        List\u003cAppointment\u003e newAppointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newAppointments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getTagList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getTagList().remove(0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void updatePersonDetailsChangedPersonsAndTagsListUpdated() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        AddressBook addressBookUpdatedToAmy \u003d new AddressBookBuilder().withPerson(BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        addressBookUpdatedToAmy.updatePerson(BOB, AMY);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(AMY).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertEquals(expectedAddressBook, addressBookUpdatedToAmy);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void removeTagNonExistentTagAddressBookUnchanged() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_UNUSED));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void removeTagTagUsedByMultiplePersonsTagRemoved() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_FRIEND));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(bobWithoutFriendTag)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                .withPerson(amyWithoutFriendTag).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                        Collection\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            this.tags.setAll(tags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            this.appointments.setAll(appointments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return appointments;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return tags;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        public String getPassword() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 3,
      "XavierMaYuqian": 82,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_UNARCHIVED_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void deleteTagNonExistentTagModelUnchanged() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        modelManager.deleteTag(new Tag(VALID_TAG_UNUSED));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertEquals(new ModelManager(addressBook, userPrefs), modelManager);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void deleteTagTagUsedByMultiplePersonsTagRemoved() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(amyWithoutFriendTag)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                .withPerson(bobWithoutFriendTag).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertEquals(new ModelManager(expectedAddressBook, userPrefs), modelManager);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_UNARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        differentUserPrefs.setAddressBookName(\"differentName\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 1,
      "XavierMaYuqian": 75,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.person.Comment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.CustTimeZone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private static final String INVALID_TIMEZONE \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private static final String INVALID_COMMENT \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private static final String VALID_TIMEZONE \u003d BENSON.getCustTimeZone().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private static final String VALID_COMMENT \u003d BENSON.getComment().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                                     VALID_TIMEZONE, VALID_COMMENT, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                VALID_TIMEZONE, VALID_COMMENT, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                                     VALID_TIMEZONE, VALID_COMMENT, VALID_TAGS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                VALID_TIMEZONE, VALID_COMMENT, VALID_TAGS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                                     VALID_TIMEZONE, VALID_COMMENT, VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                VALID_TIMEZONE, VALID_COMMENT, VALID_TAGS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                                     VALID_TIMEZONE, VALID_COMMENT, VALID_TAGS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                VALID_TIMEZONE, VALID_COMMENT, VALID_TAGS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                                     VALID_TIMEZONE, VALID_COMMENT, invalidTags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public void toModelType_invalidTimeZone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                                     INVALID_TIMEZONE, VALID_COMMENT, VALID_TAGS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        String expectedMessage \u003d CustTimeZone.MESSAGE_TIMEZONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public void toModelType_invalidComment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                                     VALID_TIMEZONE, INVALID_COMMENT, VALID_TAGS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        String expectedMessage \u003d Comment.MESSAGE_COMMENT_CONSTRAINTS;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 30,
      "glorialaw": 18,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.person.Comment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.CustTimeZone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        descriptor.setCustTimeZone(person.getCustTimeZone());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        descriptor.setComment(person.getComment());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * Sets the {@code Time Zone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public EditPersonDescriptorBuilder withTimeZone(String timeZone) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        descriptor.setCustTimeZone(new CustTimeZone(timeZone));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Sets the {@code Comment} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public EditPersonDescriptorBuilder withComment(String comment) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        descriptor.setComment(new Comment(comment));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 25,
      "glorialaw": 15,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.person.Comment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.CustTimeZone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public static final String DEFAULT_TIMEZONE \u003d \"SGT\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public static final String DEFAULT_COMMENT \u003d \"NIL\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_TAGS \u003d \"friends\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private CustTimeZone timeZone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private Comment comment;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        timeZone \u003d new CustTimeZone(DEFAULT_TIMEZONE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        comment \u003d new Comment(DEFAULT_COMMENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        timeZone \u003d personToCopy.getCustTimeZone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        comment \u003d personToCopy.getComment();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     * Sets the {@code CustTimeZone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    public PersonBuilder withTimeZone(String timeZone) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        this.timeZone \u003d new CustTimeZone(timeZone);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Sets the {@code Comment} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public PersonBuilder withComment(String comment) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        this.comment \u003d new Comment(comment);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return new Person(name, phone, email, address, timeZone, comment, tags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 19,
      "glorialaw": 18,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        sb.append(PREFIX_TIMEZONE + person.getCustTimeZone().timeZone + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        sb.append(PREFIX_COMMENT + person.getComment().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 2,
      "glorialaw": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMMENT_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMMENT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMEZONE_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMEZONE_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            .withPhone(\"85355255\").withTimeZone(\"SGT\").withComment(\"NIL\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            .withTimeZone(\"PST\").withComment(\"NIL\").withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withTimeZone(\"PST\").withComment(\"NIL\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            .withTimeZone(\"PST\").withComment(\"NIL\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withTimeZone(\"PST\").withComment(\"NIL\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withTimeZone(\"SGT\").withComment(\"NIL\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withTimeZone(\"PST\").withComment(\"NIL\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withTimeZone(\"SGT\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withTimeZone(\"PST\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTimeZone(VALID_TIMEZONE_AMY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            .withComment(VALID_COMMENT_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTimeZone(VALID_TIMEZONE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            .withComment(VALID_COMMENT_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                ab.addPerson(person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(\"not possible\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 12,
      "glorialaw": 17,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personWithTags \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personCard \u003d new PersonCard(personWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard copy \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(personCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(person, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        System.out.println(personCardHandle.getId());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify person details are displayed correctly"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplaysPerson(expectedPerson, personCardHandle);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "glorialaw": 1,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "    private static final NewResultAvailableEvent NEW_RESULT_EVENT_STUB \u003d new NewResultAvailableEvent(\"Stub\", false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(NEW_RESULT_EVENT_STUB);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(NEW_RESULT_EVENT_STUB.message, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "glorialaw": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.TOTAL_PERSONS_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String RELATIVE_PATH \u003d \"./\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private static final AddressBookChangedEvent EVENT_STUB \u003d new AddressBookChangedEvent("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            new AddressBookBuilder().withPerson(ALICE).build());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private static final int INITIAL_TOTAL_PERSONS \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, INITIAL_TOTAL_PERSONS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                String.format(TOTAL_PERSONS_STATUS, INITIAL_TOTAL_PERSONS));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                String.format(TOTAL_PERSONS_STATUS, EVENT_STUB.data.getPersonList().size()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}, and the total persons matches that of"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * {@code expectedTotalPersonsStatus}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                                         String expectedTotalPersonsStatus) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertEquals(expectedTotalPersonsStatus, statusBarFooterHandle.getTotalPersonsStatus());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 19,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        assertEquals(expectedCard.getCustTimeZone(), actualCard.getCustTimeZone());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertEquals(expectedCard.getComment(), actualCard.getComment());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        assertEquals(expectedPerson.getCustTimeZone().timeZone, actualCard.getCustTimeZone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertEquals(expectedPerson.getComment().value, actualCard.getComment());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 2,
      "glorialaw": 2,
      "-": 73
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BLANK_TIMEZONE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMMENT_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMMENT_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMMENT_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMEZONE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMEZONE_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMEZONE_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMMENT_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMEZONE_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import seedu.address.model.person.Comment;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.CustTimeZone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TIMEZONE_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + COMMENT_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withTimeZone(VALID_TIMEZONE_AMY)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                .withComment(VALID_COMMENT_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + TIMEZONE_DESC_AMY + COMMENT_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + TIMEZONE_DESC_AMY + COMMENT_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + TIMEZONE_DESC_AMY + COMMENT_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + TIMEZONE_DESC_AMY + COMMENT_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + TIMEZONE_DESC_BOB + COMMENT_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // This test will fail if a new tag that is not in the model is used, see the bug documented in"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // AddressBook#addPerson(Person)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + ADDRESS_DESC_AMY + TIMEZONE_DESC_AMY + COMMENT_DESC_AMY;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + ADDRESS_DESC_AMY + TIMEZONE_DESC_AMY + COMMENT_DESC_AMY;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + ADDRESS_DESC_AMY + TIMEZONE_DESC_AMY + COMMENT_DESC_AMY;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + INVALID_ADDRESS_DESC + TIMEZONE_DESC_AMY + COMMENT_DESC_AMY;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + ADDRESS_DESC_AMY + TIMEZONE_DESC_AMY + COMMENT_DESC_AMY"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        /* Case: blank comment -\u003e rejected */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + ADDRESS_DESC_AMY + TIMEZONE_DESC_AMY + INVALID_COMMENT_DESC"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertCommandFailure(command, Comment.MESSAGE_COMMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        //@@author glorialaw"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        /* Case: blank timezone -\u003e rejected */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                + ADDRESS_DESC_AMY + BLANK_TIMEZONE_DESC + COMMENT_DESC_AMY"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        assertCommandFailure(command, CustTimeZone.MESSAGE_TIMEZONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        /* Case: invalid timezone -\u003e rejected */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                + ADDRESS_DESC_AMY + INVALID_TIMEZONE_DESC + COMMENT_DESC_AMY"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        assertCommandFailure(command, CustTimeZone.MESSAGE_TIMEZONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertStatusBarChangedExceptSaveLocation();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 27,
      "glorialaw": 28,
      "-": 247
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.TOTAL_PERSONS_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String getDataFileLocation() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, getModel());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        statusBarFooterHandle.rememberTotalPersonsStatus();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertFalse(handle.isTotalPersonsStatusChanged());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location and the total person"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * list remains the same."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertFalse(handle.isTotalPersonsStatusChanged());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    //@@author XavierMaYuqian"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Asserts that the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, and total persons was changed to match the total"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * number of persons in the address book, while the save location remains the same."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    protected void assertStatusBarChangedExceptSaveLocation() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        final int totalPersons \u003d testApp.getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertEquals(String.format(TOTAL_PERSONS_STATUS, totalPersons), handle.getTotalPersonsStatus());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            assertEquals(String.format(TOTAL_PERSONS_STATUS, getModel().getAddressBook().getPersonList().size()),"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                    getStatusBarFooter().getTotalPersonsStatus());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "            throw new AssertionError(\"Starting state is wrong.\", e);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 51,
      "-": 252
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertStatusBarChangedExceptSaveLocation();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 1,
      "-": 100
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"targetPerson is retrieved from model.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "        assertStatusBarChangedExceptSaveLocation();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XavierMaYuqian": 1,
      "-": 199
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BLANK_TIMEZONE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMMENT_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMMENT_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMEZONE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMEZONE_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMEZONE_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMMENT_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMEZONE_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_UNARCHIVED_PERSONS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.CustTimeZone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TIMEZONE_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + COMMENT_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTimeZone(VALID_TIMEZONE_BOB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                .withComment(VALID_COMMENT_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + ADDRESS_DESC_BOB + TIMEZONE_DESC_BOB + COMMENT_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit some fields -\u003e edited */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + ADDRESS_DESC_AMY + TIMEZONE_DESC_AMY + COMMENT_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                        + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                        + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                        + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                        + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                        + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        //@@author glorialaw"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        /* Case: invalid timezone -\u003e rejected */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                        + INVALID_TIMEZONE_DESC,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                CustTimeZone.MESSAGE_TIMEZONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        /* Case: blank timezone -\u003e rejected */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                        + BLANK_TIMEZONE_DESC,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "                CustTimeZone.MESSAGE_TIMEZONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "glorialaw"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "glorialaw"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + ADDRESS_DESC_BOB + TIMEZONE_DESC_BOB + COMMENT_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "XavierMaYuqian"
        },
        "content": "                + ADDRESS_DESC_BOB + TIMEZONE_DESC_BOB + COMMENT_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.updatePerson("
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_UNARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException | PersonNotFoundException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException("
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ongkuanyang"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_UNARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongkuanyang": 3,
      "XavierMaYuqian": 9,
      "glorialaw": 35,
      "-": 263
    }
  }
]
